namespace ALittle;

[Language(LuaJIT)]
private var byte = lua.String.byte;
[Language(LuaJIT)]
private var sub = lua.String.sub;
[Language(LuaJIT)]
private var len = lua.String.len;
[Language(LuaJIT)]
private var find = lua.String.find;
[Language(LuaJIT)]
private var upper = lua.String.upper;
[Language(LuaJIT)]
private var match = lua.String.match;
[Language(LuaJIT)]
private var concat = lua.table.concat;
[Language(LuaJIT)]
private var tostring = lua.tostring;
[Language(LuaJIT)]
private var tonumber = lua.tonumber;
[Language(LuaJIT)]
private var floor = lua.math.floor;

// 转为大写
public static String_Upper(string s) : string
{
    [Language(LuaJIT)]
    return upper(s);
    
    [Language(JavaScript)]
    return cast<javascript.String>(s).toUpperCase();
}

// 转字符串
public static String_ToString(any s) : string
{
    [Language(LuaJIT)]
    return tostring(s);
    
    [Language(JavaScript)]
    if (s == null) return "nil";
    else return cast<javascript.Object>(s).toString();
}

// 把指定字符转为整数
public static String_Byte(string s, int index) : int
{
    [Language(LuaJIT)]
    return byte(s, index);
    
    [Language(JavaScript)]
    return cast<javascript.String>(s).charCodeAt(index - 1);
}

// 获取子串长度
public static String_Len(string s) : int
{
    [Language(LuaJIT)]
    return len(s);
    
    [Language(JavaScript)]
    return cast<javascript.String>(s).length;
}

// 子串查找
public static String_Find(string s, string t, [Nullable] int init) : int
{
    [Language(LuaJIT)]
    var result = find(s, t, init, true);
    [Language(LuaJIT)]
    return result;
    
    [Language(JavaScript)]
    if (init == null)
    {
        var index = cast<javascript.String>(s).indexOf(t);
        if (index >= 0) return index + 1;
        else return null;
    }
    else
    {
        var index = cast<javascript.String>(s).indexOf(t, init - 1);
        if (index >= 0) return index + 1;
        else return null;    
    }
}

// 切割子串
public static String_Sub(string s, int start, [Nullable] int end) : string
{
    [Language(LuaJIT)]
    return sub(s, start, end);
    
    [Language(JavaScript)]
    if (end == null)
        return cast<javascript.String>(s).slice(start - 1);
    else
        return cast<javascript.String>(s).slice(start - 1, end);
}
    
// 去掉前后空格，制表符
public static String_Trim(string s) : string
{
    [Language(LuaJIT)]
    return match(s, "^%s*(.*)%s*$");
    
    [Language(JavaScript)]
    return cast<javascript.String>(s).trim();
}

// 根据分隔符拆分字符串成列表，正常版本
public static String_Split(string target, string sep) : List<string>
{
    if (target == null)
        return new List<string>();
    if (sep == null || sep == "") sep = ",";
    var fields = new List<string>();
    var fields_count = 0;
    var start_pos = 1;
    while (true)
    {
        var start_index = String_Find(target, sep, start_pos);
        if (start_index == null)
        {
            ++fields_count;
            fields[fields_count] = String_Sub(target, start_pos);
            break;
        }
        ++fields_count;
        fields[fields_count] = String_Sub(target, start_pos, start_index - 1);
        start_pos = start_index + len(sep);
    }
    return fields;
}

// 根据分隔符拆分字符串成列表，正常版本
public static String_SplitSepList(string target, List<string> sep_list) : List<string>
{
    if (target == null) return new List<string>();
    if (sep_list == null) sep_list = new List<string>();
    
    var fields = new List<string>();
    var fields_count = 0;
    var start_pos = 1;
    while (true)
    {
        var start_index:int;
        var end_index:int;
        for (var _, sep in sep_list)
        {
            var start_index_tmp = String_Find(target, sep, start_pos);
            if (start_index_tmp != null)
            {
                if (start_index == null || start_index_tmp < start_index)
                {
                    start_index = start_index_tmp;
                    end_index = start_index + String_Len(sep) - 1;
                }
            }
        }
        if (start_index == null)
        {
            var value = String_Sub(target, start_pos);
            if (String_Len(value) > 0)
            {
                ++ fields_count;
                fields[fields_count] = String_Sub(target, start_pos);
            }
            break;
        }
        
        var value = String_Sub(target, start_pos, start_index - 1);
        if (String_Len(value) > 0)
        {
            ++ fields_count;
            fields[fields_count] = String_Sub(target, start_pos, start_index - 1);
        }
        start_pos = end_index + 1;
    }
    return fields;
}

// 把列表以分隔符合并成字符串
public static String_Join<T>(List<T> list, string sep) : string
{
    [Language(LuaJIT)]
    if (sep == null) sep = ",";
    [Language(LuaJIT)]
    return concat(list, sep);
    
    [Language(JavaScript)]
    return cast<javascript.Array>(list).join(sep);
}

// 替换
public static String_Replace(string s, string os, string ns) : string
{
    [Language(LuaJIT)]
    return String_Join(String_Split(s, os), ns);
    
    [Language(JavaScript)]
    return cast<javascript.String>(s).replace(os, ns);
}

