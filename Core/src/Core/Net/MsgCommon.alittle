
namespace ALittle;

public class IMsgCommon
{
    public fun IsConnected() : bool { return false; }
    protected fun HandleConnectSucceed() {}
    protected fun HandleDisconnect() {}
    protected fun HandleConnectFailed(string reason) {}
    protected fun HandleMessage(int id, int rpc_id, ALittle.IMessageReadFactory factory) {}
    
    // 发送数据
    protected fun Send(int msg_id, any msg_body, int rpc_id) { throw("not impl"); }
    
    // 发送rpc
    protected fun SendRPC(Thread thread, int msg_id, any msg_body) { }
    
    // 提供框架调用
    protected static Invoke(int msg_id, IMsgCommon client, any msg_body) { client.Send(msg_id, msg_body, 0); }
    protected await static InvokeRPC(int msg_id, IMsgCommon client, any msg_body) : string, any
    {
        if (co == null) return "当前不是协程", null;
        
        if (!client.IsConnected())
            return "连接还没成功", null;
        
        client.SendRPC(co, msg_id, msg_body);
        return yield;
    }
}

private var __all_callback = new Map<int, Functor<(IMsgCommon, any)>>();
protected static RegMsgCallback(int msg_id, Functor<(IMsgCommon, any)> callback)
{
    if (__all_callback[msg_id] != null)
    {
        Error("RegMsgCallback消息回调函数注册失败，名字为"..msg_id.."已存在");
        return;
    }
    __all_callback[msg_id] = callback;
}
// 获取回调函数
public static FindMsgCallback(int msg_id) : Functor<(IMsgCommon, any)>
{
    return __all_callback[msg_id];
}

// 注册回调函数
private var __all_rpc_callback = new Map<int, Functor<await(IMsgCommon, any): any>>();
private var __all_rpc_return_id = new Map<int, int>();
protected static RegMsgRpcCallback(int msg_id, Functor<await(IMsgCommon, any) : any> callback, int return_id)
{
    if (__all_rpc_callback[msg_id] != null)
    {
        Error("RegMsgRpcCallback消息回调函数注册失败，名字为"..msg_id.."已存在");
        return;
    }
    __all_rpc_callback[msg_id] = callback;
    __all_rpc_return_id[msg_id] = return_id;
}
// 获取回调函数
public static FindMsgRpcCallback(int msg_id) : Functor<await(IMsgCommon, any) : any>, int
{
    return __all_rpc_callback[msg_id], __all_rpc_return_id[msg_id];
}
