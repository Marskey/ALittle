
namespace ALittle;

public struct ModuleInfo
{
    string name;
    bool crypt_mode;
    ControlSystem control;
    ScriptSystem script;
    any module;

    bool plugin_loaded;
    bool module_loaded;
    bool browser_loaded;

    DisplayLayout layer_group;
    Functor<(DisplayLayout, ScriptSystem, ControlSystem, string, string)> browser_setup;
    Functor<(string, DisplayLayout, ModuleShortInfo):bool> browser_addmodule;
    Functor<()> browser_shutdown;
    Functor<(DisplayLayout, ScriptSystem, ControlSystem, string, string)> module_setup;
    Functor<()> module_shutdown;
    Functor<(ScriptSystem, ControlSystem, string):ModuleShortInfo> module_getinfo;
    Functor<(ScriptSystem, ControlSystem, string, string)> plugin_setup;
    Functor<()> plugin_shutdown;
}

public struct ModuleShortInfo
{
    string title;
    string icon;
    int width_type;
    int width_value;
    int height_type;
    int height_value;
}

class ModuleSystem
{
    private Map<string, ModuleInfo> _name_module_map;
    private ModuleInfo              _main_module;
    private string                  _debug;

    public ctor()
    {
        // 模块映射表
        this._name_module_map = new Map<string, ModuleInfo>();
        // 主模块
        this._main_module = null;
        // 标记是否是调试模式
        this._debug = null;
    }
    
    public get debug() : string
    {
        return this._debug;
    }
    
    // 获取主模块名
    public fun GetMainModuleName() : string
    {
        if (this._main_module == null)
            return null;

        return this._main_module.name;
    }
    
    public fun LoadModuleImpl(string name) : ModuleInfo
    {
        // 检查模块是否已被加载
        if (package.loaded[name] != null)
            return null;
    
        // 刷新模块
        var version_system = VersionSystem.CreateVersionSystem("", name);
        version_system.UpdateModule();

        // 创建信息
        var info = new ModuleInfo();
        info.name = name; // 保存模块名
    
        // 判断是不是加密模式
        info.crypt_mode = (File_ReadTextFromFile("Module/" .. name .. "/NoCrypt.ali", false) == null);
    
        // 加载UI文件
        info.control = new ControlSystem(name, info.crypt_mode);
        // 加载脚本
        info.script = new ScriptSystem(name, info.crypt_mode);
        // 加载入口脚本
        info.script.Require("Main");
        // 检查是否有这个模块
        info.module = package.loaded[name];
        if (info.module == null)
            return null;
        this._name_module_map[name] = info;
    
        // 获取壳和模块的启动和结束函数
        info.browser_setup = cast<Map<string, Functor<(DisplayLayout, ScriptSystem, ControlSystem, string, string)>>>(info.module)["__Browser_Setup"];
        info.browser_addmodule = cast<Map<string, Functor<(string, DisplayLayout, ModuleShortInfo):bool>>>(info.module)["__Browser_AddModule"];
        info.browser_shutdown = cast<Map<string, Functor<()>>>(info.module)["__Browser_Shutdown"];
        info.module_setup = cast<Map<string, Functor<(DisplayLayout, ScriptSystem, ControlSystem, string, string)>>>(info.module)["__Module_Setup"];
        info.module_shutdown = cast<Map<string, Functor<()>>>(info.module)["__Module_Shutdown"];
        info.module_getinfo = cast<Map<string, Functor<(ScriptSystem, ControlSystem, string):ModuleShortInfo>>>(info.module)["__Module_GetInfo"];
        info.plugin_setup = cast<Map<string, Functor<(ScriptSystem, ControlSystem, string, string)>>>(info.module)["__Plugin_Setup"];
        info.plugin_shutdown = cast<Map<string, Functor<()>>>(info.module)["__Plugin_Shutdown"];
    
        // 创建层组
        var control = info.control;
        if (this._main_module != null)
            control = this._main_module.control;
        info.layer_group = new DisplayLayout(control);
    
        return info;
    }
    
    public fun RemoveModule(string name) : bool
    {
        // 如果是主模块，不能移除
        if (this._main_module != null && this._main_module.name == name)
            return false;
        // 获取信息
        var info = this._name_module_map[name];
        if (info == null)
            return false;
    
        // 调用项目的Shutdown
        var module_shutdown = info.module_shutdown;
        if (module_shutdown != null)
            module_shutdown();
    
        // 清空内存
        this._name_module_map[name] = null;
        A_LayerManager.RemoveChild(info.layer_group);
    
        // 释放项目
        package.loaded[name] = null;
        cast<Map<string, any>>(_G)[name] = null;
        // 执行垃圾回收
        lua.collectgarbage("collect");
        return true;
    }
    
    public fun LoadPlugin(string module_name) : bool
    {
        // 检查模块是否是null
        if (module_name == null)
        {
            Log("module_name is null!");
            return false;
        }
        // 检查是否已经加载
        var info = this._name_module_map[module_name];
        if (info == null)
        {
            // 加载模块
            info = this.LoadModuleImpl(module_name);
            if (info == null)
            {
                Log("Module:" .. module_name .. " load failed!");
                return false;
            }
        }
        // 检查__Module_Setup是否已经调用过了
        if (info.plugin_loaded)
        {
            Log(module_name .. ":__Plugin_Setup already invoked!");
            return false;
        }
    
        // 调用启动函数
        var setup_func = info.plugin_setup;
        if (setup_func == null)
        {
            Log("can't find Plugin_Setup funciton in Module:" .. module_name);
            return false;
        }
        info.plugin_loaded = true;
    
        // 模块基本路径
        var module_base_path = "Module/" .. module_name;
    
        // 传入debug，层组，资源对象
        setup_func(info.script, info.control, module_base_path, this._debug);
    
        return true;
    }
    
    public fun LoadModule(string module_name) : bool
    {
        // 检查模块是否是null
        if (module_name == null)
        {
            Log("module_name is null!");
            return false;
        }
        // 检查是否已经加载
        var info = this._name_module_map[module_name];
        if (info == null)
        {
            // 加载模块
            info = this.LoadModuleImpl(module_name);
            if (info == null)
            {
                Log("Module:" .. module_name .. " load failed!");
                return false;
            }
        }
        // 检查__Module_Setup是否已经调用过了
        if (info.module_loaded)
        {
            Log(module_name .. ":__Module_Setup already invoked!");
            return false;
        }
    
        // 调用启动函数
        var setup_func = info.module_setup;
        if (setup_func == null)
        {
            Log("can't find Module_Setup funciton in Module:" .. module_name);
            return false;
        }
        info.module_loaded = true;
    
        // 模块基本路径
        var module_base_path = "Module/" .. module_name;
    
        // 如果壳有定义添加模块函数，就走壳的流程
        if (this._main_module.name != module_name)
        {
            var result = false;
            if (this._main_module != null && this._main_module.browser_addmodule != null)
            {
                var module_info:ModuleShortInfo = null;
                if (info.module_getinfo != null)
                    module_info = info.module_getinfo(info.script, info.control, module_base_path);

                result = this._main_module.browser_addmodule(module_name, info.layer_group, module_info);
            }
            // 如果没有就直接挂在层下面
            if (!result)
                A_LayerManager.AddChild(info.layer_group, A_LayerManager.group_count - 1);
        }
    
        // 传入debug，层组，资源对象
        setup_func(info.layer_group, info.script, info.control, module_base_path, this._debug);
    
        return true;
    }
    
    public fun MainSetup(string debug, string module_name, string core_path, string server_modules) : bool
    {
        // 启动服务器模块
        if (core_path != null && core_path != "" && server_modules != null && server_modules != "")
        {
            var module_map = new Map<string, string>();
            var module_list = String_Split(server_modules, ";");
            for (var index, module in module_list)
            {
                var split = String_Split(module, ",");
                if (lua.table.maxn(split) == 2)
                    module_map[split[1]] = split[2];
            }
            System_StartServerSystem(core_path, module_map);
        }

        // 检查主模块是否已经加载
        if (this._main_module != null)
            return false;

        // 读取启动文件
        if (module_name == null)
            module_name = File_ReadTextFromFile("Enter.ali", false);
        if (module_name == null)
        {
            Log("Load Enter.ali failed!");
            return false;
        }

        // 加载主模块
        var info = this.LoadModuleImpl(module_name);
        if (info == null)
        {
            Log("Module:" .. module_name .. " load failed!");
            return false;
        }
        // 把组模块的层组放进层管理器
        A_LayerManager.AddChild(info.layer_group, A_LayerManager.group_count - 1);
        this._main_module = info;
        this._debug = debug;
    
        // 标记已经加载完成
        this._main_module.browser_loaded = true;
        var setup_func = this._main_module.browser_setup;
        // 如果没有主模块的启动函数，直接加载模块
        if (setup_func == null)
        {
            this.LoadModule(this._main_module.name);
            return false;
        }
    
        // 模块基本路径
        var module_base_path = "Module/" .. module_name;
    
        // 调用壳的启动函数
        setup_func(this._main_module.layer_group, this._main_module.script, this._main_module.control, module_base_path, this._debug);
        return true;
    }
    
    public fun MainShutdown()
    {
        // 如果主模块没有加载直接返回
        if (this._main_module == null)
            return;
    
        // 遍历所有子模块，调用结束函数
        for (var name, info in this._name_module_map)
        {
            var shutdown_func = info.module_shutdown;
            if (shutdown_func != null && info.module_loaded)
            {
                var error = tcall(shutdown_func);
                if (error != null)
                    Log("ModuleSystem:MainShutdown invoke __Module_Shutdown error:", error);
            }
            shutdown_func = info.plugin_shutdown;
            if (shutdown_func != null && info.plugin_loaded)
            {
                var error = tcall(shutdown_func);
                if (error != null)
                    Log("ModuleSystem:MainShutdown invoke __Plugin_Shutdown error:", error);
            }
        }
        // 调用壳的结束函数
        var shutdown_func = this._main_module.browser_shutdown;
        if (shutdown_func == null) return;
        shutdown_func();
    }
}

public var A_ModuleSystem = new ModuleSystem();