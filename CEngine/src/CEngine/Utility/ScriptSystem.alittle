
namespace ALittle;

public class ScriptSystem
{
    private bool _crypt_mode;
    private string _base_path;
    private Map<string, bool> _core_map;
    private Map<string, bool> _std_map;
    private Map<string, bool> _engine_map;
    private Map<string, bool> _module_map;
    
    public ctor(string module_name, bool crypt_mode)
    {
        // 保存是否要加密
        this._crypt_mode = crypt_mode || false;
        // 设置基本路径
        [Language(JavaScript)]
        this._base_path = "Module/" .. module_name .. "/JSScript/";
        [Language(Lua)]
        this._base_path = "Module/" .. module_name .. "/Script/";
        // 已加载的脚本文件映射表
        this._core_map = new Map<string, bool>();
        this._std_map = new Map<string, bool>();
        this._engine_map = new Map<string, bool>();
        this._module_map = new Map<string, bool>();        
    }
    
    private fun HandleJsLoadError(string url, ALittle.Thread thread)
    {
        ALittle.Coroutine.Resume(thread, "load fialed:"..url);
    }
    
    private fun LoadJSScript(string base_path, List<string> url_list, int index, int count, ALittle.Thread thread)
    {
        // 如果已经结束，那么返回
        if (index > count)
        {
            ALittle.Coroutine.Resume(thread, null);
            return;
        }
        
        // 拼接url
        var url = base_path..url_list[index];
        
        var script = cast<javascript.ScriptElement>(docuemnt.createElement("script"));
        script.type = "text/javascript";
        script.async = "async";
        
        var error = bind(this.HandleJsLoadError, this, url, thread);
        script.onabort = error;
        script.onerror = error;
        script.ontimeout = error;
        script.onload = bind(this.LoadJSScript, this, base_path, url_list, index + 1, count, thread);
        
        script.src = url;
        docuemnt.body.appendChild(script);
    }
    
    public await fun RequireJSCore(string base_path) : string
    {
        var list = [
            "Core/JavaScript/JavaScriptClass.js",
            "Core/JavaScript/JavaScriptException.js",
        
            "Core/Reflect/ReflectDefine.js",
            "Core/Reflect/ReflectRegister.js",
        
            "Core/Utility/Coroutine.js",
            "Core/Utility/List.js",
            "Core/Utility/Log.js",
            "Core/Utility/Math.js",
            "Core/Utility/String.js",
            "Core/Utility/Time.js",
        
            "Core/Net/HttpFileReceiver.js",
            "Core/Net/HttpFileSender.js",
            "Core/Net/HttpReceiver.js",
            "Core/Net/HttpSender.js",
            "Core/Net/MsgCommon.js"
        ];
        
        this.LoadJSScript(base_path, list, 1, ALittle.MaxN(list), co);
        return yield;
    }
    
    public await fun RequireJSStd(string base_path) : string
    {
        var list = [
            "Adapter/JavaScript/JCsvLoader.js",
            "Adapter/JavaScript/Timer.js",
        
            "Std/Utility/String.js",
            "Std/Utility/EventDispatcher.js",
            "Std/Utility/SafeIDCreator.js",
            "Std/Utility/CsvConfig.js",
        
            "Std/Reflect/ReflectCmd.js",
            "Std/Reflect/ReflectCsv.js",
            "Std/Reflect/ReflectMessage.js",
        
            "Std/Net/HttpFileReceiverTemplate.js",
            "Std/Net/HttpFileSenderTemplate.js",
            "Std/Net/HttpReceiverTemplate.js",
            "Std/Net/HttpSenderTemplate.js",
            "Std/Net/MsgCommonTemplate.js",
            "Std/Net/MsgReceiverTemplate.js",
            "Std/Net/MsgSenderTemplate.js",
            "Std/Net/MsgSessionTemplate.js",
        
            "Std/Loop/LoopSystem.js",
            "Std/Loop/LoopFunction.js",
            "Std/Loop/LoopGroup.js",
            "Std/Loop/LoopList.js",
            "Std/Loop/LoopTimer.js"
        ];
        
        this.LoadJSScript(base_path, list, 1, ALittle.MaxN(list), co);
        return yield;
    }
    
    // @param path 脚本路径
    public await fun RequireModule(string path) : string
    {
        // 检查
        if (this._module_map[path]) return null;
        this._module_map[path] = true;
        
        // 加载
        [Language(Lua)]
        __CPPAPI_ScriptSystem.RunModuleScript(this._base_path .. path .. ".lua", this._crypt_mode);
        [Language(Lua)]
        return null;
        
        [Language(JavaScript)]
        this.LoadJSScript(this._base_path, [path], 1, 1, co);
        [Language(JavaScript)]
        return yield;
    }
    
    // @param path 脚本路径
    public await fun RequireCore(string path) : string
    {
        // 检查
        if (this._module_map[path]) return null;
        this._module_map[path] = true;
        
        // 加载
        [Language(Lua)]
        __CPPAPI_ScriptSystem.RunModuleScript(this._base_path .. path .. ".lua", this._crypt_mode);
        [Language(Lua)]
        return null;
        
        [Language(JavaScript)]
        this.LoadJSScript(this._base_path, [path], 1, 1, co);
        [Language(JavaScript)]
        return yield;
    }
}