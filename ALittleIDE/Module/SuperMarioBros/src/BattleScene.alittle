
namespace SuperMarioBros;

public class BattleScene : ALittle.DisplayLayout
{
	private ALittle.ScrollScreen _scroll_screen;
	private ALittle.Linear _tile_linear;
	private ALittle.DisplayLayout _entity_container;

	private ALittle.Text _score;
	private ALittle.Text _coin;
	private ALittle.Text _stage;
	private ALittle.Text _time;

    private BattleMap _battle_map;
    private Map<int, Map<int, ALittle.DisplayObject>> _entity_map;
    private BattlePlayer _player;

    private int _coin_value;

    private ALittle.LoopFrame _frame_loop;

    public fun TCtor()
    {
        cast<EditContainer>(this._scroll_screen.container).Init(this._tile_linear);
    }

    public async fun Show(int world, int subworld)
    {
        this._battle_map = g_Control.LoadMessageFromFile{BattleMap}("Other/Map/world_"..world.."_"..subworld..".map");
        if (this._battle_map == null)
        {
            ALittle.Error("map load filed! Other/Map/world_"..world.."_"..subworld..".map");
            return;
        }

        this._coin_value = 0;

        this._score.text = g_GCenter.player_data.score;
        this._coin.text = this._coin_value;
        this._stage.text = g_GCenter.player_data.world.."-"..g_GCenter.player_data.subworld;
        this._time.text = 60 * 5;

        this._tile_linear.RemoveAllChild();
        this._entity_container.RemoveAllChild();
        this._entity_map = new Map<int, Map<int, ALittle.DisplayObject>>();

        for (var row, submap in this._battle_map.background)
        {
            for (var col, index in submap)
            {
                var show_row = ALittle.Math_Floor(index / TILE_COL_COUNT) + 1;
                var show_col = index % TILE_COL_COUNT + 1;
                this.SetTileShow(row, col, show_row, show_col);
            }
        }

        for (var row, submap in this._battle_map.object)
        {
            for (var col, type in submap)
            {
                if (type == EntityType.ET_BORN_1)
                    this._player.Init(row + 1, col, g_GCenter.player_data.level);
                /*elseif (type == EntityType.ET_FLOOR)
                {
                    var entity_sub_map = this._entity_map[row];
                    if (entity_sub_map == null)
                    {
                        entity_sub_map = new Map<int, ALittle.DisplayObject>();
                        this._entity_map[row] = entity_sub_map;
                    }
                    var object = g_Control.CreateControl{ALittle.DisplayObject}("floor");
                    object.x = col * TILE_WIDTH;
                    object.y = row * TILE_HEIGHT;
                    this._entity_container.AddChild(object);
                }*/
            }
        }

        this._scroll_screen.container.width = this._tile_linear.width + this._scroll_screen.view_width;
        this._scroll_screen.container_x = 0;
        this._scroll_screen.RefreshClipDisLine();

        this.visible = true;

        A_UISystem.keydown_callback = bind(this.HandleKeyDown, this);

        if (this._frame_loop != null)
            this._frame_loop.Stop();
        this._frame_loop = new ALittle.LoopFrame(bind(this.HandleFrame, this));
        this._frame_loop.Start();
    }

    private fun SetTileShow(int row, int col, int show_row, int show_col)
    {
        if (this._tile_linear.child_count < col + 1)
        {
            for (var i = this._tile_linear.child_count; i < col + 1; 1)
            {
                var linear = new ALittle.Linear(g_Control);
                linear.type = ALittle.UIEnumTypes.TYPE_V;
                linear.width = TILE_WIDTH;
                this._tile_linear.AddChild(linear);
            }

            this._scroll_screen.container.width = this._tile_linear.width + this._scroll_screen.view_width;
            this._scroll_screen.AdjustScrollBar();
        }

        var linear = cast<ALittle.Linear>(this._tile_linear.GetChildByIndex(col + 1));
        if (linear == null) return;

        if (linear.child_count < row + 1)
        {
            for (var i = linear.child_count; i < row + 1; 1)
            {
                var sprite = new ALittle.Sprite(g_Control);
                sprite.texture_name = TILE_TEXTURE_NAME;
                sprite.row_count = TILE_ROW_COUNT;
                sprite.col_count = TILE_COL_COUNT;
                sprite.width = TILE_WIDTH;
                sprite.height = TILE_HEIGHT;
                sprite.visible = false;
                linear.AddChild(sprite);
            }
        }

        var sprite = cast<ALittle.Sprite>(linear.GetChildByIndex(row + 1));
        sprite.row_index = show_row;
        sprite.col_index = show_col;
        sprite.visible = true;
    }

    private fun HandleFrame(int frame_time)
    {
        this._player.UpdateFrame(frame_time);

        var scroll_x = -(this._player.x - this._scroll_screen.view_width / 2);
        if (scroll_x > 0) scroll_x = 0;
        elseif (scroll_x <= -(this._scroll_screen.container.width - this._scroll_screen.view_width))
            scroll_x = -(this._scroll_screen.container.width - this._scroll_screen.view_width);
        if (this._scroll_screen.container_x > scroll_x)
        	this._scroll_screen.container_x = scroll_x;

        // 检查玩家死亡
        if (this._player.y >= A_UISystem.view_height)
        {
            this._player.Death();
        }
    }

    public fun Restart()
    {
        g_GCenter.player_data.life -= 1;
        g_GCenter.player_data.level = 1;
        this.Hide();
        g_GCenter.stage_scene.Show(g_GCenter.player_data.world, g_GCenter.player_data.subworld);
    }

    // 检查entity底部是不是地板
    public fun CheckDown(BattlePlayer entity) : bool, double
    {
        var row = ALittle.Math_Floor((entity.y + entity.height) / TILE_HEIGHT);
        var min_col = ALittle.Math_Floor(entity.x / TILE_WIDTH);
        var max_col = ALittle.Math_Floor((entity.x + entity.width - 1) / TILE_WIDTH);
        for (var col = min_col; col <= max_col; 1)
        {
            var sub_map = this._battle_map.background[row];
            if (sub_map != null)
            {
                var index = sub_map[col];
                if (index != null)
                {
                    var show_row = ALittle.Math_Floor(index / TILE_COL_COUNT) + 1;
                    var show_col = index % TILE_COL_COUNT + 1;

                    // 检查地板
                    if (show_row == 1 && show_col == 1)
                        return true, row * TILE_HEIGHT;
                        // 检查水管
                    elseif (show_row >= 3 && show_row <= 4 && show_col >= 1 && show_col <= 2)
                        return true, row * TILE_HEIGHT;
                }
            }
        }
        return false, null;
    }

    // 检查右边是否可走
    public fun CheckRight(BattlePlayer entity) : bool, double
    {
        var col = ALittle.Math_Floor((entity.x + entity.width) / TILE_WIDTH);
        var min_row = ALittle.Math_Floor(entity.y / TILE_HEIGHT);
        var max_row = ALittle.Math_Floor((entity.y + entity.height - 1) / TILE_HEIGHT);
        for (var row = min_row; row <= max_row; 1)
        {
            var sub_map = this._battle_map.background[row];
            if (sub_map != null)
            {
                var index = sub_map[col];
                if (index != null)
                {
                    var show_row = ALittle.Math_Floor(index / TILE_COL_COUNT) + 1;
                    var show_col = index % TILE_COL_COUNT + 1;

                    // 检查地板
                    if (show_row == 1 && show_col == 1)
                        return true, col * TILE_WIDTH;
                    // 检查水管
                    elseif (show_row >= 3 && show_row <= 4 && show_col >= 1 && show_col <= 2)
                    	return true, col * TILE_WIDTH;
                }
            }
        }
        return false, null;
    }

    // 检查左边是否可走
    public fun CheckLeft(BattlePlayer entity) : bool, double
    {
        var col = ALittle.Math_Floor((entity.x - 1) / TILE_WIDTH);
        var min_row = ALittle.Math_Floor(entity.y / TILE_HEIGHT);
        var max_row = ALittle.Math_Floor((entity.y + entity.height - 1) / TILE_HEIGHT);
        for (var row = min_row; row <= max_row; 1)
        {
            var sub_map = this._battle_map.background[row];
            if (sub_map != null)
            {
                var index = sub_map[col];
                if (index != null)
                {
                    var show_row = ALittle.Math_Floor(index / TILE_COL_COUNT) + 1;
                    var show_col = index % TILE_COL_COUNT + 1;

                    // 检查地板
                    if (show_row == 1 && show_col == 1)
                        return true, col * TILE_WIDTH + TILE_WIDTH;
                        // 检查水管
                    elseif (show_row >= 3 && show_row <= 4 && show_col >= 1 && show_col <= 2)
                    	return true, col * TILE_WIDTH + TILE_WIDTH;
                }
            }
        }
        return false, null;
    }

    private fun HandleKeyDown(int mod, int sym, int scancode)
    {
        if (sym == ALittle.UIEnumTypes.KEY_J)
        {
            this._player.Fire();
        }
    }

    public fun Hide()
    {
        if (this._frame_loop != null)
            this._frame_loop.Stop();
        this._frame_loop = null;

        this.visible = false;
    }
}
