
namespace AUIPlugin;

public class AUICodeLineNumber : ALittle.DisplayLayout
{
    private string _text;
    private string _font_path;
    private int _font_size;
    private double _ascii_width;
    private double _word_width;

    private bool _showd = false;

    public ctor(ALittle.ControlSystem ctrl_sys, string font_path, int font_size, double ascii_width, double word_width)
    {
        this._text = "";
        this._font_path = font_path;
        this._font_size = font_size;
        this._ascii_width = ascii_width;
        this._word_width = word_width;

        this.AddEventListener(this, this.HandleShow);
    }

    private fun HandleShow(ALittle.UIShowEvent event)
    {
        if (this._showd) return;
        this._showd = true;

        this.UpdateShow();
    }

    public fun UpdateShow()
    {
        var text_list = ALittle.String_SplitUTF8(this._text);
        this.RemoveAllChild();

        var quad = new ALittle.Quad(this._ctrl_sys);
        quad.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        quad.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        quad.red = 43 / 255;
        quad.green = 43 / 255;
        quad.blue = 43 / 255;
        this.AddChild(quad);

        var offset = 0.0;
        var len = ALittle.List_MaxN(text_list);
        for (var index = len; index >= 1; -1)
        {
            var char = text_list[index];
            if (char == "\t")
            	offset += this._ascii_width * 4;
            elseif (char == " ")
            	offset += this._ascii_width;
            elseif (char != "\r" && char != "\n")
            {
                var is_asicc = true;
                [Language(Lua)]
                {
                    var byte_count = lua.utf8.bytecount(char, 0, 1);
                    if (byte_count > 1) is_asicc = false;
                }
                [Language(JavaScript)]
                {
                    var code = cast<javascript.String>(char).charCodeAt(0);
                    if (code > 255) is_asicc = false;
                }

                var text = new ALittle.Text(this._ctrl_sys);
                text.red = this._red;
                text.green = this._green;
                text.blue = this._blue;
                text.text = char;
                text.x_value = offset;
                text.x_type = ALittle.UIEnumTypes.POS_ALIGN_ENDING;
                text.font_path = this._font_path;
                text.font_size = this._font_size;
                this.y_value = ALittle.UIEnumTypes.POS_ALIGN_CENTER;
                this.AddChild(text);

                if (is_asicc) offset += this._ascii_width;
                else offset += this._word_width;
            }	
        }
    }

    public get text() : string { return this._text; }
    public set text(string value)
    {
        if (this._text == value) return;
        this._text = value;
    }

    public set red(double value)
    {
        this._red = value;
        for (var index, child in this._childs)
            child.red = value;
    }

    public set green(double value)
    {
        this._green = value;
        for (var index, child in this._childs)
            child.green = value;
    }

    public set blue(double value)
    {
        this._blue = value;
        for (var index, child in this._childs)
            child.blue = value;
    }
}