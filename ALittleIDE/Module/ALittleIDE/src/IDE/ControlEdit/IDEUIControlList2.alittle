
namespace ALittleIDE;

protected struct IDEControlModuleInfo
{
    string module_name;
	string root_path;
}

struct IDEControlFileSearchInfo
{
    List<IDEControlTreeLogic> list;
	int count;
	int index;
	string name;
}

public class IDEUIControlList2 : ALittle.DisplayLayout
{	
	private ALittle.ScrollScreen _control_scroll_screen;
	private ALittle.DisplayObject _control_search_key;
	private ALittle.DisplayObject _control_search_type;
	private ALittle.TextRadioButtonGroup _group;
	private IDEControlFileSearchInfo _search_info;                // 搜索集合

	private ALittle.LoopLinear _tree_loop_x;
	private ALittle.LoopLinear _tree_loop_y;

    private IDECodeTreeItem _cut_item;		// 剪切对象
    private IDECodeTreeItem _copy_item;		// 复制对象

	public ctor(ALittle.ControlSystem ctrl_sys)
	{
		this._group = new ALittle.TextRadioButtonGroup();
	}

	public fun TCtor()
	{
        g_IDEProject.AddEventListener(this, this.HandleProjectOpen);
        g_IDEProject.AddEventListener(this, this.HandleProjectClose);
    }

	private fun HandleProjectClose(IDEProjectCloseEvent event)
	{
		this._control_scroll_screen.RemoveAllChild();
    }

	private fun HandleProjectOpen(IDEProjectOpenEvent event)
	{
		// 读取项目配置
		var module_map = g_IDEProject.project.config.GetConfig("control_module", new Map<string, IDEControlModuleInfo>());
		module_map[event.name] = null;

		// 添加自己的项目
		var info = new IDEControlTreeUserInfo();
		info.module_name = event.name;
		info.name = "ui";
		info.path = ALittle.File_BaseFilePath().."Module/"..event.name.."/UI";
		info.module_path = ALittle.File_BaseFilePath().."Module/"..event.name.."/";
		info.group = this._group;
		info.root = true;
		this._control_scroll_screen.AddChild(new IDEControlTree(g_Control, info));
    
		// 添加其他模块
		for (var index, module in module_map)
		{
			info = new IDEControlTreeUserInfo();
			info.module_name = module.module_name;
			info.name = ALittle.File_GetFileNameByPath(module.root_path);
			info.path = module.root_path;
            info.module_path = ALittle.File_GetFilePathByPath(module.root_path).."/";
			info.group = this._group;
			info.root = true;
			var tree = new IDEControlTree(g_Control, info);
			this._control_scroll_screen.AddChild(tree);
        }
    }

	public fun AddModule(string name)
	{
        for (var index, tree:IDECodeTreeLogic in this._control_scroll_screen.childs)
            if (tree.user_info.module_name == name) return;

		var module_map = g_IDEProject.project.config.GetConfig("control_module", new Map<string, IDECodeModuleInfo>());

		var module_info = new IDECodeModuleInfo();
		module_info.module_name = name;
		module_info.root_path = ALittle.File_BaseFilePath().."Module/"..name.."/UI";
		module_map[name] = module_info;
		g_IDEProject.project.config.SetConfig("control_module", module_map);
    
        var info = new IDECodeTreeUserInfo();
        info.module_name = name;
        info.name = ALittle.File_GetFileNameByPath(module_info.root_path);
        info.path = module_info.root_path;
        info.module_path = ALittle.File_BaseFilePath().."Module/"..name.."/";
        info.group = this._group;
		info.root = true;
        info.project = g_IDEProject.project.code;
        var tree = new IDECodeTree(g_Control, info);
        this._control_scroll_screen.AddChild(tree);
    }

	// 在树形区域，设置控件焦点
	public fun ShowTreeItemFocus(IDEControlTreeLogic target)
    {
        // 显示
        target.ShowSelect();

		if (target != this._control_scroll_screen)
        {
            var parent = cast<IDEUITreeLogic>(target.logic_parent);
			while (parent != null && parent != this._control_scroll_screen)
            {
                parent.fold = true;
                parent = cast<IDEUITreeLogic>(parent.logic_parent);
			}
		}
        this._control_scroll_screen.RejustScrollBar();

		// 如果现在直接看的见的话，就直接返回了
        var x, y = target.LocalToGlobal(this._control_scroll_screen.container);
        var target_x = (this._control_scroll_screen.view_width - target.width / 2) / 2 - x;
        var target_y = (this._control_scroll_screen.view_height - target.height) / 2 - y;

        if (this._tree_loop_x != null) { this._tree_loop_x.Stop(); this._tree_loop_x = null; }
        if (this._tree_loop_y != null) { this._tree_loop_y.Stop(); this._tree_loop_y = null; }

        this._tree_loop_x = new ALittle.LoopLinear(this._control_scroll_screen, "container_x", target_x, 300, 0);
        this._tree_loop_x.Start();
        this._tree_loop_y = new ALittle.LoopLinear(this._control_scroll_screen, "container_y", target_y, 300, 0);
        this._tree_loop_y.Start();
	}

	private fun HandleControlSearchClick(ALittle.UIEvent event)
	{
		if (this._search_info == null || this._search_info.name != this._control_search_key.text)
		{
            this._search_info = new IDEControlFileSearchInfo();
			this._search_info.name = this._control_search_key.text;
			this._search_info.index = 0;
			this._search_info.list = new List<IDEControlTreeLogic>();
			for (var index, child:IDEControlTreeLogic in this._control_scroll_screen.childs)
                child.SearchFile(this._search_info.name, this._search_info.list);
			this._search_info.count = ALittle.List_MaxN(this._search_info.list);
        }

		if (this._search_info.count <= 0) return;

		this._search_info.index += 1;
		if (this._search_info.index > this._search_info.count)
			this._search_info.index = 1;
		var item = this._search_info.list[this._search_info.index];
		this.ShowTreeItemFocus(item);
    }

    // 设置剪切内容
    public fun SetCutTreeItem(IDECodeTreeItem item) { this._cut_item = item; this._copy_item = null; }
    // 获取剪切内容
    public fun GetCutTreeItem() : IDECodeTreeItem { return this._cut_item; }

    // 设置复制内容
    public fun SetCopyTreeItem(IDECodeTreeItem item) { this._copy_item = item; this._cut_item = null; }
    // 获取复制内容
    public fun GetCopyTreeItem() : IDECodeTreeItem { return this._copy_item; }

    // 设置剪切内容
    public fun ClearCutAndCopy()
    {
        this._cut_item = null;
        this._copy_item = null;
    }
}