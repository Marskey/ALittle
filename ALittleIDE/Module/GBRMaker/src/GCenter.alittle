
namespace GBRMaker;

protected var g_GConfig:ALittle.IJsonConfig;

// 层级数据
protected struct FloorData
{
    string name;                // 名称
    Map<int, Map<int, int>> data;  // 地图信息 KEY1:x坐标，KEY2:y坐标，VALUE:格子ID
}

// 地图数据
protected struct MapData
{
    List<FloorData> floor_list; // 层
    Map<int, string> tex_map;   // 纹理映射ID
    int y_max;                // y坐标最大值
    int x_max;                // x坐标最大值
    int nx_max;               // x负坐标最小值（是负数)
}

// 层级信息
protected struct FloorInfo
{
    FileSelectItemInfo file_info;
    FloorData floor_data;
    bool visible;
    Map<int, Map<int, ALittle.Image>> child_map;
}

// 地图信息
protected struct MapInfo
{
    List<FloorInfo> floor_list;	// 层列表
    Map<string, int> tex_map;   // 纹理映射ID
    int tex_max_id;			// 纹理ID生成器
}

// 层级信息
protected struct FloorSelectItemInfo
{
    ALittle.TextRadioButton select_item;
    FloorInfo floor_info;
    ALittle.DisplayLayout edit_item;
}

// 文件信息
protected struct FileSelectItemInfo
{
    ALittle.TextRadioButton item;
    string file_path;
    string upper_file_name;
    MapData map_data;
    MapInfo map_info;
    bool save;
}

// 笔刷信息
protected struct BrushSelectItemInfo
{
    ALittle.DisplayLayout item;
    ALittle.Image image;
    ALittle.DisplayObject button;
    string upper_file_name;
    string texture_name;
}

class GCenter
{
    private ALittle.DisplayLayout _main_layer;
    private ALittle.DisplayLayout _dialog_layer;

    private ALittle.Grid3 _right_grad3_ud;
    private ALittle.Grid3 _main_grid3_lr;

    // 设置界面
    private MainSettingDialog _setting_dialog;
    private ALittle.ControlSystem _control;

    // 纹理列表
    private MainTextureList _texture_list;

    // 文件列表
    private MainFileList _file_list;

    // 图层列表
    private MainLayerList _layer_list;

    // 编辑区
    private ALittle.ScrollScreen _edit_scroll_screen;
    private ALittle.DisplayObject _edit_title;

    // 工具区
    private ALittle.DisplayObject _tool_brush;
    private ALittle.DisplayLayout _layer_brush_info;
    private ALittle.ScrollScreen _brush_scroll_screen;
    private int _cur_brush_virtual_x;
    private int _cur_brush_virtual_y;

    private ALittle.DisplayObject _tool_erase;
    private ALittle.DisplayLayout _layer_erase_info;
    private int _cur_erase_virtual_x;
    private int _cur_erase_virtual_y;

    private ALittle.DisplayObject _tool_scale;
    private ALittle.DisplayLayout _layer_scale_info;

    private ALittle.DisplayObject _tool_drag;
    private ALittle.DisplayLayout _layer_drag_info;

    // 当前正在编辑
    private FileSelectItemInfo _cur_file;
    private FloorSelectItemInfo _cur_floor;
    private ALittle.DisplayLayout _cur_layer;
    private ALittle.DisplayLayout _cur_grid_layer;
    private ALittle.DisplayLayout _cur_edit_layer;
    private ALittle.Quad _cur_brush_quad;
    private ALittle.Quad _cur_erase_quad;
    private ALittle.Quad _cur_drag_quad;

    public ctor()
    {
	}

    // 初始化
    public fun Setup()
    {
        // 获取配置信息
        g_GConfig = ALittle.CreateConfigSystem(g_ModuleBasePath.."/User.cfg");
        // 生成随机数种子
        ALittle.Math_RandomSeed(ALittle.Time_GetCurTime());
        // 设置1个线程
        ALittle.System_SetThreadCount(1, ALittle.SystemThreadType.SLOW);
    
        // 创建主层
        this._main_layer = new ALittle.DisplayLayout(g_Control);
        this._main_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._main_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        g_LayerGroup.AddChild(this._main_layer, null);
        this._dialog_layer = new ALittle.DisplayLayout(g_Control);
        this._dialog_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._dialog_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        g_LayerGroup.AddChild(this._dialog_layer, null);
    
        this._setting_dialog = g_Control.CreateControl{MainSettingDialog}("main_setting_dialog", this);
        this._setting_dialog.AddEventListener(this, this.HandleSettingChanged);
        A_LayerManager.AddToModal(this._setting_dialog);
        
        // 创建主界面
        g_Control.CreateControl{ALittle.DisplayObject}("main_scene", this, this._main_layer);

        this._right_grad3_ud.up_size = g_GConfig.GetDouble("right_grid3_up_size", this._right_grad3_ud.up_size);
        this._main_grid3_lr.down_size = g_GConfig.GetDouble("main_grid3_down_size", this._main_grid3_lr.down_size);

        var tool_group = new ALittle.TextRadioButtonGroup();
        this._tool_brush.group = tool_group;
        this._tool_erase.group = tool_group;
        this._tool_scale.group = tool_group;
        this._tool_drag.group = tool_group;
        
        this._tool_brush.selected = true;
        this._layer_brush_info.visible = true;
        this._layer_drag_info.visible = false;
        this._layer_scale_info.visible = false;
        this._layer_erase_info.visible = false;

        A_UISystem.keydown_callback = bind(this.HandleKeyDown, this);

        var setting_data = this._setting_dialog.data;
        var module_path = "Module/"..setting_data.project_name;
        if (ALittle.File_GetFileAttr(module_path) == null
            || ALittle.File_GetFileAttr(module_path.."/Other/"..setting_data.data_path) == null)
        {
            this._setting_dialog.visible = true;
        }
        else
        {
            this._control = new ALittle.ControlSystem(setting_data.project_name);
            
            this._texture_list.RefreshTexture();
            this._file_list.RefreshFile();
        }
    }


    //设置界面////////////////////////////////////////////////////////////////////////
    private fun HandleShowSettingDialog(ALittle.UIClickEvent event) { this._setting_dialog.visible = true; }
    private fun HandleSettingChanged(UIMainSettingChangedEvent event)
    {
        var module_path = "Module/"..event.data.project_name;

        this._control = new ALittle.ControlSystem(event.data.project_name);
    
        this._texture_list.RefreshTexture();
        this._file_list.RefreshFile();
    }
    public get setting_dialog() : MainSettingDialog { return this._setting_dialog; }
    public get right_grad3_ud() : ALittle.Grid3 { return this._right_grad3_ud; }
    public get cur_file() : FileSelectItemInfo { return this._cur_file; }
    public get cur_edit_layer() : ALittle.DisplayLayout { return this._cur_edit_layer;}
    public set cur_floor(FloorSelectItemInfo floor) { this._cur_floor = floor; }
    public get control() : ALittle.ControlSystem { return this._control; }
    
    public fun SelectTexture(string texture_name)
    {
        this._brush_scroll_screen.RemoveAllChild();

        for (var index, child in this._brush_scroll_screen.childs)
        {
            var info:BrushSelectItemInfo = child._user_data;
            if (info.texture_name == texture_name) return;
        }

        var info = new BrushSelectItemInfo();
        info.item = g_Control.CreateControl{ALittle.DisplayLayout}("ide_image_select_item", info);
        info.button._user_data = info;
        info.item._user_data = info;
		info.image.SetTextureCut(texture_name, ALittle.Math_Floor(info.image.width), ALittle.Math_Floor(info.image.height), true);
        info.upper_file_name = ALittle.String_Upper(ALittle.File_GetJustFileNameByPath(texture_name));
        info.texture_name = texture_name;

        info.button.drag_trans_target = this._brush_scroll_screen;
        info.button.AddEventListener(this, this.HandleBrushCancelClick);
        info.button.AddEventListener(this, this.HandleBrushAllCancelClick);

        this._brush_scroll_screen.AddChild(info.item);
    }

    private fun HandleBrushCancelClick(ALittle.UIClickEvent event)
    {
        var info:BrushSelectItemInfo = event.target._user_data;
        this._brush_scroll_screen.RemoveChild(info.item);
    }

    private fun HandleBrushAllCancelClick(ALittle.UILongButtonDownEvent event)
    {
        this._brush_scroll_screen.RemoveAllChild();
    }

    private fun EraseCell(FloorSelectItemInfo floor, int virtual_x, int virtual_y)
    {
        if (floor == null) return;

        // 检查原来是否有，有则清理
        {
            var y_info = floor.floor_info.child_map[virtual_x];
            if (y_info != null && y_info[virtual_y] != null)
            {
                floor.edit_item.RemoveChild(y_info[virtual_y]);
                y_info[virtual_y] = null;
                if (ALittle.IsEmpty(y_info))
                    floor.floor_info.child_map[virtual_x] = null;
            }   
        }
        {
            var y_data = floor.floor_info.floor_data.data[virtual_x];
            if (y_data != null)
            {
                y_data[virtual_y] = null;
                if (ALittle.IsEmpty(y_data))
                    floor.floor_info.floor_data.data[virtual_x] = null;
            }
        }
    }

    private fun SetCell(FileSelectItemInfo file, FloorSelectItemInfo floor, int virtual_x, int virtual_y, BrushSelectItemInfo info)
    {
        // 计算纹理ID
        var tex_id = file.map_info.tex_map[info.texture_name];
        if (tex_id == null)
        {
            ++ file.map_info.tex_max_id;
            tex_id = file.map_info.tex_max_id;
            file.map_info.tex_map[info.texture_name] = tex_id;
            file.map_data.tex_map[tex_id] = info.texture_name;
        }

        // 添加数据
        {
            var y_info = floor.floor_info.child_map[virtual_x];
            if (y_info == null)
            {
                y_info = new Map<int, ALittle.Image>();
                floor.floor_info.child_map[virtual_x] = y_info;
            }

            var setting_data = this._setting_dialog.data;
            
            var image = new ALittle.Image(this._control);
            image.texture_name = info.texture_name;
            image.width = setting_data.image_w;
            image.height = setting_data.image_h;
            var center_x, center_y = IDECoordVirtual2Show(virtual_x, virtual_y, setting_data.unit_length);
            image.x = center_x - setting_data.center_x;
            image.y = center_y - setting_data.center_y;
            floor.edit_item.AddChild(image);
            y_info[virtual_y] = image;   
        }
        {
            var y_data = floor.floor_info.floor_data.data[virtual_x];
            if (y_data == null)
            {
                y_data = new Map<int, int>();
                floor.floor_info.floor_data.data[virtual_x] = y_data;
            }
            y_data[virtual_y] = tex_id;
        }

        this.SaveCurEdit(false);
    }

    private fun OverWriteCell(FileSelectItemInfo file, FloorSelectItemInfo floor, int virtual_x, int virtual_y)
    {
        this.EraseCell(floor, virtual_x, virtual_y);

        // 获取笔刷
        var index = ALittle.Math_RandomInt(1, this._brush_scroll_screen.child_count);
        var info:BrushSelectItemInfo = this._brush_scroll_screen.childs[index]._user_data;

        this.SetCell(file, floor, virtual_x, virtual_y, info);
    }

    private fun HandleBrushQuadLButtonDown(ALittle.UILButtonDownEvent event)
    {
        if (this._brush_scroll_screen.child_count == 0) return;
        
        // 获取当前编辑
        if (this._cur_file == null) return;
        // 获取当前层
        if (this._cur_floor == null) return;

        var setting_data = this._setting_dialog.data;
        // 计算坐标
        var virtual_x, virtual_y = IDECoordShow2Virtual(event.rel_x, event.rel_y, setting_data.unit_length);
        this.OverWriteCell(this._cur_file, this._cur_floor, virtual_x, virtual_y);
    }

    private fun HandleBrushQuadDragBegin(ALittle.UIButtonDragBeginEvent event)
    {
        this._cur_brush_virtual_x = null;
        this._cur_brush_virtual_y = null;
    }

    private fun HandleBrushQuadDrag(ALittle.UIButtonDragEvent event)
    {
        if (this._brush_scroll_screen.child_count == 0) return;
        
        // 获取当前编辑
        if (this._cur_file == null) return;
        // 获取当前层
        if (this._cur_floor == null) return;

        var setting_data = this._setting_dialog.data;
        // 计算坐标
        var virtual_x, virtual_y = IDECoordShow2Virtual(event.rel_x, event.rel_y, setting_data.unit_length);
        if (this._cur_brush_virtual_x == virtual_x && this._cur_brush_virtual_y == virtual_y) return;
        this._cur_brush_virtual_x = virtual_x;
        this._cur_brush_virtual_y = virtual_y;

        this.OverWriteCell(this._cur_file, this._cur_floor, virtual_x, virtual_y);
    }

    private fun HandleEraseQuadLButtonDown(ALittle.UILButtonDownEvent event)
    {   
        // 获取当前层
        if (this._cur_floor == null) return;

        var setting_data = this._setting_dialog.data;
        // 计算坐标
        var virtual_x, virtual_y = IDECoordShow2Virtual(event.rel_x, event.rel_y, setting_data.unit_length);
        this.EraseCell(this._cur_floor, virtual_x, virtual_y);
    }

    private fun HandleEraseQuadDragBegin(ALittle.UIButtonDragBeginEvent event)
    {
        this._cur_erase_virtual_x = null;
        this._cur_erase_virtual_y = null;
    }

    private fun HandleEraseQuadDrag(ALittle.UIButtonDragEvent event)
    {
        // 获取当前层
        if (this._cur_floor == null) return;

        var setting_data = this._setting_dialog.data;
        // 计算坐标
        var virtual_x, virtual_y = IDECoordShow2Virtual(event.rel_x, event.rel_y, setting_data.unit_length);
        if (this._cur_erase_virtual_x == virtual_x && this._cur_erase_virtual_y == virtual_y) return;
        this._cur_erase_virtual_x = virtual_x;
        this._cur_erase_virtual_y = virtual_y;

        this.EraseCell(this._cur_floor, virtual_x, virtual_y);
    }

    //编辑区////////////////////////////////////////////////////////////////////////
    public fun StartEdit(FileSelectItemInfo file_info)
    {
        var setting_data = this._setting_dialog.data;

        // 设置当前编辑信息
        this._cur_file = file_info;
        this._cur_floor = null;
        // 设置标题
        this._edit_title.text = file_info.item.text;
        // 清理编辑器
        this._edit_scroll_screen.RemoveAllChild();

        var x_max = file_info.map_data.x_max;
        if (x_max < 10) x_max = 10;
        var y_max = file_info.map_data.y_max;
        if (y_max < 10) y_max = 10;
        var nx_max = file_info.map_data.nx_max;
        if (nx_max > -10) nx_max = -10;

        var layer_width = 0.0;
        var layer_height = 0.0;
        this._cur_layer = new ALittle.DisplayLayout(g_Control);
        this._cur_grid_layer = new ALittle.DisplayLayout(g_Control);
        this._cur_grid_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_grid_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_layer.AddChild(this._cur_grid_layer);
        this._cur_grid_layer.disabled = true;
        for (var x = 0; x < x_max; 1)
        {
            for (var y = 0; y < y_max; 1)
            {
                var grid = g_Control.CreateControl{ALittle.DisplayLayout}("gbr_hex_grid");
                grid.width = setting_data.unit_length * WIDTH_RATE;
                grid.height = setting_data.unit_length * HEIGHT_RATE;
                var center_x, center_y = IDECoordVirtual2Show(x, y, setting_data.unit_length);
                grid.x = center_x - grid.width / 2;
                grid.y = center_y - grid.height / 2;
                this._cur_grid_layer.AddChild(grid);
                
                if (grid.x + grid.width > layer_width) layer_width = grid.x + grid.width;
                if (grid.y + grid.height > layer_height) layer_height = grid.y + grid.height;
            }
        }
        for (var x = -1; x > nx_max; -1)
        {
            for (var y = 0; y < y_max; 1)
            {
                var grid = g_Control.CreateControl{ALittle.DisplayLayout}("gbr_hex_grid");
                grid.width = setting_data.unit_length * WIDTH_RATE;
                grid.height = setting_data.unit_length * HEIGHT_RATE;
                var center_x, center_y = IDECoordVirtual2Show(x, y, setting_data.unit_length);
                grid.x = center_x - grid.width / 2;
                grid.y = center_y - grid.height / 2;
                this._cur_grid_layer.AddChild(grid);
            
                if (grid.x + grid.width > layer_width) layer_width = grid.x + grid.width;
                if (grid.y + grid.height > layer_height) layer_height = grid.y + grid.height;
            }
        }

        this._cur_brush_quad = new ALittle.Quad(g_Control);
        this._cur_brush_quad.alpha = 0;
        this._cur_brush_quad.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_brush_quad.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_layer.AddChild(this._cur_brush_quad);
        
        this._cur_brush_quad.AddEventListener(this, this.HandleBrushQuadLButtonDown);
        this._cur_brush_quad.AddEventListener(this, this.HandleBrushQuadDragBegin);
        this._cur_brush_quad.AddEventListener(this, this.HandleBrushQuadDrag);
        

        this._cur_erase_quad = new ALittle.Quad(g_Control);
        this._cur_erase_quad.alpha = 0;
        this._cur_erase_quad.visible = false;
        this._cur_erase_quad.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_erase_quad.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_layer.AddChild(this._cur_erase_quad);
        
        this._cur_erase_quad.AddEventListener(this, this.HandleEraseQuadLButtonDown);
        this._cur_erase_quad.AddEventListener(this, this.HandleEraseQuadDragBegin);
        this._cur_erase_quad.AddEventListener(this, this.HandleEraseQuadDrag);
        
        this._cur_drag_quad = new ALittle.Quad(g_Control);
        this._cur_drag_quad.alpha = 0;
        this._cur_drag_quad.visible = false;
        this._cur_drag_quad.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_drag_quad.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_layer.AddChild(this._cur_drag_quad);
        this._cur_drag_quad.drag_trans_target = this._edit_scroll_screen;

        this._cur_edit_layer = new ALittle.DisplayLayout(g_Control);
        this._cur_edit_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_edit_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_layer.AddChild(this._cur_edit_layer);
        this._cur_edit_layer.disabled = true;

        this._edit_scroll_screen.container.width = layer_width;
        this._edit_scroll_screen.container.height = layer_height;
        this._cur_layer.width = layer_width;
        this._cur_layer.height = layer_height;
        this._edit_scroll_screen.AddChild(this._cur_layer);
        this._edit_scroll_screen.RejustScrollBar();

        this._layer_list.Init();
    }
    
    private fun CreateFloorEdit(FloorSelectItemInfo info) : ALittle.DisplayLayout
    {
        var setting_data = this._setting_dialog.data;

        var layer = new ALittle.DisplayLayout(this._control);
        // 填充格子
        for (var x, y_data in info.floor_info.floor_data.data)
        {
            for (var y, tex_id in y_data)
            {
                var image = new ALittle.Image(this._control);
                image.texture_name = info.floor_info.file_info.map_data.tex_map[tex_id];
                image.width = setting_data.image_w;
                image.height = setting_data.image_h;
                var center_x, center_y = IDECoordVirtual2Show(x, y, setting_data.unit_length);
                image.x = center_x - setting_data.center_x;
                image.y = center_y - setting_data.center_y;
                layer.AddChild(image);

                var y_info = info.floor_info.child_map[x];
                if (y_info == null)
                {
                    y_info = new Map<int, ALittle.Image>();
                    info.floor_info.child_map[x] = y_info;
                }
                y_info[y] = image;
            }
        }
        return layer;
    }

    // 选中笔刷工具
    private fun HandleToolBrushSelect(ALittle.UIChangedEvent event)
    {
        this._layer_brush_info.visible = event.target.selected;
        if (this._cur_brush_quad != null) this._cur_brush_quad.visible = event.target.selected;
        this._layer_list.UpdateFloorAlpha();
    }
    // 选中选择工具
    private fun HandleToolEraseSelect(ALittle.UIChangedEvent event)
    {
        this._layer_erase_info.visible = event.target.selected;
        if (this._cur_erase_quad != null) this._cur_erase_quad.visible = event.target.selected;
        this._layer_list.UpdateFloorAlpha();
    }
    // 选中缩放工具
    private fun HandleToolScaleSelect(ALittle.UIChangedEvent event)
    {
        this._layer_scale_info.visible = event.target.selected;
        this._layer_list.UpdateFloorAlpha();
    }

    // 选中拖拽工具
    private fun HandleToolDragSelect(ALittle.UIChangedEvent event)
    {
        this._layer_drag_info.visible = event.target.selected;
        if (this._cur_drag_quad != null) this._cur_drag_quad.visible = event.target.selected;

        if (this._cur_edit_layer != null)
        {
            for (var index, child in this._cur_edit_layer.childs)
                child.alpha = 1;
        }
    }

    // 标记为未保存
    public fun SaveCurEdit(bool save)
    {
        if (this._cur_file == null) return;
        if (this._cur_file.save == save) return;

        if (!save)
        {
            this._cur_file.save = false;
            this._edit_title.text = this._cur_file.item.text.."*";
            return;
        }
        
        var rflct = reflect<MapData>;
        // 打开文件
        var factory = new lua.__CPPAPIMessageWriteFactory();
        // 获取反射信息
        var invoke_info = ALittle.CreateMessageInfo(rflct.name);
        if (invoke_info == null) return;

        // 反序列化
        ALittle.PS_WriteMessage(factory, invoke_info, null, this._cur_file.map_data);
        
        // 保存到文件
        if (!factory.WriteToStdFile(this._cur_file.file_path))
        {
            g_AUITool.ShowNotice("提示", "保存失败");
            return;
        }

        this._cur_file.save = true;
        this._edit_title.text = this._cur_file.item.text;
    }

    // 处理快捷键
    public fun HandleKeyDown(int mod, int sym, int scancode)
    {
        if (sym == 115 && ALittle.BitAnd(mod, ALittle.UIEnumTypes.KMOD_CTRL) != 0)
        {
            this.SaveCurEdit(true);
        }
        
        var tool_changed = false;
        if (A_UISystem.sym_map[32] != null) { this._tool_drag.selected = true; tool_changed = true; }
        elseif (A_UISystem.sym_map[98] != null) { this._tool_brush.selected = true; tool_changed = true; }
        elseif (A_UISystem.sym_map[101] != null) { this._tool_erase.selected = true; tool_changed = true; }
        elseif (A_UISystem.sym_map[122] != null) { this._tool_scale.selected = true; tool_changed = true; }
        if (tool_changed)
        {
            this._tool_drag.DispatchEvent(new ALittle.UIChangedEvent());
            this._tool_brush.DispatchEvent(new ALittle.UIChangedEvent());
            this._tool_erase.DispatchEvent(new ALittle.UIChangedEvent());
            this._tool_scale.DispatchEvent(new ALittle.UIChangedEvent());
        }
        // ALittle.Log(lua.ajson.encode(A_UISystem.sym_map));
    }

    // 中间部分和右边部分之间的左右调整
    private fun HandleDragRightQuadLR(ALittle.UIButtonDragEvent event) { this._main_grid3_lr.down_size -= event.delta_x; }
    private fun HandleDragEndRightQuadLR(ALittle.UIButtonDragEndEvent event) { g_GConfig.SetConfig("main_grid3_down_size", this._main_grid3_lr.down_size); }

    // 移动光标
    private fun HandleSetVDragCursor(ALittle.UIMoveInEvent event) { ALittle.System_SetVDragCursor(); }
    private fun HandleSetHDragCursor(ALittle.UIMoveInEvent event) { ALittle.System_SetHDragCursor(); }
    // 普通光标
    private fun HandleSetNormalCursor(ALittle.UIMoveInEvent event) { ALittle.System_SetNormalCursor(); }

    //释放
    public fun Shutdown()
    {
    }
}
    
public var g_GCenter = new GCenter();