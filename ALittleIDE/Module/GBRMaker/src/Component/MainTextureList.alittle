
namespace GBRMaker;

public class MainTextureList : ALittle.DisplayLayout
{
    private AUIPlugin.AUIFileSelectLayout _layout;

    public fun TCtor()
    {
        this._layout.Init(["png"]);
        this._layout.AddEventListener(this, this.HandleTextureSelectClick);
    }

    public get base_path() : string { return this._layout.base_path; }

    //纹理列表////////////////////////////////////////////////////////////////////////
    public fun RefreshTexture()
    {
        var setting_data = g_GCenter.setting_dialog.data;
        var module_path = "Module/"..setting_data.project_name;
        this._layout.SetBasePath(module_path.."/Texture");
        this._layout.Refresh();
    }

    private fun HandleTextureSelectClick(AUIPlugin.AUIFileSelectClickUIEvent event)
    {
        ALittle.Log(event.path);

        // g_GCenter.SelectTexture(image_info, multi);
    }

    // 日志列表和详细列表之间的上下调整
    private fun HandleDragRightQuadUD(ALittle.UIButtonDragEvent event) { g_GCenter.right_grad3_ud.up_size += event.delta_y; }
    private fun HandleDragEndRightQuadUD(ALittle.UIButtonDragEndEvent event) { g_GConfig.SetConfig("right_grid3_up_size", g_GCenter.right_grad3_ud.up_size); }

    // 移动光标
    private fun HandleSetVDragCursor(ALittle.UIMoveInEvent event) { ALittle.System_SetVDragCursor(); }
    private fun HandleSetHDragCursor(ALittle.UIMoveInEvent event) { ALittle.System_SetHDragCursor(); }

    // 普通光标
    private fun HandleSetNormalCursor(ALittle.UIMoveInEvent event) { ALittle.System_SetNormalCursor(); }
}