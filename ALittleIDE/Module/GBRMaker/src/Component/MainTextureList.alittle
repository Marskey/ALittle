
namespace GBRMaker;

public class MainTextureList : ALittle.DisplayLayout
{
    private ALittle.ScrollList _texture_scroll_list;
    private List<ImageSelectItemInfo> _image_cache_list;
    private ALittle.DisplayObject _texture_search_key;

    private string _texture_base_path;
    private string _tex_name_base_path;

	private int _real_size = 100;

    public get tex_name_base_path() : string { return this._tex_name_base_path; }
    public get texture_base_path() : string { return this._texture_base_path; }

    //纹理列表////////////////////////////////////////////////////////////////////////
    public fun RefreshTexture()
    {
        var setting_data = g_GCenter.setting_dialog.data;
        var module_path = "Module/"..setting_data.project_name;
        this._tex_name_base_path = setting_data.texture_path.."/";
        this._texture_base_path = module_path.."/Texture/"..setting_data.texture_path;

        this._image_cache_list = new List<ImageSelectItemInfo>();
        this._texture_scroll_list.RemoveAllChild();

        if (ALittle.File_GetFileAttr(this._texture_base_path) == null) return;

        var file_list = ALittle.File_GetFileListByDir(this._texture_base_path);
        ALittle.List_Sort(file_list);

        for (var index, file_path in file_list)
        {
            var rel_path = ALittle.String_Sub(file_path, ALittle.String_Len(this._texture_base_path) + 2);
            var texture_name = this._tex_name_base_path..rel_path;

            var info = new ImageSelectItemInfo();
            info.item = g_Control.CreateControl{ALittle.DisplayLayout}("ide_image_select_item", info);
            info.button._user_data = info;
			info.image.SetTextureCut(file_path, ALittle.Math_Floor(info.image.width), ALittle.Math_Floor(info.image.height), true);
            info.upper_file_name = ALittle.String_Upper(ALittle.File_GetJustFileNameByPath(rel_path));
            info.file_path = file_path;

            info.button.drag_trans_target = this._texture_scroll_list;


            info.button.AddEventListener(this, this.HandleTextureSelectClick);

            this._image_cache_list[index] = info;
        }

        this.HandleTextureSearchClick(null);
    }

    public fun HandleTextureSearchClick(ALittle.UIEvent event)
    {
        this._texture_scroll_list.RemoveAllChild();
        var upper_key = ALittle.String_Upper(this._texture_search_key.text);
    
        var col_count = ALittle.Math_Floor(this._texture_scroll_list.width / this._real_size);
		var remain_count = 0;
		var container:ALittle.Linear = null;
		// 遍历列表
		for (var index, info in this._image_cache_list)
		{
            if (ALittle.String_Find(info.upper_file_name, upper_key) != null)
            {
			    if (remain_count == 0)
			    {
				    container = new ALittle.Linear(g_Control);
				    container.type = ALittle.UIEnumTypes.TYPE_H;
				    container.height = info.item.height;
				    this._texture_scroll_list.AddChild(container);
				    container.AddChild(info.item);
                
				    remain_count = col_count - 1;
			    }
			    else
			    {
				    remain_count = remain_count - 1;
				    container.AddChild(info.item);
			    } 
            }
		}
    }

    private fun HandleTextureSelectClick(ALittle.UIClickEvent event)
    {
        // 如果没有按ctrl键，那么就直接清空当前
        var ctrl = A_UISystem.sym_map[1073742048];
        var multi = ctrl != null;

        var image_info:ImageSelectItemInfo = event.target._user_data;

        var rel_path = ALittle.String_Sub(image_info.file_path, ALittle.String_Len(this._texture_base_path) + 2);
        var texture_name = this._tex_name_base_path..rel_path;

        g_GCenter.SelectTexture(image_info, multi);
    }

    // 日志列表和详细列表之间的上下调整
    private fun HandleDragRightQuadUD(ALittle.UIButtonDragEvent event) { g_GCenter.right_grad3_ud.up_size += event.delta_y; }
    private fun HandleDragEndRightQuadUD(ALittle.UIButtonDragEndEvent event) { g_GConfig.SetConfig("right_grid3_up_size", g_GCenter.right_grad3_ud.up_size); }

    // 移动光标
    private fun HandleSetVDragCursor(ALittle.UIMoveInEvent event) { ALittle.System_SetVDragCursor(); }
    private fun HandleSetHDragCursor(ALittle.UIMoveInEvent event) { ALittle.System_SetHDragCursor(); }

    // 普通光标
    private fun HandleSetNormalCursor(ALittle.UIMoveInEvent event) { ALittle.System_SetNormalCursor(); }
}