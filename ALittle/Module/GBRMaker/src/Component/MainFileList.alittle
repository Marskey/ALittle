
namespace GBRMaker;

public class MainFileList : ALittle.DisplayLayout
{
    // 文件列表
    private ALittle.ScrollScreen _file_scroll_screen;
    private List<FileSelectItemInfo> _file_cache_list;
    private ALittle.DisplayObject _file_search_key;
    private ALittle.TextRadioButtonGroup _file_radio_group;

    private string _file_base_path;

    //文件列表////////////////////////////////////////////////////////////////////////
    private async fun HandleFileNewClick(ALittle.UIClickEvent event)
    {
        var x, y = event.target.LocalToGlobal();
        var file_name = g_AUITool.ShowRename("", x, y + event.target.height, 200);
        if (file_name == "" || file_name == null) return;

        var check, error = IDEUtility_CheckResourceName(file_name);
        if (!check)
        {
            g_AUITool.ShowNotice("提示", error);
            return;
        }

        var file_path = this._file_base_path.."/"..file_name..".map";
        if (ALittle.File_GetFileAttr(file_path) != null)
        {
            g_AUITool.ShowNotice("提示", "文件已存在");
            return;
        }

        // 创建一个文件
        ALittle.File_WriteTextToFile("", file_path);
    }

    private fun HandleSelectFile(ALittle.UIChangedEvent event)
    {
        if (!event.target.selected) return;

        g_GCenter.SaveCurEdit(true);

        var info:FileSelectItemInfo = event.target._user_data;
        if (info.map_data == null)
        {
            var rflct = reflect<MapData>;
            // 打开文件
            var factory = new lua.__CPPAPIMessageReadFactory();
            if (!factory.ReadFromStdFile(info.file_path)) return;

                // 获取反射信息
            var invoke_info = ALittle.CreateMessageInfo(rflct.name);
            if (invoke_info == null) return;

                // 反序列化
            info.map_data = ALittle.PS_ReadMessage(factory, invoke_info, null, factory.GetDataSize());

            // 构建信息
            info.map_info = new MapInfo();
            info.map_info.tex_map = new Map<string, int>();
            info.map_info.tex_max_id = 0;
            for (var id, path in info.map_data.tex_map)
            {
                info.map_info.tex_map[path] = id;
                if (info.map_info.tex_max_id < id)
                    info.map_info.tex_max_id = id;
            }

            // 构建层信息
            info.map_info.floor_list = new List<FloorInfo>();
            for (var index, floor_data in info.map_data.floor_list)
            {
                var floor_info = new FloorInfo();
                floor_info.floor_data = floor_data;
                floor_info.file_info = info;
                floor_info.visible = true;
                floor_info.child_map = new Map<int, Map<int, ALittle.Image>>();
                ALittle.List_Push(info.map_info.floor_list, floor_info);
            }
        }

        // 创建相关界面
        g_GCenter.StartEdit(info);
    }

    public fun RefreshFile()
    {
        var setting_data = g_GCenter.setting_dialog.data;
        this._file_base_path = "Module/"..setting_data.project_name.."/Other/"..setting_data.data_path;

        this._file_cache_list = new List<FileSelectItemInfo>();
        this._file_radio_group = new ALittle.TextRadioButtonGroup();
        this._file_scroll_screen.RemoveAllChild();

        if (ALittle.File_GetFileAttr(this._file_base_path) == null) return;

        var file_list = ALittle.File_GetFileListByDir(this._file_base_path);
        ALittle.List_Sort(file_list);

        for (var index, file_path in file_list)
        {
            var rel_path = ALittle.String_Sub(file_path, ALittle.String_Len(this._file_base_path) + 2);
        
            var info = new FileSelectItemInfo();
            info.item = g_Control.CreateControl{ALittle.TextRadioButton}("ide_common_item_radiobutton", info);
            info.item._user_data = info;
            info.item.group = this._file_radio_group;
            info.item.text = ALittle.File_GetJustFileNameByPath(rel_path);
            info.upper_file_name = ALittle.String_Upper(info.item.text);
            info.file_path = file_path;
            info.save = true;
            info.item.AddEventListener(this, this.HandleSelectFile);

            info.item.drag_trans_target = this._file_scroll_screen;

            this._file_cache_list[index] = info;
        }

        this.HandleFileSearchClick(null);
    }

    public fun HandleFileSearchClick(ALittle.UIEvent event)
    {
        this._file_scroll_screen.RemoveAllChild();
        var upper_key = ALittle.String_Upper(this._file_search_key.text);
    
		// 遍历列表
		for (var index, info in this._file_cache_list)
		{
            if (ALittle.String_Find(info.upper_file_name, upper_key) != null)
                this._file_scroll_screen.AddChild(info.item);
		}
    }

}