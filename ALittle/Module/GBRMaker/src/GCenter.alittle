
namespace GBRMaker;

protected var g_GConfig:ALittle.IJsonConfig;

// 层级数据
protected struct FloorData
{
    string name;                // 名称
    Map<int, Map<int, int>> data;  // 地图信息
}

// 地图数据
protected struct MapData
{
    List<FloorData> floor_list; // 层
    Map<int, string> tex_map;   // 纹理映射ID
    int y_max;                // y坐标最大值
    int x_max;                // x坐标最大值
    int nx_max;               // x负坐标最小值（是负数)
}

// 层级信息
protected struct FloorInfo
{
    FileSelectItemInfo file_info;
    FloorData floor_data;
    bool visible;
    Map<int, Map<int, ALittle.Image>> child_map;
}

// 地图信息
protected struct MapInfo
{
    List<FloorInfo> floor_list;
    Map<string, int> tex_map;   // 纹理映射ID
    int tex_max_id;
}

// 层级信息
protected struct FloorSelectItemInfo
{
    ALittle.TextRadioButton select_item;
    FloorInfo floor_info;
    ALittle.DisplayLayout edit_item;
}

// 文件信息
protected struct FileSelectItemInfo
{
    ALittle.TextRadioButton item;
    string file_path;
    string upper_file_name;
    MapData map_data;
    MapInfo map_info;
    bool save;
}

// 图片信息
protected struct ImageSelectItemInfo
{
    ALittle.DisplayLayout item;
    ALittle.Image image;
    ALittle.DisplayObject name;
    ALittle.DisplayObject button;
    ALittle.DisplayLayout frame;
    string upper_file_name;
    string file_path;
}

// 笔刷信息
protected struct BrushSelectItemInfo
{
    ALittle.DisplayLayout item;
    ALittle.Image image;
    ALittle.DisplayObject name;
    ALittle.DisplayObject button;
    ALittle.DisplayLayout frame;
    string upper_file_name;
    string texture_name;
}

class GCenter
{
    private double _real_size;
    private string _texture_base_path;
    private string _tex_name_base_path;
    private string _file_base_path;

    private ALittle.DisplayLayout _main_layer;
    private ALittle.DisplayLayout _dialog_layer;

    private ALittle.Grid3 _right_grad3_ud;
    private ALittle.Grid3 _main_grid3_lr;

    // 设置界面
    private ALittle.Dialog _setting_dialog;
    private ALittle.DisplayObject _setting_project_name_input;
    private ALittle.DisplayObject _setting_texture_path_input;
    private ALittle.DisplayObject _setting_data_path_input;
    private ALittle.DisplayObject _unit_empty_name_input;
    private ALittle.DisplayObject _unit_width_input;
    private ALittle.DisplayObject _unit_height_input;
    private ALittle.DisplayObject _unit_left_input;
    private ALittle.DisplayObject _unit_right_input;
    private ALittle.DisplayObject _unit_top_input;
    private ALittle.DisplayObject _unit_bottom_input;
    private ALittle.ControlSystem _control;
    private int _unit_width;
    private int _unit_height;
    private int _unit_left;
    private int _unit_right;
    private int _unit_top;
    private int _unit_bottom;
    private int _unit_real_width;
    private int _unit_real_height;
    
    // 纹理列表
    private ALittle.ScrollList _texture_scroll_list;
    private List<ImageSelectItemInfo> _image_cache_list;
    private ALittle.DisplayObject _texture_search_key;
    
    // 文件列表
    private ALittle.ScrollScreen _file_scroll_screen;
    private List<FileSelectItemInfo> _file_cache_list;
    private ALittle.DisplayObject _file_search_key;
    private ALittle.TextRadioButtonGroup _file_radio_group;

    // 图层列表
    private ALittle.ScrollScreen _floor_scroll_screen;

    private ALittle.DisplayObject _floor_right_menu;
    private ALittle.DisplayObject _floor_right_show_btn;
    private ALittle.DisplayObject _floor_right_hide_btn;
    
    // 编辑区
    private ALittle.ScrollScreen _edit_scroll_screen;
    private ALittle.DisplayObject _edit_title;

    // 工具区
    private ALittle.DisplayObject _tool_brush;
    private ALittle.DisplayLayout _layer_brush_info;
    private ALittle.ScrollScreen _brush_scroll_screen;
    private int _cur_brush_virtual_x;
    private int _cur_brush_virtual_y;

    private ALittle.DisplayObject _tool_erase;
    private ALittle.DisplayLayout _layer_erase_info;
    private int _cur_erase_virtual_x;
    private int _cur_erase_virtual_y;

    private ALittle.DisplayObject _tool_scale;
    private ALittle.DisplayLayout _layer_scale_info;

    private ALittle.DisplayObject _tool_drag;
    private ALittle.DisplayLayout _layer_drag_info;

    // 当前正在编辑
    private FileSelectItemInfo _cur_file;
    private FloorSelectItemInfo _cur_floor;
    private ALittle.DisplayLayout _cur_layer;
    private ALittle.DisplayLayout _cur_grid_layer;
    private ALittle.DisplayLayout _cur_edit_layer;
    private ALittle.Quad _cur_brush_quad;
    private ALittle.Quad _cur_erase_quad;
    private ALittle.Quad _cur_drag_quad;

    public ctor()
    {
	}

    // 初始化
    public fun Setup()
    {
        // 获取配置信息
        g_GConfig = ALittle.CreateConfigSystem(g_ModuleBasePath.."/User.cfg");
        // 生成随机数种子
        ALittle.Math_RandomSeed(ALittle.Time_GetCurTime());
        // 设置1个线程
        ALittle.System_SetThreadCount(1, ALittle.SystemThreadType.SLOW);
    
        // 创建主层
        this._main_layer = new ALittle.DisplayLayout(g_Control);
        this._main_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._main_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        g_LayerGroup.AddChild(this._main_layer, null);
        this._dialog_layer = new ALittle.DisplayLayout(g_Control);
        this._dialog_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._dialog_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        g_LayerGroup.AddChild(this._dialog_layer, null);
    
        this._setting_dialog = g_Control.CreateControl{ALittle.Dialog}("main_setting_dialog", this);
        A_LayerManager.AddToModal(this._setting_dialog);
        
        // 创建主界面
        g_Control.CreateControl{ALittle.DisplayObject}("main_scene", this, this._main_layer);

        this._right_grad3_ud.up_size = g_GConfig.GetDouble("right_grid3_up_size", this._right_grad3_ud.up_size);
        this._main_grid3_lr.down_size = g_GConfig.GetDouble("main_grid3_down_size", this._main_grid3_lr.down_size);

        var tool_group = new ALittle.TextRadioButtonGroup();
        this._tool_brush.group = tool_group;
        this._tool_erase.group = tool_group;
        this._tool_scale.group = tool_group;
        this._tool_drag.group = tool_group;
        
        this._tool_brush.selected = true;
        this._layer_brush_info.visible = true;
        this._layer_drag_info.visible = false;
        this._layer_scale_info.visible = false;
        this._layer_erase_info.visible = false;

        A_UISystem.keydown_callback = bind(this.HandleKeyDown, this);

        this._setting_project_name_input.text = g_GConfig.GetString("project_name", "");
        this._setting_texture_path_input.text = g_GConfig.GetString("texture_path", "");
        this._unit_empty_name_input.text = g_GConfig.GetString("empty_name", "");
        this._setting_data_path_input.text = g_GConfig.GetString("data_path", "");

        this._unit_width = g_GConfig.GetInt("unit_width", 100); this._unit_width_input.text = this._unit_width;
        this._unit_height = g_GConfig.GetInt("unit_height", 100); this._unit_height_input.text = this._unit_height;
        this._unit_left = g_GConfig.GetInt("unit_left", 0); this._unit_left_input.text = this._unit_left;
        this._unit_right = g_GConfig.GetInt("unit_right", 0); this._unit_right_input.text = this._unit_right;
        this._unit_top = g_GConfig.GetInt("unit_top", 0); this._unit_top_input.text = this._unit_top;
        this._unit_bottom = g_GConfig.GetInt("unit_bottom", 0); this._unit_bottom_input.text = this._unit_bottom;
        this._unit_real_width = this._unit_width - this._unit_left - this._unit_right;
        this._unit_real_height = this._unit_height - this._unit_top - this._unit_bottom;
        
        var module_path = "Module/"..this._setting_project_name_input.text;
        if (ALittle.File_GetFileAttr(module_path) == null
            || ALittle.File_GetFileAttr(module_path.."/Texture/"..this._setting_texture_path_input.text) == null
            || ALittle.File_GetFileAttr(module_path.."/Texture/"..this._setting_texture_path_input.text.."/"..this._unit_empty_name_input.text) == null
            || ALittle.File_GetFileAttr(module_path.."/Other/"..this._setting_data_path_input.text) == null)
        {
            this._setting_dialog.visible = true;
        }
        else
        {
            this._control = new ALittle.ControlSystem(this._setting_project_name_input.text);
            // 固定配置值
            this._real_size = 100;
            this._file_base_path = module_path.."/Other/"..this._setting_data_path_input.text;
            this._tex_name_base_path = this._setting_texture_path_input.text.."/";
            this._texture_base_path = module_path.."/Texture/"..this._setting_texture_path_input.text;

            this.RefreshTexture();
            this.RefreshFile();
        }
    }


    //设置界面////////////////////////////////////////////////////////////////////////
    private fun HandleShowSettingDialog(ALittle.UIClickEvent event) { this._setting_dialog.visible = true; }
    private fun HandleSettingCancelClick(ALittle.UIClickEvent event) { this._setting_dialog.visible = false; }
    private fun HandleSettingConfirmClick(ALittle.UIClickEvent event)
    {
        var unit_width = ALittle.Math_ToInt(this._unit_width_input.text);
        var unit_height = ALittle.Math_ToInt(this._unit_height_input.text);
        var unit_left = ALittle.Math_ToInt(this._unit_left_input.text);
        var unit_right = ALittle.Math_ToInt(this._unit_right_input.text);
        var unit_top = ALittle.Math_ToInt(this._unit_top_input.text);
        var unit_bottom = ALittle.Math_ToInt(this._unit_bottom_input.text);

        if (unit_width == null || unit_width < 0
            || unit_height == null || unit_height < 0
            || unit_left == null || unit_left < 0
            || unit_right == null || unit_right < 0
            || unit_top == null || unit_top < 0
            || unit_bottom == null || unit_bottom < 0)
        { g_AUITool.ShowNotice("提示", "请输入正整数"); return; }

        var module_path = "Module/"..this._setting_project_name_input.text;
        if (ALittle.File_GetFileAttr(module_path) == null)
        { g_AUITool.ShowNotice("提示", "项目不存在"); return; }

        if (ALittle.File_GetFileAttr(module_path.."/Texture/"..this._setting_texture_path_input.text) == null)
        { g_AUITool.ShowNotice("提示", "格子图片路径不存在"); return; }

        if (ALittle.File_GetFileAttr(module_path.."/Other/"..this._setting_data_path_input.text) == null)
        { g_AUITool.ShowNotice("提示", "场景数据路径不存在"); return; }

        if (ALittle.File_GetFileAttr(module_path.."/Texture/"..this._setting_texture_path_input.text.."/"..this._unit_empty_name_input.text) == null)
        { g_AUITool.ShowNotice("提示", "空格子图片不存在"); return; }

        this._file_base_path = module_path.."/Other/"..this._setting_data_path_input.text;
        this._tex_name_base_path = this._setting_texture_path_input.text.."/";
        this._texture_base_path = module_path.."/Texture/"..this._setting_texture_path_input.text;

        this._unit_width = unit_width;
        this._unit_height = unit_height;
        this._unit_left = unit_left;
        this._unit_right = unit_right;
        this._unit_top = unit_top;
        this._unit_bottom = unit_bottom;
        this._unit_real_width = this._unit_width - this._unit_left - this._unit_right;
        this._unit_real_height = this._unit_height - this._unit_top - this._unit_bottom;

        g_GConfig.SetConfig("unit_width", this._unit_width);
        g_GConfig.SetConfig("unit_height", this._unit_height);
        g_GConfig.SetConfig("unit_left", this._unit_left);
        g_GConfig.SetConfig("unit_right", this._unit_right);
        g_GConfig.SetConfig("unit_top", this._unit_top);
        g_GConfig.SetConfig("unit_bottom", this._unit_bottom);
        g_GConfig.SetConfig("project_name", this._setting_project_name_input.text);
        g_GConfig.SetConfig("texture_path", this._setting_texture_path_input.text);
        g_GConfig.SetConfig("empty_name", this._unit_empty_name_input.text);
        g_GConfig.SetConfig("data_path", this._setting_data_path_input.text);
        
        this._setting_dialog.visible = false;
        this._control = new ALittle.ControlSystem(this._setting_project_name_input.text);
    
        this.RefreshTexture();
        this.RefreshFile();
    }
    
    //文件列表////////////////////////////////////////////////////////////////////////
    private async fun HandleFileNewClick(ALittle.UIClickEvent event)
    {
        var x, y = event.target.LocalToGlobal();
        var file_name = g_AUITool.ShowRename("", x, y + event.target.height, 200);
        if (file_name == "" || file_name == null) return;

        var check, error = IDEUtility_CheckResourceName(file_name);
        if (!check)
        {
            g_AUITool.ShowNotice("提示", error);
            return;
        }

        var file_path = this._file_base_path.."/"..file_name..".map";
        if (ALittle.File_GetFileAttr(file_path) != null)
        {
            g_AUITool.ShowNotice("提示", "文件已存在");
            return;
        }

        // 创建一个文件
        ALittle.File_WriteTextToFile("", file_path);
    }

    private fun HandleSelectFile(ALittle.UIChangedEvent event)
    {
        if (!event.target.selected) return;

        this.SaveCurEdit(true);

        var info:FileSelectItemInfo = event.target._user_data;
        if (info.map_data == null)
        {
            var rflct = reflect<MapData>;
            // 打开文件
            var factory = new lua.__CPPAPIMessageReadFactory();
            if (!factory.ReadFromStdFile(info.file_path)) return;

            // 获取反射信息
            var invoke_info = ALittle.CreateMessageInfo(rflct.name);
            if (invoke_info == null) return;

            // 反序列化
            info.map_data = ALittle.PS_ReadMessage(factory, invoke_info, null, factory.GetDataSize());

            // 构建信息
            info.map_info = new MapInfo();
            info.map_info.tex_map = new Map<string, int>();
            info.map_info.tex_max_id = 0;
            for (var id, path in info.map_data.tex_map)
            {
                info.map_info.tex_map[path] = id;
                if (info.map_info.tex_max_id < id)
                    info.map_info.tex_max_id = id;
            }

            // 构建层信息
            info.map_info.floor_list = new List<FloorInfo>();
            for (var index, floor_data in info.map_data.floor_list)
            {
                var floor_info = new FloorInfo();
                floor_info.floor_data = floor_data;
                floor_info.file_info = info;
                floor_info.visible = true;
                floor_info.child_map = new Map<int, Map<int, ALittle.Image>>();
                ALittle.List_Push(info.map_info.floor_list, floor_info);
            }
        }

        // 创建相关界面
        this.StartEdit(info);
    }

    public fun RefreshFile()
    {
        this._file_cache_list = new List<FileSelectItemInfo>();
        this._file_radio_group = new ALittle.TextRadioButtonGroup();
        this._file_scroll_screen.RemoveAllChild();

        if (ALittle.File_GetFileAttr(this._file_base_path) == null) return;

        var file_list = ALittle.File_GetFileListByDir(this._file_base_path);
        ALittle.List_Sort(file_list);

        for (var index, file_path in file_list)
        {
            var rel_path = ALittle.String_Sub(file_path, ALittle.String_Len(this._file_base_path) + 2);
            
            var info = new FileSelectItemInfo();
            info.item = g_Control.CreateControl{ALittle.TextRadioButton}("ide_common_item_radiobutton", info);
            info.item._user_data = info;
            info.item.group = this._file_radio_group;
            info.item.text = ALittle.File_GetJustFileNameByPath(rel_path);
            info.upper_file_name = ALittle.String_Upper(info.item.text);
            info.file_path = file_path;
            info.save = true;
            info.item.AddEventListener(this, this.HandleSelectFile);

            info.item.drag_trans_target = this._file_scroll_screen;

            this._file_cache_list[index] = info;
        }

        this.HandleFileSearchClick(null);
    }

    public fun HandleFileSearchClick(ALittle.UIEvent event)
    {
        this._file_scroll_screen.RemoveAllChild();
        var upper_key = ALittle.String_Upper(this._file_search_key.text);
        
		// 遍历列表
		for (var index, info in this._file_cache_list)
		{
            if (ALittle.String_Find(info.upper_file_name, upper_key) != null)
                this._file_scroll_screen.AddChild(info.item);
		}
    }
    
    //纹理列表////////////////////////////////////////////////////////////////////////
    public fun RefreshTexture()
    {
        this._image_cache_list = new List<ImageSelectItemInfo>();
        this._texture_scroll_list.RemoveAllChild();

        if (ALittle.File_GetFileAttr(this._texture_base_path) == null) return;

        var file_list = ALittle.File_GetFileListByDir(this._texture_base_path);
        ALittle.List_Sort(file_list);

        for (var index, file_path in file_list)
        {
            var rel_path = ALittle.String_Sub(file_path, ALittle.String_Len(this._texture_base_path) + 2);
            var texture_name = this._tex_name_base_path..rel_path;

            var info = new ImageSelectItemInfo();
            info.item = g_Control.CreateControl{ALittle.DisplayLayout}("ide_image_select_item", info);
            info.button._user_data = info;
			info.image.SetTextureCut(file_path, ALittle.Math_Floor(info.frame.width), ALittle.Math_Floor(info.frame.height), true);
            info.name.text = ALittle.File_GetJustFileNameByPath(rel_path);
            info.upper_file_name = ALittle.String_Upper(info.name.text);
            info.file_path = file_path;

            info.button.drag_trans_target = this._texture_scroll_list;
            info.button.AddEventListener(this, this.HandleTextureSelectClick);

            this._image_cache_list[index] = info;
        }

        this.HandleTextureSearchClick(null);
    }

    public fun HandleTextureSearchClick(ALittle.UIEvent event)
    {
        this._texture_scroll_list.RemoveAllChild();
        var upper_key = ALittle.String_Upper(this._texture_search_key.text);
        
        var col_count = ALittle.Math_Floor(this._texture_scroll_list.width / this._real_size);
		var remain_count = 0;
		var container:ALittle.Linear = null;
		// 遍历列表
		for (var index, info in this._image_cache_list)
		{
            if (ALittle.String_Find(info.upper_file_name, upper_key) != null)
            {
			    if (remain_count == 0)
			    {
				    container = new ALittle.Linear(g_Control);
				    container.type = ALittle.UIEnumTypes.TYPE_H;
				    container.height = info.item.height;
				    this._texture_scroll_list.AddChild(container);
				    container.AddChild(info.item);
	
				    remain_count = col_count - 1;
			    }
			    else
			    {
				    remain_count = remain_count - 1;
				    container.AddChild(info.item);
			    } 
            }
		}
    }

    private fun HandleTextureSelectClick(ALittle.UIClickEvent event)
    {
        // 如果没有按ctrl键，那么就直接清空当前
        var ctrl = A_UISystem.sym_map[1073742048];
        if (ctrl == null)
            this._brush_scroll_screen.RemoveAllChild();

        var image_info:ImageSelectItemInfo = event.target._user_data;
        
        var rel_path = ALittle.String_Sub(image_info.file_path, ALittle.String_Len(this._texture_base_path) + 2);
        var texture_name = this._tex_name_base_path..rel_path;

        for (var index, child in this._brush_scroll_screen.childs)
        {
            var info:BrushSelectItemInfo = child._user_data;
            if (info.texture_name == texture_name) return;
        }

        var info = new BrushSelectItemInfo();
        info.item = g_Control.CreateControl{ALittle.DisplayLayout}("ide_image_select_item", info);
        info.button._user_data = info;
        info.item._user_data = info;
		info.image.SetTextureCut(image_info.file_path, ALittle.Math_Floor(info.frame.width), ALittle.Math_Floor(info.frame.height), true);
        info.name.text = ALittle.File_GetJustFileNameByPath(rel_path);
        info.upper_file_name = ALittle.String_Upper(info.name.text);
        info.texture_name = texture_name;

        info.button.drag_trans_target = this._brush_scroll_screen;
        info.button.AddEventListener(this, this.HandleBrushCancelClick);
        info.button.AddEventListener(this, this.HandleBrushAllCancelClick);

        this._brush_scroll_screen.AddChild(info.item);
    }

    private fun HandleBrushCancelClick(ALittle.UIClickEvent event)
    {
        var info:BrushSelectItemInfo = event.target._user_data;
        this._brush_scroll_screen.RemoveChild(info.item);
    }

    private fun HandleBrushAllCancelClick(ALittle.UILongButtonDownEvent event)
    {
        this._brush_scroll_screen.RemoveAllChild();
    }

    private fun EraseCell(FloorSelectItemInfo floor, int virtual_x, int virtual_y)
    {
        if (floor == null) return;

        // 检查原来是否有，有则清理
        {
            var y_info = floor.floor_info.child_map[virtual_x];
            if (y_info != null && y_info[virtual_y] != null)
            {
                floor.edit_item.RemoveChild(y_info[virtual_y]);
                y_info[virtual_y] = null;
                if (ALittle.IsEmpty(y_info))
                    floor.floor_info.child_map[virtual_x] = null;
            }   
        }
        {
            var y_data = floor.floor_info.floor_data.data[virtual_x];
            if (y_data != null)
            {
                y_data[virtual_y] = null;
                if (ALittle.IsEmpty(y_data))
                    floor.floor_info.floor_data.data[virtual_x] = null;
            }
        }
    }

    private fun SetCell(FileSelectItemInfo file, FloorSelectItemInfo floor, int virtual_x, int virtual_y, BrushSelectItemInfo info)
    {
        // 计算纹理ID
        var tex_id = file.map_info.tex_map[info.texture_name];
        if (tex_id == null)
        {
            ++ file.map_info.tex_max_id;
            tex_id = file.map_info.tex_max_id;
            file.map_info.tex_map[info.texture_name] = tex_id;
            file.map_data.tex_map[tex_id] = info.texture_name;
        }

        // 添加数据
        {
            var y_info = floor.floor_info.child_map[virtual_x];
            if (y_info == null)
            {
                y_info = new Map<int, ALittle.Image>();
                floor.floor_info.child_map[virtual_x] = y_info;
            }
            
            var image = new ALittle.Image(this._control);
            image.texture_name = info.texture_name;
            image.width = this._unit_width;
            image.height = this._unit_height;
            var show_x, show_y = IDECoordVirtual2Show(virtual_x, virtual_y, this._unit_real_width, this._unit_width, this._unit_real_height, this._unit_height);
            image.x = show_x;
            image.y = show_y;
            floor.edit_item.AddChild(image);
            y_info[virtual_y] = image;   
        }
        {
            var y_data = floor.floor_info.floor_data.data[virtual_x];
            if (y_data == null)
            {
                y_data = new Map<int, int>();
                floor.floor_info.floor_data.data[virtual_x] = y_data;
            }
            y_data[virtual_y] = tex_id;
        }

        this.SaveCurEdit(false);
    }

    private fun OverWriteCell(FileSelectItemInfo file, FloorSelectItemInfo floor, int virtual_x, int virtual_y)
    {
        this.EraseCell(floor, virtual_x, virtual_y);

        // 获取笔刷
        var index = ALittle.Math_RandomInt(1, this._brush_scroll_screen.child_count);
        var info:BrushSelectItemInfo = this._brush_scroll_screen.childs[index]._user_data;

        this.SetCell(file, floor, virtual_x, virtual_y, info);
    }

    private fun HandleBrushQuadLButtonDown(ALittle.UILButtonDownEvent event)
    {
        if (this._brush_scroll_screen.child_count == 0) return;
        
        // 获取当前编辑
        if (this._cur_file == null) return;
        // 获取当前层
        if (this._cur_floor == null) return;

        // 计算坐标
        var virtual_x, virtual_y = IDECoordShow2Virtual(event.rel_x, event.rel_y, this._unit_real_width, this._unit_width, this._unit_real_height, this._unit_height);
        this.OverWriteCell(this._cur_file, this._cur_floor, virtual_x, virtual_y);
    }

    private fun HandleBrushQuadDragBegin(ALittle.UIButtonDragBeginEvent event)
    {
        this._cur_brush_virtual_x = null;
        this._cur_brush_virtual_y = null;
    }

    private fun HandleBrushQuadDrag(ALittle.UIButtonDragEvent event)
    {
        if (this._brush_scroll_screen.child_count == 0) return;
        
        // 获取当前编辑
        if (this._cur_file == null) return;
        // 获取当前层
        if (this._cur_floor == null) return;

        // 计算坐标
        var virtual_x, virtual_y = IDECoordShow2Virtual(event.rel_x, event.rel_y, this._unit_real_width, this._unit_width, this._unit_real_height, this._unit_height);
        if (this._cur_brush_virtual_x == virtual_x && this._cur_brush_virtual_y == virtual_y) return;
        this._cur_brush_virtual_x = virtual_x;
        this._cur_brush_virtual_y = virtual_y;

        this.OverWriteCell(this._cur_file, this._cur_floor, virtual_x, virtual_y);
    }

    private fun HandleEraseQuadLButtonDown(ALittle.UILButtonDownEvent event)
    {   
        // 获取当前层
        if (this._cur_floor == null) return;

        // 计算坐标
        var virtual_x, virtual_y = IDECoordShow2Virtual(event.rel_x, event.rel_y, this._unit_real_width, this._unit_width, this._unit_real_height, this._unit_height);
        this.EraseCell(this._cur_floor, virtual_x, virtual_y);
    }

    private fun HandleEraseQuadDragBegin(ALittle.UIButtonDragBeginEvent event)
    {
        this._cur_erase_virtual_x = null;
        this._cur_erase_virtual_y = null;
    }

    private fun HandleEraseQuadDrag(ALittle.UIButtonDragEvent event)
    {
        // 获取当前层
        if (this._cur_floor == null) return;

        // 计算坐标
        var virtual_x, virtual_y = IDECoordShow2Virtual(event.rel_x, event.rel_y, this._unit_real_width, this._unit_width, this._unit_real_height, this._unit_height);
        if (this._cur_erase_virtual_x == virtual_x && this._cur_erase_virtual_y == virtual_y) return;
        this._cur_erase_virtual_x = virtual_x;
        this._cur_erase_virtual_y = virtual_y;

        this.EraseCell(this._cur_floor, virtual_x, virtual_y);
    }

    //图层列表//////////////////////////////////////////////////////////////////////
    private async fun HandleNewFloorClick(ALittle.UIClickEvent event)
    {
        if (this._cur_file == null)
        {
            g_AUITool.ShowNotice("提示", "请先打开文件");
            return;
        }

        var x, y = event.target.LocalToGlobal();
        var name = g_AUITool.ShowRename("", x, y + event.target.height, 200);
        if (name == "" || name == null) return;

        var floor_data = new FloorData();
        floor_data.name = name;
        var floor_info = new FloorInfo();
        floor_info.floor_data = floor_data;
        floor_info.file_info = this._cur_file;
        floor_info.visible = true;

        ALittle.List_Insert(this._cur_file.map_data.floor_list, 1, floor_data);
        ALittle.List_Insert(this._cur_file.map_info.floor_list, 1, floor_info);

        var group:ALittle.TextRadioButtonGroup = null;
        if (this._floor_scroll_screen.child_count > 0)
            group = this._floor_scroll_screen.childs[1].group;
        else
            group = new ALittle.TextRadioButtonGroup();
        
        var info = new FloorSelectItemInfo();
        info.select_item = g_Control.CreateControl{ALittle.TextRadioButton}("ide_common_item_radiobutton", info);
        info.select_item._user_data = info;
        info.select_item.group = group;
        info.select_item.text = floor_info.floor_data.name;
        info.select_item.AddEventListener(this, this.HandleSelectFloor);
        info.select_item.AddEventListener(this, this.HandleFloorRButtonDown);
        info.floor_info = floor_info;
        this._floor_scroll_screen.AddChild(info.select_item, 1);
        
        info.edit_item = this.CreateFloorEdit(info);
        this._cur_edit_layer.AddChild(info.edit_item, 1);

        this.SaveCurEdit(false);
    }
    
    private fun HandleSelectFloor(ALittle.UIChangedEvent event)
    {
        var info:FloorSelectItemInfo = event.target._user_data;

        if (event.target.selected)
            info.edit_item.alpha = 1;
        else
            info.edit_item.alpha = 0.5;

        this._cur_floor = info;
    }

    private fun HandleFloorRButtonDown(ALittle.UIRButtonDownEvent event)
    {
        // 创建图层右键菜单
        if (this._floor_right_menu == null)
            this._floor_right_menu = g_Control.CreateControl{ALittle.DisplayLayout}("ide_floor_right_menu", this);
        this._floor_right_menu.x = A_UISystem.mouse_x;
        this._floor_right_menu.y = A_UISystem.mouse_y;
        A_LayerManager.ShowFromRight(this._floor_right_menu);

        // 传递数据
        this._floor_right_menu._user_data = event.target._user_data;

        // 显示是否禁用
        var info:FloorSelectItemInfo = event.target._user_data;
        this._floor_right_hide_btn.disabled = !info.floor_info.visible;
        this._floor_right_show_btn.disabled = info.floor_info.visible;
    }

    private fun HandleFloorRightMenu(ALittle.UIClickEvent event)
    {
        var info:FloorSelectItemInfo = this._floor_right_menu._user_data;
        this._floor_right_menu._user_data = null;

        A_LayerManager.HideFromRight(this._floor_right_menu);
        
        // 获取下标
        var index = this._floor_scroll_screen.GetChildIndex(info.select_item);
        
        if (event.target.text == "上移")
        {
            // 移动控件
            this._floor_scroll_screen.SetChildIndex(info.select_item, index - 1);
            this._cur_edit_layer.SetChildIndex(info.edit_item, index - 1);
            // 移动数据
            var floor_data = info.floor_info.file_info.map_data.floor_list[index];
            ALittle.List_Remove(info.floor_info.file_info.map_data.floor_list, index);
            ALittle.List_Insert(info.floor_info.file_info.map_data.floor_list, index - 1, floor_data);
            var floor_info = info.floor_info.file_info.map_info.floor_list[index];
            ALittle.List_Remove(info.floor_info.file_info.map_info.floor_list, index);
            ALittle.List_Insert(info.floor_info.file_info.map_info.floor_list, index - 1, floor_info);

            this.SaveCurEdit(false);
        }
        elseif (event.target.text == "下移")
        {
            // 移动控件
            this._floor_scroll_screen.SetChildIndex(info.select_item, index + 1);
            this._cur_edit_layer.SetChildIndex(info.edit_item, index + 1);
            // 移动数据
            var floor_data = info.floor_info.file_info.map_data.floor_list[index];
            ALittle.List_Remove(info.floor_info.file_info.map_data.floor_list, index);
            ALittle.List_Insert(info.floor_info.file_info.map_data.floor_list, index + 1, floor_data);
            var floor_info = info.floor_info.file_info.map_info.floor_list[index];
            ALittle.List_Remove(info.floor_info.file_info.map_info.floor_list, index);
            ALittle.List_Insert(info.floor_info.file_info.map_info.floor_list, index + 1, floor_info);

            this.SaveCurEdit(false);
        }
        elseif (event.target.text == "隐藏")
        {
            info.select_item.text = info.floor_info.floor_data.name.."(隐藏)";
            info.edit_item.visible = false;
            info.floor_info.visible = false;
        }
        elseif (event.target.text == "显示")
        {
            info.select_item.text = info.floor_info.floor_data.name;
            info.edit_item.visible = true;
            info.floor_info.visible = true;
        }
        elseif (event.target.text == "删除")
        {
            // 删除Item
            this._floor_scroll_screen.RemoveChild(info.select_item);
            this._cur_edit_layer.RemoveChild(info.edit_item);
            // 移除数据
            ALittle.List_Remove(info.floor_info.file_info.map_data.floor_list, index);
            ALittle.List_Remove(info.floor_info.file_info.map_info.floor_list, index);

            this.SaveCurEdit(false);
        }
    }

    //编辑区////////////////////////////////////////////////////////////////////////
    public fun StartEdit(FileSelectItemInfo file_info)
    {
        // 设置当前编辑信息
        this._cur_file = file_info;
        this._cur_floor = null;
        // 设置标题
        this._edit_title.text = file_info.item.text;
        // 清理图层
        this._floor_scroll_screen.RemoveAllChild();
        // 清理编辑器
        this._edit_scroll_screen.RemoveAllChild();

        var x_max = file_info.map_data.x_max;
        if (x_max < 10) x_max = 10;
        var y_max = file_info.map_data.y_max;
        if (y_max < 10) y_max = 10;
        var nx_max = file_info.map_data.nx_max;
        if (nx_max > -10) nx_max = -10;

        var layer_width = 0.0;
        var layer_height = 0.0;
        this._cur_layer = new ALittle.DisplayLayout(g_Control);
        this._cur_grid_layer = new ALittle.DisplayLayout(g_Control);
        this._cur_grid_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_grid_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_layer.AddChild(this._cur_grid_layer);
        this._cur_grid_layer.disabled = true;
        for (var x = 0; x < x_max; 1)
        {
            for (var y = 0; y < y_max; 1)
            {
                var image = new ALittle.Image(this._control);
                image.texture_name = this._tex_name_base_path..this._unit_empty_name_input.text;
                image.width = this._unit_width;
                image.height = this._unit_height;
                var show_x, show_y = IDECoordVirtual2Show(x, y, this._unit_real_width, this._unit_width, this._unit_real_height, this._unit_height);
                image.x = show_x;
                image.y = show_y;
                this._cur_grid_layer.AddChild(image);
                
                if (image.x + image.width > layer_width) layer_width = image.x + image.width;
                if (image.y + image.height > layer_height) layer_height = image.y + image.height;
            }
        }
        for (var x = -1; x > nx_max; -1)
        {
            for (var y = 0; y < y_max; 1)
            {
                var show_x, show_y = IDECoordVirtual2Show(x, y, this._unit_real_width, this._unit_width, this._unit_real_height, this._unit_height);
                if (show_x + this._unit_width / 2 >= 0)
                {
                    var image = new ALittle.Image(this._control);
                    image.texture_name = this._tex_name_base_path..this._unit_empty_name_input.text;
                    image.width = this._unit_width;
                    image.height = this._unit_height;
                    image.x = show_x;
                    image.y = show_y;
                    this._cur_grid_layer.AddChild(image);
                    
                    if (image.x + image.width > layer_width) layer_width = image.x + image.width;
                    if (image.y + image.height > layer_height) layer_height = image.y + image.height;
                }
            }
        }

        this._cur_brush_quad = new ALittle.Quad(g_Control);
        this._cur_brush_quad.alpha = 0;
        this._cur_brush_quad.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_brush_quad.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_layer.AddChild(this._cur_brush_quad);
        
        this._cur_brush_quad.AddEventListener(this, this.HandleBrushQuadLButtonDown);
        this._cur_brush_quad.AddEventListener(this, this.HandleBrushQuadDragBegin);
        this._cur_brush_quad.AddEventListener(this, this.HandleBrushQuadDrag);
        

        this._cur_erase_quad = new ALittle.Quad(g_Control);
        this._cur_erase_quad.alpha = 0;
        this._cur_erase_quad.visible = false;
        this._cur_erase_quad.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_erase_quad.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_layer.AddChild(this._cur_erase_quad);
        
        this._cur_erase_quad.AddEventListener(this, this.HandleEraseQuadLButtonDown);
        this._cur_erase_quad.AddEventListener(this, this.HandleEraseQuadDragBegin);
        this._cur_erase_quad.AddEventListener(this, this.HandleEraseQuadDrag);
        
        this._cur_drag_quad = new ALittle.Quad(g_Control);
        this._cur_drag_quad.alpha = 0;
        this._cur_drag_quad.visible = false;
        this._cur_drag_quad.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_drag_quad.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_layer.AddChild(this._cur_drag_quad);
        this._cur_drag_quad.drag_trans_target = this._edit_scroll_screen;

        this._cur_edit_layer = new ALittle.DisplayLayout(g_Control);
        this._cur_edit_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_edit_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._cur_layer.AddChild(this._cur_edit_layer);
        this._cur_edit_layer.disabled = true;

        this._edit_scroll_screen.container.width = layer_width;
        this._edit_scroll_screen.container.height = layer_height;
        this._cur_layer.width = layer_width;
        this._cur_layer.height = layer_height;
        this._edit_scroll_screen.AddChild(this._cur_layer);
        this._edit_scroll_screen.RejustScrollBar();

        // 构建图层和编辑区
        var group = new ALittle.TextRadioButtonGroup();
        for (var index, floor_info in this._cur_file.map_info.floor_list)
        {
            var info = new FloorSelectItemInfo();
            info.select_item = g_Control.CreateControl{ALittle.TextRadioButton}("ide_common_item_radiobutton", info);
            info.select_item._user_data = info;
            info.select_item.group = group;
            info.select_item.text = floor_info.floor_data.name;
            info.select_item.AddEventListener(this, this.HandleSelectFloor);
            info.select_item.AddEventListener(this, this.HandleFloorRButtonDown);
            info.floor_info = floor_info;
            this._floor_scroll_screen.AddChild(info.select_item);

            info.edit_item = this.CreateFloorEdit(info);
            this._cur_edit_layer.AddChild(info.edit_item);
            info.edit_item.alpha = 0.5;

            if (index == 1)
            {
                info.select_item.selected = true;
                info.edit_item.alpha = 1;
                this._cur_floor = info;
            }
        }
    }
    
    private fun CreateFloorEdit(FloorSelectItemInfo info) : ALittle.DisplayLayout
    {
        var layer = new ALittle.DisplayLayout(this._control);
        // 填充格子
        for (var x, y_data in info.floor_info.floor_data.data)
        {
            for (var y, tex_id in y_data)
            {
                var image = new ALittle.Image(this._control);
                image.texture_name = info.floor_info.file_info.map_data.tex_map[tex_id];
                image.width = this._unit_width;
                image.height = this._unit_height;
                var show_x, show_y = IDECoordVirtual2Show(x, y, this._unit_real_width, this._unit_width, this._unit_real_height, this._unit_height);
                image.x = show_x;
                image.y = show_y;
                layer.AddChild(image);

                var y_info = info.floor_info.child_map[x];
                if (y_info == null)
                {
                    y_info = new Map<int, ALittle.Image>();
                    info.floor_info.child_map[x] = y_info;
                }
                y_info[y] = image;
            }
        }
        return layer;
    }

    // 更新透明度
    private fun UpdateFloorAlpha()
    {
        for (var index, child in this._floor_scroll_screen.childs)
        {
            var info:FloorSelectItemInfo = child._user_data;
            if (info.select_item.selected)
                info.edit_item.alpha = 1;
            else
                info.edit_item.alpha = 0.5;
        }
    }

    // 选中笔刷工具
    private fun HandleToolBrushSelect(ALittle.UIChangedEvent event)
    {
        this._layer_brush_info.visible = event.target.selected;
        if (this._cur_brush_quad != null) this._cur_brush_quad.visible = event.target.selected;
        this.UpdateFloorAlpha();
    }
    // 选中选择工具
    private fun HandleToolEraseSelect(ALittle.UIChangedEvent event)
    {
        this._layer_erase_info.visible = event.target.selected;
        if (this._cur_erase_quad != null) this._cur_erase_quad.visible = event.target.selected;
        this.UpdateFloorAlpha();
    }
    // 选中缩放工具
    private fun HandleToolScaleSelect(ALittle.UIChangedEvent event)
    {
        this._layer_scale_info.visible = event.target.selected;
        this.UpdateFloorAlpha();
    }

    // 选中拖拽工具
    private fun HandleToolDragSelect(ALittle.UIChangedEvent event)
    {
        this._layer_drag_info.visible = event.target.selected;
        if (this._cur_drag_quad != null) this._cur_drag_quad.visible = event.target.selected;
        for (var index, child in this._cur_edit_layer.childs)
            child.alpha = 1;
    }

    //其他////////////////////////////////////////////////////////////////////////

    // 标记为未保存
    private fun SaveCurEdit(bool save)
    {
        if (this._cur_file == null) return;
        if (this._cur_file.save == save) return;

        if (!save)
        {
            this._cur_file.save = false;
            this._edit_title.text = this._cur_file.item.text.."*";
            return;
        }
        
        var rflct = reflect<MapData>;
        // 打开文件
        var factory = new lua.__CPPAPIMessageWriteFactory();
        // 获取反射信息
        var invoke_info = ALittle.CreateMessageInfo(rflct.name);
        if (invoke_info == null) return;

        // 反序列化
        ALittle.PS_WriteMessage(factory, invoke_info, null, this._cur_file.map_data);
        
        // 保存到文件
        if (!factory.WriteToStdFile(this._cur_file.file_path))
        {
            g_AUITool.ShowNotice("提示", "保存失败");
            return;
        }

        this._cur_file.save = true;
        this._edit_title.text = this._cur_file.item.text;
    }

    // 处理快捷键
    public fun HandleKeyDown(int mod, int sym, int scancode)
    {
        if (sym == 115 && ALittle.BitAnd(mod, ALittle.UIEnumTypes.KMOD_CTRL) != 0)
        {
            this.SaveCurEdit(true);
        }
        
        var tool_changed = false;
        if (A_UISystem.sym_map[32] != null) { this._tool_drag.selected = true; tool_changed = true; }
        elseif (A_UISystem.sym_map[98] != null) { this._tool_brush.selected = true; tool_changed = true; }
        elseif (A_UISystem.sym_map[101] != null) { this._tool_erase.selected = true; tool_changed = true; }
        elseif (A_UISystem.sym_map[122] != null) { this._tool_scale.selected = true; tool_changed = true; }
        if (tool_changed)
        {
            this._tool_drag.DispatchEvent(new ALittle.UIChangedEvent());
            this._tool_brush.DispatchEvent(new ALittle.UIChangedEvent());
            this._tool_erase.DispatchEvent(new ALittle.UIChangedEvent());
            this._tool_scale.DispatchEvent(new ALittle.UIChangedEvent());
        }
        // ALittle.Log(lua.ajson.encode(A_UISystem.sym_map));
    }
    
    // 日志列表和详细列表之间的上下调整
    private fun HandleDragRightQuadUD(ALittle.UIButtonDragEvent event) { this._right_grad3_ud.up_size += event.delta_y; }
    private fun HandleDragEndRightQuadUD(ALittle.UIButtonDragEndEvent event) { g_GConfig.SetConfig("right_grid3_up_size", this._right_grad3_ud.up_size); }
    // 中间部分和右边部分之间的左右调整
    private fun HandleDragRightQuadLR(ALittle.UIButtonDragEvent event) { this._main_grid3_lr.down_size -= event.delta_x; }
    private fun HandleDragEndRightQuadLR(ALittle.UIButtonDragEndEvent event) { g_GConfig.SetConfig("main_grid3_down_size", this._main_grid3_lr.down_size); }

    // 移动光标
    private fun HandleSetVDragCursor(ALittle.UIMoveInEvent event) { ALittle.System_SetVDragCursor(); }
    private fun HandleSetHDragCursor(ALittle.UIMoveInEvent event) { ALittle.System_SetHDragCursor(); }
    // 普通光标
    private fun HandleSetNormalCursor(ALittle.UIMoveInEvent event) { ALittle.System_SetNormalCursor(); }

    //释放
    public fun Shutdown()
    {
    }
}
    
public var g_GCenter = new GCenter();