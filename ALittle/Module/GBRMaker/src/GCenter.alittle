
namespace GBRMaker;

protected var g_GConfig:ALittle.IJsonConfig;

// 单位数据
protected struct CellData
{
    int tex_id;     // 纹理ID
    int mask;       // 掩码信息
}

// 层级数据
protected struct FloorData
{
    string name;                // 名称
    Map<int, Map<int, CellData>> data;  // 地图信息
}

// 地图数据
protected struct MapData
{
    List<FloorData> floor_list; // 层
    Map<string, int> tex_map;   // 纹理映射ID
    int tex_max_id;
    int y_max;                // y坐标最大值
    int x_max;                // x坐标最大值
    int nx_max;               // x负坐标最小值（是负数)
}

// 层级信息
protected struct FloorInfo
{
    FileSelectItemInfo parent;
    FloorData data;
    bool visible;
}

// 地图信息
protected struct MapInfo
{
    List<FloorInfo> floor_list;
}

// 层级信息
protected struct FloorSelectItemInfo
{
    ALittle.TextRadioButton select_item;
    FloorInfo floor_info;
    ALittle.DisplayLayout edit_item;
}

// 文件信息
protected struct FileSelectItemInfo
{
    ALittle.TextRadioButton item;
    string file_path;
    string upper_file_name;
    MapData map_data;
    MapInfo map_info;
    bool save;
}

// 图片信息
protected struct ImageSelectItemInfo
{
    ALittle.DisplayLayout item;
    ALittle.Image image;
    ALittle.DisplayObject name;
    ALittle.DisplayObject button;
    ALittle.DisplayLayout frame;
    string upper_file_name;
}

class GCenter
{
    private double _real_size;
    private string _texture_base_path;
    private string _tex_name_base_path;
    private string _file_base_path;

    private ALittle.DisplayLayout _main_layer;
    private ALittle.DisplayLayout _dialog_layer;

    // 设置界面
    private ALittle.Dialog _setting_dialog;
    private ALittle.DisplayObject _setting_project_name_input;
    private ALittle.DisplayObject _setting_texture_path_input;
    private ALittle.DisplayObject _setting_data_path_input;
    private ALittle.DisplayObject _unit_empty_name_input;
    private ALittle.DisplayObject _unit_width_input;
    private ALittle.DisplayObject _unit_height_input;
    private ALittle.DisplayObject _unit_left_input;
    private ALittle.DisplayObject _unit_right_input;
    private ALittle.DisplayObject _unit_top_input;
    private ALittle.DisplayObject _unit_bottom_input;
    private ALittle.ControlSystem _control;
    
    // 纹理列表
    private ALittle.ScrollList _texture_scroll_list;
    private List<ImageSelectItemInfo> _image_cache_list;
    private ALittle.DisplayObject _texture_search_key;
    
    // 文件列表
    private ALittle.ScrollScreen _file_scroll_screen;
    private List<FileSelectItemInfo> _file_cache_list;
    private ALittle.DisplayObject _file_search_key;
    private ALittle.TextRadioButtonGroup _file_radio_group;

    // 图层列表
    private ALittle.ScrollScreen _floor_scroll_screen;

    private ALittle.DisplayObject _floor_right_menu;
    private ALittle.DisplayObject _floor_right_show_btn;
    private ALittle.DisplayObject _floor_right_hide_btn;
    
    // 编辑区
    private ALittle.ScrollScreen _edit_scroll_screen;
    private ALittle.DisplayObject _edit_title;

    // 当前正在编辑
    private FileSelectItemInfo _cur_edit;

    public ctor()
    {
	}

    // 初始化
    public fun Setup()
    {
        // 获取配置信息
        g_GConfig = ALittle.CreateConfigSystem(g_ModuleBasePath.."/User.cfg");
        // 生成随机数种子
        ALittle.Math_RandomSeed(ALittle.Time_GetCurTime());
        // 设置1个线程
        ALittle.System_SetThreadCount(1, ALittle.SystemThreadType.SLOW);
    
        // 创建主层
        this._main_layer = new ALittle.DisplayLayout(g_Control);
        this._main_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._main_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        g_LayerGroup.AddChild(this._main_layer, null);
        this._dialog_layer = new ALittle.DisplayLayout(g_Control);
        this._dialog_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this._dialog_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        g_LayerGroup.AddChild(this._dialog_layer, null);
    
        this._setting_dialog = g_Control.CreateControl{ALittle.Dialog}("main_setting_dialog", this);
        A_LayerManager.AddToModal(this._setting_dialog);
        
        // 创建主界面
        g_Control.CreateControl{ALittle.DisplayObject}("main_scene", this, this._main_layer);

        A_UISystem.keydown_callback = bind(this.HandleKeyDown, this);

        this._setting_project_name_input.text = g_GConfig.GetString("project_name", "");
        this._setting_texture_path_input.text = g_GConfig.GetString("texture_path", "");
        this._unit_empty_name_input.text = g_GConfig.GetString("empty_name", "");
        this._setting_data_path_input.text = g_GConfig.GetString("data_path", "");

        this._unit_width_input.text = g_GConfig.GetInt("unit_width", 100);
        this._unit_height_input.text = g_GConfig.GetInt("unit_height", 100);
        this._unit_left_input.text = g_GConfig.GetInt("unit_left", 0);
        this._unit_right_input.text = g_GConfig.GetInt("unit_right", 0);
        this._unit_top_input.text = g_GConfig.GetInt("unit_top", 0);
        this._unit_bottom_input.text = g_GConfig.GetInt("unit_bottom", 0);
        
        var module_path = "Module/"..this._setting_project_name_input.text;
        if (ALittle.File_GetFileAttr(module_path) == null
            || ALittle.File_GetFileAttr(module_path.."/Texture/"..this._setting_texture_path_input.text) == null
            || ALittle.File_GetFileAttr(module_path.."/Texture/"..this._setting_texture_path_input.text.."/"..this._unit_empty_name_input.text) == null
            || ALittle.File_GetFileAttr(module_path.."/Other/"..this._setting_data_path_input.text) == null)
        {
            this._setting_dialog.visible = true;
        }
        else
        {
            this._control = new ALittle.ControlSystem(this._setting_project_name_input.text);
            // 固定配置值
            this._real_size = 100;
            this._file_base_path = module_path.."/Other/"..this._setting_data_path_input.text;
            this._tex_name_base_path = this._setting_texture_path_input.text;
            this._texture_base_path = module_path.."/Texture/"..this._setting_texture_path_input.text;

            this.RefreshTexture();
            this.RefreshFile();
        }
    }

    //设置界面////////////////////////////////////////////////////////////////////////
    private fun HandleShowSettingDialog(ALittle.UIClickEvent event) { this._setting_dialog.visible = true; }
    private fun HandleSettingCancelClick(ALittle.UIClickEvent event) { this._setting_dialog.visible = false; }
    private fun HandleSettingConfirmClick(ALittle.UIClickEvent event)
    {
        var unit_width = ALittle.Math_ToInt(this._unit_width_input.text);
        var unit_height = ALittle.Math_ToInt(this._unit_height_input.text);
        var unit_left = ALittle.Math_ToInt(this._unit_left_input.text);
        var unit_right = ALittle.Math_ToInt(this._unit_right_input.text);
        var unit_top = ALittle.Math_ToInt(this._unit_top_input.text);
        var unit_bottom = ALittle.Math_ToInt(this._unit_bottom_input.text);

        if (unit_width == null || unit_width < 0
            || unit_height == null || unit_height < 0
            || unit_left == null || unit_left < 0
            || unit_right == null || unit_right < 0
            || unit_top == null || unit_top < 0
            || unit_bottom == null || unit_bottom < 0)
        { g_IDETool.ShowNotice("提示", "请输入正整数"); return; }

        var module_path = "Module/"..this._setting_project_name_input.text;
        if (ALittle.File_GetFileAttr(module_path) == null)
        { g_IDETool.ShowNotice("提示", "项目不存在"); return; }

        if (ALittle.File_GetFileAttr(module_path.."/Texture/"..this._setting_texture_path_input.text) == null)
        { g_IDETool.ShowNotice("提示", "格子图片路径不存在"); return; }

        if (ALittle.File_GetFileAttr(module_path.."/Other/"..this._setting_data_path_input.text) == null)
        { g_IDETool.ShowNotice("提示", "场景数据路径不存在"); return; }

        if (ALittle.File_GetFileAttr(module_path.."/Texture/"..this._setting_texture_path_input.text.."/"..this._unit_empty_name_input.text) == null)
        { g_IDETool.ShowNotice("提示", "空格子图片不存在"); return; }

        this._file_base_path = module_path.."/Other/"..this._setting_data_path_input.text;
        this._tex_name_base_path = this._setting_texture_path_input.text;
        this._texture_base_path = module_path.."/Texture/"..this._setting_texture_path_input.text;

        g_GConfig.SetConfig("unit_width", unit_width);
        g_GConfig.SetConfig("unit_height", unit_height);
        g_GConfig.SetConfig("unit_left", unit_left);
        g_GConfig.SetConfig("unit_right", unit_right);
        g_GConfig.SetConfig("unit_top", unit_top);
        g_GConfig.SetConfig("unit_bottom", unit_bottom);
        g_GConfig.SetConfig("project_name", this._setting_project_name_input.text);
        g_GConfig.SetConfig("texture_path", this._setting_texture_path_input.text);
        g_GConfig.SetConfig("empty_name", this._unit_empty_name_input.text);
        g_GConfig.SetConfig("data_path", this._setting_data_path_input.text);
        
        this._setting_dialog.visible = false;
        this._control = new ALittle.ControlSystem(this._setting_project_name_input.text);
    
        this.RefreshTexture();
        this.RefreshFile();
    }
    
    //文件列表////////////////////////////////////////////////////////////////////////
    private fun HandleFileNewClick(ALittle.UIClickEvent event)
    {
        var x, y = event.target.LocalToGlobal();
        g_IDETool.ShowRename(bind(this.HandleNewFile, this), "", x, y + event.target.height, 200);
    }

    private fun HandleNewFile(string file_name)
    {
        if (file_name == "") return;

        var check, error = IDEUtility_CheckResourceName(file_name);
        if (!check)
        {
            g_IDETool.ShowNotice("提示", error);
            return;
        }

        var file_path = this._file_base_path.."/"..file_name..".map";
        if (ALittle.File_GetFileAttr(file_path) != null)
        {
            g_IDETool.ShowNotice("提示", "文件已存在");
            return;
        }

        // 创建一个文件
        ALittle.File_WriteTextToFile("", file_path);
    }

    private fun HandleSelectFile(ALittle.UIChangedEvent event)
    {
        if (!event.target.selected) return;

        this.SaveCurEdit(true);

        var info:FileSelectItemInfo = event.target._user_data;
        if (info.map_data == null)
        {
            var rflct = reflect<MapData>;
            // 打开文件
            var factory = new lua.__CPPAPIMessageReadFactory();
            if (!factory.ReadFromStdFile(info.file_path)) return;

            // 获取反射信息
            var invoke_info = ALittle.CreateMessageInfo(rflct.name);
            if (invoke_info == null) return;

            // 反序列化
            info.map_data = ALittle.PS_ReadMessage(factory, invoke_info, null, factory.GetDataSize());

            // 构建信息
            info.map_info = new MapInfo();
            info.map_info.floor_list = new List<FloorInfo>();
            for (var index, floor_data in info.map_data.floor_list)
            {
                var floor_info = new FloorInfo();
                floor_info.data = floor_data;
                floor_info.parent = info;
                floor_info.visible = true;
                ALittle.List_Push(info.map_info.floor_list, floor_info);
            }
        }

        // 创建相关界面
        this.StartEdit(info);
    }

    public fun RefreshFile()
    {
        this._file_cache_list = new List<FileSelectItemInfo>();
        this._file_radio_group = new ALittle.TextRadioButtonGroup();
        this._file_scroll_screen.RemoveAllChild();

        if (ALittle.File_GetFileAttr(this._file_base_path) == null) return;

        var file_list = ALittle.File_GetFileListByDir(this._file_base_path);
        ALittle.List_Sort(file_list);

        for (var index, file_path in file_list)
        {
            var rel_path = ALittle.String_Sub(file_path, ALittle.String_Len(this._file_base_path) + 2);
            
            var info = new FileSelectItemInfo();
            info.item = g_Control.CreateControl{ALittle.TextRadioButton}("ide_common_item_radiobutton", info);
            info.item._user_data = info;
            info.item.group = this._file_radio_group;
            info.item.text = ALittle.File_GetJustFileNameByPath(rel_path);
            info.upper_file_name = ALittle.String_Upper(info.item.text);
            info.file_path = file_path;
            info.save = true;
            info.item.AddEventListener(this, this.HandleSelectFile);

            info.item.drag_trans_target = this._file_scroll_screen;

            this._file_cache_list[index] = info;
        }

        this.HandleFileSearchClick(null);
    }

    public fun HandleFileSearchClick(ALittle.UIEvent event)
    {
        this._file_scroll_screen.RemoveAllChild();
        var upper_key = ALittle.String_Upper(this._file_search_key.text);
        
		// 遍历列表
		for (var index, info in this._file_cache_list)
		{
            if (ALittle.String_Find(info.upper_file_name, upper_key) != null)
                this._file_scroll_screen.AddChild(info.item);
		}
    }
    
    //纹理列表////////////////////////////////////////////////////////////////////////
    public fun RefreshTexture()
    {
        this._image_cache_list = new List<ImageSelectItemInfo>();
        this._texture_scroll_list.RemoveAllChild();

        if (ALittle.File_GetFileAttr(this._texture_base_path) == null) return;

        var file_list = ALittle.File_GetFileListByDir(this._texture_base_path);
        ALittle.List_Sort(file_list);

        for (var index, file_path in file_list)
        {
            var rel_path = ALittle.String_Sub(file_path, ALittle.String_Len(this._texture_base_path) + 2);
            var texture_name = this._tex_name_base_path.."/"..rel_path;

            var info = new ImageSelectItemInfo();
            info.item = g_Control.CreateControl{ALittle.DisplayLayout}("ide_image_select_item", info);
            info.button._user_data = info;
			info.image.SetTextureCut(file_path, ALittle.Math_Floor(info.frame.width), ALittle.Math_Floor(info.frame.height), true);
            info.name.text = ALittle.File_GetJustFileNameByPath(rel_path);
            info.upper_file_name = ALittle.String_Upper(info.name.text);

            info.button.drag_trans_target = this._texture_scroll_list;

            this._image_cache_list[index] = info;
        }

        this.HandleTextureSearchClick(null);
    }

    public fun HandleTextureSearchClick(ALittle.UIEvent event)
    {
        this._texture_scroll_list.RemoveAllChild();
        var upper_key = ALittle.String_Upper(this._texture_search_key.text);
        
        var col_count = ALittle.Math_Floor(this._texture_scroll_list.width / this._real_size);
		var remain_count = 0;
		var container:ALittle.Linear = null;
		// 遍历列表
		for (var index, info in this._image_cache_list)
		{
            if (ALittle.String_Find(info.upper_file_name, upper_key) != null)
            {
			    if (remain_count == 0)
			    {
				    container = new ALittle.Linear(g_Control);
				    container.type = ALittle.UIEnumTypes.TYPE_H;
				    container.height = info.item.height;
				    this._texture_scroll_list.AddChild(container);
				    container.AddChild(info.item);
	
				    remain_count = col_count - 1;
			    }
			    else
			    {
				    remain_count = remain_count - 1;
				    container.AddChild(info.item);
			    } 
            }
		}
    }

    //图层列表//////////////////////////////////////////////////////////////////////
    private fun HandleNewFloorClick(ALittle.UIClickEvent event)
    {
        if (this._cur_edit == null)
        {
            g_IDETool.ShowNotice("提示", "请先打开文件");
            return;
        }

        var x, y = event.target.LocalToGlobal();
        g_IDETool.ShowRename(bind(this.HandleNewFloor, this), "", x, y + event.target.height, 200);
    }

    // 处理新增图层
    private fun HandleNewFloor(string name)
    {
        if (name == "") return;

        var floor_data = new FloorData();
        floor_data.name = name;
        var floor_info = new FloorInfo();
        floor_info.data = floor_data;
        floor_info.parent = this._cur_edit;
        floor_info.visible = true;

        ALittle.List_Insert(this._cur_edit.map_data.floor_list, 1, floor_data);
        ALittle.List_Insert(this._cur_edit.map_info.floor_list, 1, floor_info);

        var group:ALittle.TextRadioButtonGroup = null;
        if (this._floor_scroll_screen.child_count > 0)
            group = this._floor_scroll_screen.childs[1].group;
        else
            group = new ALittle.TextRadioButtonGroup();
        
        var info = new FloorSelectItemInfo();
        info.select_item = g_Control.CreateControl{ALittle.TextRadioButton}("ide_common_item_radiobutton", info);
        info.select_item._user_data = info;
        info.select_item.group = group;
        info.select_item.text = floor_info.data.name;
        info.select_item.AddEventListener(this, this.HandleSelectFloor);
        info.select_item.AddEventListener(this, this.HandleFloorRButtonDown);
        info.floor_info = floor_info;
        this._floor_scroll_screen.AddChild(info.select_item, 1);

        this.SaveCurEdit(false);
    }
    
    private fun HandleSelectFloor(ALittle.UIChangedEvent event)
    {
        var info:FloorSelectItemInfo = event.target._user_data;

        if (event.target.selected)
            info.edit_item.alpha = 1;
        else
            info.edit_item.alpha = 0.5;
    }

    private fun HandleFloorRButtonDown(ALittle.UIRButtonDownEvent event)
    {
        // 创建图层右键菜单
        if (this._floor_right_menu == null)
            this._floor_right_menu = g_Control.CreateControl{ALittle.DisplayLayout}("ide_floor_right_menu", this);
        this._floor_right_menu.x = A_UISystem.mouse_x;
        this._floor_right_menu.y = A_UISystem.mouse_y;
        A_LayerManager.ShowFromRight(this._floor_right_menu);

        // 传递数据
        this._floor_right_menu._user_data = event.target._user_data;

        // 显示是否禁用
        var info:FloorSelectItemInfo = event.target._user_data;
        this._floor_right_hide_btn.disabled = !info.floor_info.visible;
        this._floor_right_show_btn.disabled = info.floor_info.visible;
    }

    private fun HandleFloorRightMenu(ALittle.UIClickEvent event)
    {
        var info:FloorSelectItemInfo = this._floor_right_menu._user_data;
        this._floor_right_menu._user_data = null;

        A_LayerManager.HideFromRight(this._floor_right_menu);
        
        // 获取下标
        var index = this._floor_scroll_screen.GetChildIndex(info.select_item);
        
        if (event.target.text == "上移")
        {
            // 移动控件
            this._floor_scroll_screen.SetChildIndex(info.select_item, index - 1);
            this._edit_scroll_screen.SetChildIndex(info.edit_item, index - 1);
            // 移动数据
            var floor_data = info.floor_info.parent.map_data.floor_list[index];
            ALittle.List_Remove(info.floor_info.parent.map_data.floor_list, index);
            ALittle.List_Insert(info.floor_info.parent.map_data.floor_list, index - 1, floor_data);
            var floor_info = info.floor_info.parent.map_info.floor_list[index];
            ALittle.List_Remove(info.floor_info.parent.map_info.floor_list, index);
            ALittle.List_Insert(info.floor_info.parent.map_info.floor_list, index - 1, floor_info);

            this.SaveCurEdit(false);
        }
        elseif (event.target.text == "下移")
        {
            // 移动控件
            this._floor_scroll_screen.SetChildIndex(info.select_item, index + 1);
            this._edit_scroll_screen.SetChildIndex(info.edit_item, index + 1);
            // 移动数据
            var floor_data = info.floor_info.parent.map_data.floor_list[index];
            ALittle.List_Remove(info.floor_info.parent.map_data.floor_list, index);
            ALittle.List_Insert(info.floor_info.parent.map_data.floor_list, index + 1, floor_data);
            var floor_info = info.floor_info.parent.map_info.floor_list[index];
            ALittle.List_Remove(info.floor_info.parent.map_info.floor_list, index);
            ALittle.List_Insert(info.floor_info.parent.map_info.floor_list, index + 1, floor_info);

            this.SaveCurEdit(false);
        }
        elseif (event.target.text == "隐藏")
        {
            info.select_item.text = info.floor_info.data.name.."(隐藏)";
            info.edit_item.visible = false;
            info.floor_info.visible = false;
        }
        elseif (event.target.text == "显示")
        {
            info.select_item.text = info.floor_info.data.name;
            info.edit_item.visible = true;
            info.floor_info.visible = true;
        }
        elseif (event.target.text == "删除")
        {
            // 删除Item
            this._floor_scroll_screen.RemoveChild(info.select_item);
            this._edit_scroll_screen.RemoveChild(info.edit_item);
            // 移除数据
            ALittle.List_Remove(info.floor_info.parent.map_data.floor_list, index);
            ALittle.List_Remove(info.floor_info.parent.map_info.floor_list, index);

            this.SaveCurEdit(false);
        }
    }

    //编辑区////////////////////////////////////////////////////////////////////////
    public fun StartEdit(FileSelectItemInfo file_info)
    {
        // 设置当前编辑信息
        this._cur_edit = file_info;
        // 设置标题
        this._edit_title.text = file_info.item.text;
        // 清理图层
        this._floor_scroll_screen.RemoveAllChild();
        // 清理编辑器
        this._edit_scroll_screen.RemoveAllChild();

        // TODO 构建底图网格
        var grid_layer = new ALittle.DisplayLayout(g_Control);
        for (var x = 0; x < file_info.map_data.x_max; 1)
        {
            for (var y = 0; y < file_info.map_data.y_max; 1)
            {
                
            }
        }
        for (var x = file_info.map_data.nx_max; x < 0; 1)
        {
            for (var y = 0; y < file_info.map_data.y_max; 1)
            {
                
            }
        }
        this._edit_scroll_screen.AddChild(grid_layer);

        // 构建图层和编辑区
        var group = new ALittle.TextRadioButtonGroup();
        for (var index, floor_info in this._cur_edit.map_info.floor_list)
        {
            var info = new FloorSelectItemInfo();
            info.select_item = g_Control.CreateControl{ALittle.TextRadioButton}("ide_common_item_radiobutton", info);
            info.select_item._user_data = info;
            info.select_item.group = group;
            info.select_item.text = floor_info.data.name;
            info.select_item.AddEventListener(this, this.HandleSelectFloor);
            info.select_item.AddEventListener(this, this.HandleFloorRButtonDown);
            info.floor_info = floor_info;
            this._floor_scroll_screen.AddChild(info.select_item);

            info.edit_item = this.CreateFloorEdit(info);
            this._floor_scroll_screen.AddChild(info.edit_item);
        }
    }
    
    private fun CreateFloorEdit(FloorSelectItemInfo info) : ALittle.DisplayLayout
    {
        // 填充格子
        for (var row, col_info in info.floor_info.data.data)
        {
            for (var col, cell in col_info)
            {

            }
        }
        return null;
    }

    //其他////////////////////////////////////////////////////////////////////////

    // 标记为未保存
    private fun SaveCurEdit(bool save)
    {
        if (this._cur_edit == null) return;
        if (this._cur_edit.save == save) return;

        if (!save)
        {
            this._cur_edit.save = false;
            this._edit_title.text = this._cur_edit.item.text.."*";
            return;
        }
        
        var rflct = reflect<MapData>;
        // 打开文件
        var factory = new lua.__CPPAPIMessageWriteFactory();
        // 获取反射信息
        var invoke_info = ALittle.CreateMessageInfo(rflct.name);
        if (invoke_info == null) return;

        // 反序列化
        ALittle.PS_WriteMessage(factory, invoke_info, null, this._cur_edit.map_data);
        
        // 保存到文件
        if (!factory.WriteToStdFile(this._cur_edit.file_path))
        {
            g_IDETool.ShowNotice("提示", "保存失败");
            return;
        }

        this._cur_edit.save = true;
        this._edit_title.text = this._cur_edit.item.text;
    }

    // 处理快捷键
    public fun HandleKeyDown(int mod, int sym, int scancode)
    {
        if (sym == 115 && ALittle.BitAnd(mod, ALittle.UIEnumTypes.KMOD_CTRL) != 0)
        {
            this.SaveCurEdit(true);
        }
    }

    //释放
    public fun Shutdown()
    {
    }
}
    
public var g_GCenter = new GCenter();