
namespace ABrowser;

protected class OPSTool
{
	private OPSCenter _center;

	private OPSWeakNotice _weak_notice;
	private OPSCenterWeakNotice _warn_notice;
	private OPSCenterWeakNotice _center_weak_notice;
	private OPSDate _date_select;
	private ALittle.DisplayObject _ccp_menu;

    public ctor(OPSCenter center)
    {
    	this._center = center;
    }
    
    // 头部弱提示框
    public fun ShowWeakNotice(string content, [Nullable] bool succeed)
    {
    	if (this._weak_notice == null)
    		this._weak_notice = new OPSWeakNotice(this._center);

    	this._weak_notice.Show(content, succeed);
    }
    
    // 中间弱提示框
    public fun ShowCenterWeakNotice(string content, bool succeed)
    {
    	if (this._center_weak_notice == null)
    		this._center_weak_notice = new OPSCenterWeakNotice(this._center);

    	this._center_weak_notice.Show(content, succeed);
    }

    //////////////////////////////////////////////////////////////////////////////-
    // 显示时间选择插件
    public fun ShowDateSelect(ALittle.DisplayObject target, string select_type, int default_hour, int default_min, int default_sec)
    {
    	if (this._date_select == null)
    		this._date_select = g_Control.CreateControl{OPSDate}("ops_date");

    	this._date_select.Show(target, target.text, select_type, default_hour, default_min, default_sec);
    }
    //////////////////////////////////////////////////////////////////////////////-
    // 复制剪切黏贴
    public fun ShowCopyCutPasteMenu(string text, ALittle.DisplayObject target)
    {
    	if (this._ccp_menu == null)
    		this._ccp_menu = g_Control.CreateControl{ALittle.DisplayObject}("ops_ccp_menu", this);

    	this._ccp_menu.x = A_UISystem.mouse_x;
    	this._ccp_menu.y = A_UISystem.mouse_y;

    	var user_data = new CopyCutPasteUserData();
    	user_data.text = text;
    	user_data.target = target;
    	this._ccp_menu._user_data = user_data;
    	A_LayerManager.ShowFromRight(this._ccp_menu, false);
    }
    
    public fun HandleCopyCutPasteMenuCopy(ALittle.UIEvent event)
    {
		var user_data:CopyCutPasteUserData = this._ccp_menu._user_data;
    	this._ccp_menu._user_data = null;
		if (user_data.text != null && user_data.text != "")
			ALittle.System_SetClipboardText(user_data.text);
    	A_LayerManager.HideFromRight(this._ccp_menu);
    }
    
    public fun HandleCopyCutPasteMenuCut(ALittle.UIEvent event)
    {
		var user_data:CopyCutPasteUserData = this._ccp_menu._user_data;
    	this._ccp_menu._user_data = null;
		if (user_data.target != null && cast<Map<string, Functor<(ALittle.DisplayObject)>>>(user_data.target)["CutText"] != null)
			cast<Map<string, Functor<(ALittle.DisplayObject)>>>(user_data.target)["CutText"](user_data.target);
    	A_LayerManager.HideFromRight(this._ccp_menu);
    }
    
    public fun HandleCopyCutPasteMenuPaste(ALittle.UIEvent event)
    {
		var user_data:CopyCutPasteUserData = this._ccp_menu._user_data;
    	this._ccp_menu._user_data = null;
		if (user_data.target != null && cast<Map<string, Functor<(ALittle.DisplayObject)>>>(user_data.target)["PasteText"] != null)
			cast<Map<string, Functor<(ALittle.DisplayObject)>>>(user_data.target)["PasteText"](user_data.target);
    	A_LayerManager.HideFromRight(this._ccp_menu);
    }
}