
namespace ABrowser;

protected struct OPSPermission
{
	string name;
	string value;
}

protected struct AOPSPermission
{
	Map<string, List<OPSPermission>> permission_map;
}

protected struct OPSRoleSelectedInfo
{
	bool selected;
	string value;
}

protected struct OPSTreeItemUserData
{
	string key;
	string value;
}

protected class OPSRoleDialog : OPSBaseDialog
{
	private Map<string, string> _selected_permission_map;
	private Map<string, OPSRoleSelectedInfo> _result_map;

	private ALittle.DisplayObject _input;
	private ALittle.ScrollList _scroll_list;
	private ALittle.DisplayObject _title;
	private ALittle.DisplayObject _input_name;

    public ctor(ALittle.ControlSystem ctrl_sys)
    {
    	this._result_map = new Map<string, OPSRoleSelectedInfo>();	// 结果表
    	this._selected_permission_map = new Map<string, string>();	// 已经选中的列表
    }
    
    // 清除数据
    public fun Clear()
    {
    	this._input.text = "";
    	this._result_map = new Map<string, OPSRoleSelectedInfo>();
    	this._scroll_list.RemoveAllChild();
    }
    
    public async fun Show()
    {
    	// 设置角色名
    	if (this._data != null)
    	{
    		this._input.text = this._data["role_name"];
    		this.selected_permission_map = this._data["permission"];
    
    		this._title.text = "修改角色";
    	}
    	else
    		this._title.text = "新建角色";

    	// 加载查询数据
    	var error, content = this._center.login_logic.HttpPostRequest("QOPSPermission", new Map<string, any>());
    	if (error != null)
    	{
    		this._center.tool_logic.ShowCenterWeakNotice("权限数据获取失败，请检查网络或关闭360等管理软件", false);
    		return;
    	}
    
    	// 获取内容
    	var result, msg:Map<string, any> = tcall(ALittle.String_JsonDecode, content);
       	if (result != null)
    	{
    		this._center.tool_logic.ShowCenterWeakNotice("返回数据错误，请联系管理员", false);
       		return;
       	}
       	if (msg["error"] != null) { this._center.tool_logic.ShowCenterWeakNotice(msg["error"], false); return; }
    
       	this._scroll_list.RemoveAllChild();
    	this._scroll_list.clip_atonce = false;

		var json = cast<AOPSPermission>(msg);
    	for (var k_1, v_1 in json.permission_map)
    	{
			var tree = g_Control.CreateControl{OPSTreePermission}("ops_tree_permission");
    		tree.text = k_1;
    		tree.drag_trans_target = this._scroll_list;
    		tree.AddEventListener(this, this.HandleTreeHeadChange);
    
    		tree._user_data = v_1;
    		for (var k_2, v_2 in v_1)
    		{
				var item = g_Control.CreateControl{OPSTreeBodyPermission}("ops_tree_body_permission");
    			item.text = v_2.name;
    			item.drag_trans_target = this._scroll_list;
    			item.AddEventListener(this, this.HandleTreeBodyChang);
    			tree.AddItem(item);

				var user_data = new OPSTreeItemUserData();
    			item._user_data = user_data;
    			user_data.key = v_2.name;
    			user_data.value = v_2.value;
    
    			//如果是修改，将主角已经有的权限勾选
    			if (this._data != null)
    			{
    				if (this._selected_permission_map[v_2.value] == v_2.value)
    					item.selected = true;
    				else
    					item.selected = false;
    			}
    		}
    		this._scroll_list.AddChild(tree);
    	}
    	// 设置为立即裁剪
    	this._scroll_list.clip_atonce = true;
    
    	this.ShowFromModal();
    }
    
    // 禁用输入框
    public set disabled(bool value)
    {
    	this._input.disabled = value;
    	if (value)
    	{
    		this._input_name.red = 0.7;
    		this._input_name.green = 0.7;
    		this._input_name.blue = 0.7;
    	}
    	else
    	{
    		this._input_name.red = 0.4;
    		this._input_name.green = 0.4;
    		this._input_name.blue = 0.4;
    	}
    }
    
    //已经选中的列表
    public set selected_permission_map(string list)
    {
    	// 讲权限字符串变成数组
    	this._selected_permission_map = new Map<string, string>();
    	var temp = ALittle.String_Split(list, ",");
    	for (var k, v in temp)
    		this._selected_permission_map[v] = v;
    }

    //////////////////////////////////////////////////////////////////////////
    public fun OtherParam(Map<string, any> param)
    {
    	var role_permission = new Map<string, bool>();
    	for (var k, v in this._result_map)
    	{
    		if (v.selected)
    			role_permission[v.value] = true;
    	}
    	if (this._data != null) param["role_id"] = this._data["role_id"];
    	param["role_permission"] = role_permission;
    	param["role_name"] = this._input.text;
    }
    
    public fun HandleTreeHeadChange(OPSTreeCheckChangeEvent event)
    {
    	var object = event.target;
    	var selected = event.selected;
		var list:List<OPSPermission> = object._user_data;
    	if (selected)
    	{
    		for (var k, v in list)
    		{
    			var info = new OPSRoleSelectedInfo();
    			info.selected = true;
    			info.value = v.value;
    			this._result_map[v.value] = info;
    		}
    	}
    	else
    	{
    		for (var k, v in list)
    		{
    			var info = new OPSRoleSelectedInfo();
    			info.selected = false;
    			info.value = v.value;
    			this._result_map[v.value] = info;
    		}
    	}
    }
    
    public fun HandleTreeBodyChang(OPSTreeCheckChangeEvent event)
    {
    	var object = event.target;
    	var selected = event.selected;
		var info:OPSTreeItemUserData = object._user_data;
    	if (selected)
    	{
    		if (this._result_map[info.value] != null)
    			this._result_map[info.value].selected = selected;
    		else
    		{
    			this._result_map[info.value] = new OPSRoleSelectedInfo();
    			this._result_map[info.value].selected = selected;
    			this._result_map[info.value].value = info.value;
    		}
    	}
    	else
    	{
    		if (this._result_map[info.value] != null)
    			this._result_map[info.value].selected = selected;
    		else
    		{
    			this._result_map[info.value] = new OPSRoleSelectedInfo();
    			this._result_map[info.value].selected = selected;
    			this._result_map[info.value].value = info.value;
    		}
    	}
    	this.CheckSelectAll(event.target);
    }
    
    // 检查是否全选
    public fun CheckSelectAll(ALittle.DisplayObject target)
    {
		var parent = cast<OPSTreePermission>(target._logic_parent);
    	var childs = parent.body.childs;
    	for (var i, v in childs)
    	{
    		if (v.selected == false)
    		{
    			parent.selected = false;
    			return;
    		}
    	}
    	parent.selected = true;
    }
}
////////////////////////////////////////////////////////////////////-

struct OPSTreeCheckChangeEvent : ALittle.UIEvent
{
	bool selected;
}

class OPSTreePermission : OPSTree
{
    public fun HandleHeadChenkButtonChange(ALittle.UIEvent event)
    {
    	var object = event.target;
    	var selected = object.selected;
    	var childs = this._body.childs;
    	if (selected)
    	{
    		for (var i, v in childs)
    			v.selected = true;
    	}
    	else
    	{
    		for (var i, v in childs)
    			v.selected = false;
    	}

    	var e = new OPSTreeCheckChangeEvent();
    	e.target = this;
    	e.selected = selected;
    	this.DispatchEvent(e);
    }
}

class OPSTreeBodyPermission : ALittle.DisplayLayout
{
	private ALittle.DisplayObject _body_btn;
	private ALittle.DisplayObject _body_chk;
    
    public set text(string value)
    {
    	this._body_btn.text = value;
    }
    
    public set selected(bool value)
    {
    	this._body_chk.selected = value;

    	var e = new OPSTreeCheckChangeEvent();
    	e.target = this;
    	e.selected = this._body_chk.selected;
    	this.DispatchEvent(e);
    }
    public get selected() : bool
    {
    	return this._body_chk.selected;
    }
    
    public set drag_trans_target(ALittle.DisplayObject target)
    {
    	this._body_btn.drag_trans_target = target;
    }
    
    public fun HandleBodyClick(ALittle.UIEvent event)
    {
    	this._body_chk.selected = !this._body_chk.selected;

    	var e = new OPSTreeCheckChangeEvent();
    	e.target = this;
    	e.selected = this._body_chk.selected;
    	this.DispatchEvent(e);
    }
}