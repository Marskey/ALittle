
namespace ABrowser;

class OPSRequestDialog : OPSBaseDialog
{
	private ALittle.ScrollList _container;
	private ALittle.DisplayLayout _layer;
	private ALittle.Grid3 _g3;

    public ctor(ALittle.ControlSystem ctrl_sys)
    {
    }
    
    // 显示对话框
    public async fun Show()
    {
    	var param = new Map<string, any>();
        
    	var method = this._method;
    	if (this._dialog_config.module_invoke)
    	{
    		param["__method"] = this._method;
    		method = "QOPSInvoke";
    	}
    	var error, content = this._center.login_logic.HttpPostRequest(method, param);
    	if (error != null)
    	{
    		this._center.tool_logic.ShowCenterWeakNotice("调用失败，请检查网络或关闭360等管理软件", false);
    		return;
    	}
    
    	// 获取内容
    	var result, msg:Map<string, any> = tcall(ALittle.String_JsonDecode, content);
       	if (result != null)
       	{
    		this._center.tool_logic.ShowCenterWeakNotice("返回数据错误，请联系管理员", false);
       		return;
       	}
       	if (msg["error"] != null) { this._center.tool_logic.ShowCenterWeakNotice(msg["error"], false); return; }
       	this._center.tool_logic.ShowWeakNotice("操作成功", true);

    	// 创建控件
    	var ctrl_list = new List<OPSCOMPBase>();
    	var ctrl_list_count = 0;
    	for (var k, field_config in this._dialog_config.field)
    	{
    		var clazz = cast<Map<string, any>>(_G["ABrowser"])[field_config.input_type];
    		if (clazz != null)
    		{
    			++ ctrl_list_count;
    			ctrl_list[ctrl_list_count] = ALittle.NewObject(clazz, g_Control, this._center, field_config, msg[field_config.input_param]);
    		}
    	}
    
    	this._container.RemoveAllChild();
    	var max_width = this._container.width;
    	for (var k, control in ctrl_list)
    	{
    		if (control.width > max_width) max_width = control.width;
    		this._container.AddChild(control);
    	}
    
    	// 调整对话框尺寸
		var dialog_width = 0.0;
    	dialog_width = dialog_width + max_width;
    	dialog_width = dialog_width + this._container.width_value;
    	dialog_width = dialog_width + this._layer.width_value;
    	this.height = dialog_width;

		var dialog_height = 0.0;
    	dialog_height = dialog_height + this._g3.up_size;
    	dialog_height = dialog_height + this._g3.down_size;
    	dialog_height = dialog_height + this._container.real_height;
    	dialog_height = dialog_height + this._container.height_value;
    	dialog_height = dialog_height + this._layer.height_value;
    	if (dialog_height > A_UISystem.view_height) dialog_height = A_UISystem.view_height;
    	this.height = dialog_height;
    
    	this.ShowFromModal();
    }
}