
namespace ABrowser;

protected struct OPSCOMPStringEditLinkInfo
{
	ALittle.TextEdit _text_edit;
	ALittle.DisplayObject _background;
}

protected class OPSCOMPStringEdit : OPSCOMPBase
{
	private OPSCenter _center;
	private OPSDialogFieldConfig _field_config;
	private Map<string, any> _data;

	private ALittle.DisplayObject _text_ctrl;
	private OPSCOMPStringEditLinkInfo _input_link;
	private ALittle.DisplayObject _input_ctrl;

    public ctor(ALittle.ControlSystem ctrl_sys, OPSCenter center, OPSDialogFieldConfig field_config, Map<string, any> data)
    {
    	this._center = center;
    	this._field_config = field_config;
    	this._data = data;
    
    	// 创建文本控件
    	this._text_ctrl = g_Control.CreateControl{ALittle.DisplayObject}("ops_common_text");
    	// 创建输入框控件
    	this._input_link = new OPSCOMPStringEditLinkInfo();
    	this._input_ctrl = g_Control.CreateControl{ALittle.DisplayObject}("ops_common_edit", this._input_link);
    	this._input_ctrl.y_type = ALittle.UIEnumTypes.POS_ALIGN_CENTER;
    	this._input_link._text_edit.AddEventListener(this, this.HandleTextEditFocusin);
    	this._input_link._text_edit.AddEventListener(this, this.HandleTextEditFocusout);
    
    	this.UpdateConfig();
    }
    
    ////////////////////////////////////////////////////////////////////-
    // 获取数据
    public fun GetData() : string, any
    {
    	return this._field_config.invoke_param, this._input_link._text_edit.text;
    }

    public fun GetCopyString() : string
    {
        return this._input_ctrl.text;
    }

    //////////////////////////////////////////////////////////////////////////////////
    // 更新配置文件
    public fun UpdateConfig()
    {
    	// 根据配置文件刷新容器
    	this.RefreshConfig();
    	// 设置数据
    	this.RefreshDataInfo();
    }
    
    public fun RefreshConfig()
    {
    	var config = this._field_config;
    	// 记录容器大小
		var width:double = null;
		var height:double = null;
    
    	// 输入框名称
    	if (config.name == null)
    		this._text_ctrl.text = "";
    	else
    		this._text_ctrl.text = config.name;
    
    	// 如果存在数据就填写数据
    	this._input_ctrl.x = this._text_ctrl.width;
    	if (config.width == null)
    	   	this._input_ctrl.width = 150;
    	else
    		this._input_ctrl.width = config.width;

    	if (config.height == null)
    	   	this._input_ctrl.height = 70;
    	// 默认信息
    	this._input_link._text_edit.text = config.default_value;
    
    	// 设置容器位置和大小并添加到容器
    	if (config.x == null) this.x = 0;
    	else this.x = config.x;
    	if (config.y == null) this.y = 0;
    	else this.y = config.y;
    	this.width = this._input_ctrl.x + this._input_ctrl.width;
    	this.height = this._input_ctrl.height;
    	if (config.name != null) this.AddChild(this._text_ctrl);
    	this.AddChild(this._input_ctrl);
    }
    
    public fun RefreshDataInfo()
    {
        if (this._data == null) return;
    	this._input_link._text_edit.text = this._data[this._field_config.input_param];
    }
    
    ////////////////////////////////////////////////////////////////////////////////////
    // 输入框特效
    public fun HandleTextEditFocusin(ALittle.UIFocusInEvent event)
    {
    	A_LoopSystem.AddUpdater(new ALittle.LoopLinear(this._input_link._background, "alpha", 1, 200,0));
    }
    
    public fun HandleTextEditFocusout(ALittle.UIFocusOutEvent event)
    {
    	A_LoopSystem.AddUpdater(new ALittle.LoopLinear(this._input_link._background, "alpha", 0, 200,0));
    }
}