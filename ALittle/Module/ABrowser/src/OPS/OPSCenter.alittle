
namespace ABrowser;

protected var g_OPSRequire:bool;

protected class OPSCenter
{
	private OPSConfig _config;                  // 总配置文件
	private ALittle.IJsonConfig _config_user;  // 模块配置文件
	private ALittle.ControlSystem _control;     // 模块ControlSystem
	private string _module_base_path;           // 模块路径
	private string _module_base_pathex;         // 绝对模块路径
	private ALittle.DisplayLayout _layer;       // 层
	
	private ALittle.DisplayLayout _main_layer;      // 主层
	private ALittle.DisplayLayout _dialog_layer;    // 对话框层
	private ALittle.DisplayLayout _modal_layer;     // 模态层
	private ALittle.DisplayLayout _tip_layer;       // tip层
	
	private OPSBaseDialogManager _dialog_logic;     // 对话框管理器
	private OPSMain _main_logic;                    // 主界面管理器
	private OPSTool _tool_logic;                    // 工具界面管理器
	private OPSLogin _login_logic;                  // 登录管理器
	
	private string _temp_path;					// 临时数据文件夹

	public await static RequireScript()
	{
		if (g_OPSRequire == true) return;
		g_OPSRequire = true;
		////////////////////////////////////////////////////////////
        alittle.Require(g_ScriptBasePath.."OPS/OPSLogin");
        alittle.Require(g_ScriptBasePath.."OPS/OPSMain");
        //TOOL//////////////////////////////////////////////////////////
        alittle.Require(g_ScriptBasePath.."OPS/Tool/OPSWeakNotice");
        alittle.Require(g_ScriptBasePath.."OPS/Tool/OPSCenterWeakNotice");
        alittle.Require(g_ScriptBasePath.."OPS/Tool/OPSWeakNotice");
        alittle.Require(g_ScriptBasePath.."OPS/Tool/OPSTool");
        alittle.Require(g_ScriptBasePath.."OPS/Tool/OPSTree");
        
        //PC//////////////////////////////////////////////////////////
        alittle.Require(g_ScriptBasePath.."OPS/Tool/OPSLoading");
        alittle.Require(g_ScriptBasePath.."OPS/Tool/OPSDate");
        
        //PC//////////////////////////////////////////////////////////
        alittle.Require(g_ScriptBasePath.."OPS/Dialog/Control/OPSCOMPBase");
        alittle.Require(g_ScriptBasePath.."OPS/Dialog/Control/OPSCOMPDropDownSelect");
        alittle.Require(g_ScriptBasePath.."OPS/Dialog/Control/OPSCOMPSelectInput");
        alittle.Require(g_ScriptBasePath.."OPS/Dialog/Control/OPSCOMPStringEdit");
        alittle.Require(g_ScriptBasePath.."OPS/Dialog/Control/OPSCOMPStringInput");
        alittle.Require(g_ScriptBasePath.."OPS/Dialog/Control/OPSCOMPNumberInput");
        alittle.Require(g_ScriptBasePath.."OPS/Dialog/Control/OPSCOMPTimeSelect");
        
        alittle.Require(g_ScriptBasePath.."OPS/Dialog/OPSBaseDialog");
        alittle.Require(g_ScriptBasePath.."OPS/Dialog/OPSChoiceDialog");
        alittle.Require(g_ScriptBasePath.."OPS/Dialog/OPSCustomDialog");
        alittle.Require(g_ScriptBasePath.."OPS/Dialog/OPSRoleDialog");
        alittle.Require(g_ScriptBasePath.."OPS/Dialog/OPSRequestDialog");
        alittle.Require(g_ScriptBasePath.."OPS/Dialog/OPSDeleteDialog");
        
        //PC//////////////////////////////////////////////////////////
        alittle.Require(g_ScriptBasePath.."OPS/TableData/Control/OPSTDBase");
        alittle.Require(g_ScriptBasePath.."OPS/TableData/Control/OPSTDDropDownSelect");
        alittle.Require(g_ScriptBasePath.."OPS/TableData/Control/OPSTDStringInput");
        alittle.Require(g_ScriptBasePath.."OPS/TableData/Control/OPSTDNumberInput");
        alittle.Require(g_ScriptBasePath.."OPS/TableData/Control/OPSTDStringOutput");
        alittle.Require(g_ScriptBasePath.."OPS/TableData/Control/OPSTDTimeSelect");
        
        alittle.Require(g_ScriptBasePath.."OPS/TableData/OPSTableDataMenu");
        alittle.Require(g_ScriptBasePath.."OPS/TableData/OPSTableDataRichGroup");
        alittle.Require(g_ScriptBasePath.."OPS/TableData/OPSTableDataOrderButton");
        alittle.Require(g_ScriptBasePath.."OPS/TableData/OPSTableData");
        alittle.Require(g_ScriptBasePath.."OPS/TableData/OPSTableDataHead");
        alittle.Require(g_ScriptBasePath.."OPS/TableData/OPSTableDataSearch");
        alittle.Require(g_ScriptBasePath.."OPS/TableData/OPSTableDataTail");
        alittle.Require(g_ScriptBasePath.."OPS/TableData/OPSTableDataQuery");
        alittle.Require(g_ScriptBasePath.."OPS/TableData/OPSTableDataSetData");
	}

	public await fun Start(ALittle.DisplayLayout layer, ALittle.ControlSystem control, ALittle.IJsonConfig config_user, string base_path
					, string login_ip, int login_port, string module_name)
	{
		OPSCenter.RequireScript();

    	this._module_base_path = base_path;
    	this._module_base_pathex = ALittle.File_BaseFilePath()..base_path;

		this.ReloadConfig();

    	this._config_user = config_user; // 用户配置文件
    	this._control = control; 		// 模块的ControlSystem
    	this._layer = layer; 			// 模块的层
    
    	// 主层
    	this._main_layer = new ALittle.DisplayLayout(g_Control);
    	this._main_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
    	this._main_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
    	layer.AddChild(this._main_layer);
    
    	// 对话框层
    	this._dialog_layer = new ALittle.DisplayLayout(g_Control);
    	this._dialog_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
    	this._dialog_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
    	layer.AddChild(this._dialog_layer);
    
    	// 模态层
    	this._modal_layer = new ALittle.DisplayLayout(g_Control);
    	this._modal_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
    	this._modal_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
    	layer.AddChild(this._modal_layer);
    
    	// TIP层
    	this._tip_layer = new ALittle.DisplayLayout(g_Control);
    	this._tip_layer.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
    	this._tip_layer.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
    	this._tip_layer.disabled = true;
    	layer.AddChild(this._tip_layer);

    	this._dialog_logic = new OPSBaseDialogManager(this);
    	this._main_logic  = new OPSMain(this);
    	this._tool_logic  = new OPSTool(this);
    	this._login_logic = new OPSLogin(this, login_ip, login_port, module_name);
    	this._login_logic.ShowScene();
    }

    public fun ReloadConfig()
    {
    	// 缓存路径，用来存放临时文件
    	this._temp_path = this._module_base_pathex.."/Temp/";
    	if (ALittle.File_GetFileAttr(this._temp_path) == null)
    		ALittle.File_MakeDeepDir(this._temp_path);

		// 加载配置文件
		var config:OPSConfig, error_msg = ALittle.File_ReadJsonFromFile(this.temp_path.."Client.cfg");
		if (config == null)
		{
			ALittle.Log("客户端配置Json解析失败:".. this.temp_path.."Client.cfg, " ..error_msg);
			return;
		}
    	this._config = config; // 传进来的配置信息
    }
    
    public fun Close()
    {
    	if (this._login_logic != null)
    		this._login_logic.Close();
    
    	if (this._dialog_logic != null)
    		this._dialog_logic.Close();
    
    	this._layer.AddChild(this._main_layer);
    	this._layer.AddChild(this._dialog_layer);
    	this._layer.AddChild(this._modal_layer);
    	this._layer.AddChild(this._tip_layer);
    }
    
    public get main_layer() : ALittle.DisplayLayout { return this._main_layer; }
    public get dialog_layer() : ALittle.DisplayLayout { return this._dialog_layer; }
    public get modal_layer() : ALittle.DisplayLayout { return this._modal_layer; }
    public get tip_layer() : ALittle.DisplayLayout { return this._tip_layer; }
    
    public get control() : ALittle.ControlSystem { return this._control; }
    public get config() : OPSConfig { return this._config; }
    public get config_user() : ALittle.IJsonConfig { return this._config_user; }
    public get base_path() : string { return this._module_base_path; }
    public get base_pathex() : string { return this._module_base_pathex; }
    public get temp_path() : string { return this._temp_path; }
    
    public get tool_logic() : OPSTool { return this._tool_logic; }
    public get main_logic() : OPSMain { return this._main_logic; }
    public get login_logic() : OPSLogin { return this._login_logic; }
    public get dialog_logic() : OPSBaseDialogManager { return this._dialog_logic; }
}