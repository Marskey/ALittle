
namespace ABrowser;

protected struct OPSTableDataBatchButtonUserData
{
	List<OPSHandleConfig> single_handle_config_list;	// 对应的操作
	List<OPSHandleConfig> multy_handle_config_list;	// 对应的操作
	OPSTableData table_data;
	bool batch;					// 是否批量处理
	string position;			// 菜单的位置
	Map<string, any> data;		// 数据
}

protected class OPSTableDataSearch : OPSTableDataRichGroup
{
	private OPSCenter _center;
	private OPSSubMenuConfig _table_data_config;
	private OPSTableData _parent;
	
	private List<OPSTDBase> _ctrl_list;

   	public ctor(ALittle.ControlSystem ctrl_sys, OPSCenter center, [Nullable] OPSSubMenuConfig table_data_config, [Nullable] OPSTableData parent)
   	{
		this._center = center;
		this._table_data_config = table_data_config;
		this._parent = parent;
	   
		var child_list = new List<ALittle.DisplayObject>();
		var child_list_count = 0;
		this._ctrl_list = new List<OPSTDBase>();
		var ctrl_list_count = 0;
	   
		// 创建搜索组件
		var query_info = this._center.config.table[this._table_data_config.table].query_info;
		for (var k, field_config in query_info)
		{
			var clazz = cast<Map<string, any>>(_G["ABrowser"])[field_config.input_type];
			if (clazz != null)
			{
				var control:OPSTDBase = ALittle.NewObject(clazz, g_Control, this._center, field_config);
				control.AddEventListener(this, this.HandleEnterButtonClick);
				control.AddEventListener(this, this.HandleFieldRightClick);
				++ child_list_count;
				child_list[child_list_count] = control;
				++ ctrl_list_count;
				this._ctrl_list[ctrl_list_count] = control;
			}
		}
	   
		// 最后添加查询，刷新两个按钮
		var container = new ALittle.DisplayLayout(g_Control);
		var query_button = g_Control.CreateControl{ALittle.DisplayObject}("ops_common_button");
		query_button.text = "查询";
		query_button.AddEventListener(this, this.HandleQueryButtonClick);
		container.AddChild(query_button);
	   
		var refresh_button = g_Control.CreateControl{ALittle.DisplayObject}("ops_common_button");
		refresh_button.text = "刷新";
		refresh_button.AddEventListener(this, this.HandleRefreshButtonClick);
		refresh_button.x = query_button.width + 5;
	   
		container.width = refresh_button.x + refresh_button.width;
		container.height = refresh_button.height;
		container.AddChild(refresh_button);

	   	++ child_list_count;
	   	child_list[child_list_count] = container;
	   
		// 创建批量操作按钮
		this.CreateBatchButton(child_list);
		// 创建简单操作按钮
		this.CreateEasyButton(child_list);
	   
		this.SetChildList(child_list);
    }
   
	// 获取参数
	public fun SetQueryInfo() : Map<string, string>
	{
		var param_object = new Map<string, string>();
		for (var index, control in this._ctrl_list)
		{
			var result, data, reason = control.GetData();
			if (result != true && control.CanOption() == false)
			{
				this._center.tool_logic.ShowCenterWeakNotice(reason, false);
				return null;
			}
			if (data != null)
			{
				for (var k, v in data)
					param_object[k] = lua.tostring(v);
			}
		}
		return param_object;
	}
   
   
	////////////////////////////////////////////////////////////////////////////////////////////////////-
	// 创建批量操作按钮
	public fun CreateBatchButton(List<ALittle.DisplayObject> child_list)
	{
		var batch_menu = this._table_data_config.single_handle;
		if (batch_menu == null || lua.table.maxn(batch_menu) <= 0) return;

		var handle_menu = new List<OPSHandleConfig>();
		var handle_menu_count = 0;
		for (var k, v in batch_menu)
		{
			var dialog_config = this._center.config.dialog[v.dialog];
			if (dialog_config != null)
			{
				var result = this._center.login_logic.CheckPermission(dialog_config.permission);
				if (result)
				{
					++ handle_menu_count;
					handle_menu[handle_menu_count] = v;
				}
			}
		}

		var container = new ALittle.DisplayLayout(g_Control);
		var button = g_Control.CreateControl{ALittle.DisplayObject}("ops_common_button");
		button.text = "批量操作";
		// 创建按钮手势
		var hand_cursor = true;
		button.AddEventListener(this, this.HandleBatchButtonClick);
		button.width = 70;

		container.width = button.width;
		container.height = button.height;
		container.AddChild(button);

		var child_list_count = lua.table.maxn(child_list);
		++ child_list_count;
		child_list[child_list_count] = container;

		var user_data = new OPSTableDataBatchButtonUserData();
		user_data.single_handle_config_list = handle_menu;
		user_data.table_data = this._parent;
		user_data.batch = true;  // 标记为批量处理
		user_data.position = OPSTableDataMenuType.SHOW_BOTTOM;
		button._user_data = user_data;
	}
   
	public fun HandleBatchButtonClick(ALittle.UIClickEvent event)
	{
		this._parent.ShowOperateMenu(event.target);
	}
   
	////////////////////////////////////////////////////////////////////////////////////////////////////-
	// 创建简单操作按钮
	public fun CreateEasyButton(List<ALittle.DisplayObject> child_list)
	{
		var handle_list = this._table_data_config.multi_handle;
		if (handle_list == null || lua.table.maxn(handle_list) <= 0) return;

		var container = new ALittle.DisplayLayout(g_Control);
		var offset_x = -5.0;
		for (var _, list_v in handle_list)
		{
			var handle_menu = new List<OPSHandleConfig>();
			var handle_menu_count = 0;
			for (var k, v in list_v.childs)
			{
				var dialog_config = this._center.config.dialog[v.dialog];
				if (dialog_config != null)
				{
					var result = this._center.login_logic.CheckPermission(dialog_config.permission);
					if (result)
					{
						++ handle_menu_count;
						handle_menu[handle_menu_count] = v;
					}
				}
			}

			if (handle_menu_count > 0)
			{
				var button = g_Control.CreateControl{ALittle.DisplayObject}("ops_common_button");
				button.text = list_v.name;
				// 创建按钮手势
				button.hand_cursor = true;
				button.AddEventListener(this, this.HandleOtherButtonClick);
				button.width = 70;
				button.x = offset_x + 5;
				offset_x = button.x + button.width;

				container.AddChild(button);

				var user_data = new OPSTableDataBatchButtonUserData();
				user_data.multy_handle_config_list = handle_menu;
				user_data.table_data = this._parent;
				user_data.position = OPSTableDataMenuType.SHOW_BOTTOM;
				button._user_data = user_data;
			}
		}

		// 计算容器宽高
		var count = container.child_count;
		if (count > 0)
		{
			var last_obj = container.GetChildByIndex(count);
			container.height = last_obj.height;
			container.width = last_obj.x + last_obj.width;
		}

		var child_list_count = lua.table.maxn(child_list);
		++ child_list_count;
		child_list[child_list_count] = container;
	}
   
	public fun HandleOtherButtonClick(ALittle.UIClickEvent event)
	{
		this._parent.ShowOperateMenu(event.target);
	}
   
    ////////////////////////////////////////////////////////////////////////////////////////////////////-
    // 显示时间插件
	public fun HandleTimeInput(ALittle.UIFocusInEvent event)
	{
		this._parent.ShowTimeSelect(event.target);
	}
   
    // 查询按钮回调
	public fun HandleQueryButtonClick(ALittle.UIClickEvent event)
	{
		this._parent.SendQuery();
	}
	// 刷新按钮回调
	public fun HandleRefreshButtonClick(ALittle.UIClickEvent event)
	{
		this._parent.RefreshQuery();
	}
	// 回车回调
	public fun HandleEnterButtonClick(ALittle.UIClickEvent event)
	{
		this._parent.SendQuery();
	}

	// 鼠标右键回调
	public fun HandleFieldRightClick(ALittle.UIRButtonDownEvent event)
	{
		var object = cast<OPSTDBase>(event.target);
		this._parent.ShowCopyCutPasteMenu(object.GetCopyString(), object);
	}
}