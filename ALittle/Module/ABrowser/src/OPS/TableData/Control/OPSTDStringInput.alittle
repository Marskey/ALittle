
namespace ABrowser;

protected class OPSTDStringInput : OPSTDBase
{
	private OPSCenter _center;
	private OPSTableQueryConfig _field_config;

	private ALittle.ImageInput _input;
	
    public ctor(ALittle.ControlSystem ctrl_sys, OPSCenter center, OPSTableQueryConfig field_config)
    {
    	this._center = center;
    	this._field_config = field_config;
    
    	// 加载控件
    	var text = g_Control.CreateControl{ALittle.DisplayObject}("ops_common_text");
    	text.text = this._field_config.name;
    	text.y_type = ALittle.UIEnumTypes.POS_ALIGN_CENTER;
    	var input = g_Control.CreateControl{ALittle.ImageInput}("ops_common_input");
    	input.x = text.width;
    	if (this._field_config.width == null)
    		input.width = 150;
    	else
    		input.width = this._field_config.width;
    	input.y_type = ALittle.UIEnumTypes.POS_ALIGN_CENTER;

    	if (this._field_config.default_value != null) input.text = this._field_config.default_value;
    	input.AddEventListener(this, this.HandleEnterButtonClick);
    	input.AddEventListener(this, this.HandleFieldRightClick);
    	this._input = input;
    
    	this.width = text.width + input.width;
    	this.height = input.height;
    	this.AddChild(text);
    	this.AddChild(input);
    }
    
    // 回车回调
    public fun HandleEnterButtonClick(ALittle.UIEnterKeyEvent event)
    {
    	this.DispatchEvent(new ALittle.UIEnterKeyEvent());
    }
    
    // 鼠标右键回调
    public fun HandleFieldRightClick(ALittle.UIRButtonDownEvent event)
    {
    	this.DispatchEvent(new ALittle.UIRButtonDownEvent());
    }
    
    public fun GetData() : bool, Map<string, any>, string
    {
    	var map = new Map<string, any>();
        if (this.CanOption()) return true, map, null;
    	map[this._field_config.query_param] = this._input.text;
    	return true, map, null;
    }

    public fun CanOption() : bool
    {
    	return this._field_config.option == true && this._input.text == "";
    }

    public fun GetCopyString() : string
    {
        return this._input.text;
    }

    public fun CutText()
    {
        this._input.CutText();
    }

    public fun PasteText()
    {
        this._input.PasteText();
    }
}