
namespace ABrowser;

protected struct OPSTableDataHeadAllSelectChanged : ALittle.UIEvent {}
protected struct OPSTableDataHeadOrderChanged : ALittle.UIEvent {}

protected struct OPSTableDataHeadFieldInfo
{
	string name;
	string field;
}

protected struct OPSTableDataHeadOrderInfo
{
	string order_param;
	bool order_type;
}

protected class OPSTableDataHead : ALittle.DisplayLayout
{
	private OPSCenter _center;
	private OPSSubMenuConfig _table_data_config;
	private OPSTableData _parent;

	private double _handle_width;
	private double _field_offset;
	private List<OPSTableDataHeadFieldInfo> _field_list;		// 字段列表信息
	private List<ALittle.DisplayObject> _order_btn;				// 排序按钮
	private ALittle.DisplayObject _all_check_button;			// 全选勾选框

    public ctor(ALittle.ControlSystem ctrl_sys, OPSCenter center, OPSSubMenuConfig table_data_config, OPSTableData parent)
    {
    	this._center = center;
    	this._table_data_config = table_data_config;
    	this._parent = parent;

    	this._handle_width = 100;	// 第一列是操作按钮，这个值表示操作列的宽度
    	this._field_offset = 0;
    	this._field_list = new List<OPSTableDataHeadFieldInfo>();		// 标题列表
    	this._order_btn = new List<ALittle.DisplayObject>();		// 排序按钮表

    	// 创建数据背景
    	var static_bg = new ALittle.Quad(g_Control);
    	static_bg.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
    	static_bg.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
    	this.AddChild(static_bg);

    	var offset_x = 0.0;

    	// 创建全选框
    	var check_button = g_Control.CreateControl{ALittle.DisplayObject}("ops_common_check");
    	this._all_check_button = check_button;
    	check_button.y = 2;
    	check_button.x = 2;
    	check_button.AddEventListener(this, this.HandleSelectAllChange);
    	this.AddChild(check_button);
    	this.height = check_button.y * 2 + check_button.height;
    	offset_x = check_button.x * 2 + check_button.width;

    	if (this._table_data_config.single_handle != null || this._parent.select_mode)
    	{
    		var text = g_Control.CreateControl{ALittle.DisplayObject}("ops_tab_text");
    		text.text = "操作";
    		text.x = (this._handle_width - text.width) / 2 + offset_x;
    		text.y = (this.height - text.height) / 2;
    		this.AddChild(text);
    		offset_x += this._handle_width;
    	}

    	this._field_offset = offset_x;

        var order_btn_count = ALittle.List_MaxN(this._order_btn);
        var field_list_count = ALittle.List_MaxN(this._field_list);
    	// 创建field
    	var table_config = this._center.config.table[this._table_data_config.table];
    	for (var k, field_config in table_config.table_td)
    	{
    		if (field_config.hidden != true) // 过滤掉隐藏字段
    		{
    			//是否需要排序
    			var has_order = false;
    			if (field_config.order)
    			{
    				has_order = true;
    				var button = new OPSTableDataOrderButton(g_Control, field_config.field);
    				button.AddEventListener(this, this.HandleOrderChange);
    				button.width = field_config.width;
    				button.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
    				button.x = offset_x;
    				this.AddChild(button);
    				++ order_btn_count;
    				this._order_btn[order_btn_count] = button;
    			}

				var text = g_Control.CreateControl{ALittle.Text}("ops_tab_text");
    			if (has_order) text.underline = true;
    			text.text = field_config.name;
    			text.disabled = true;
    			text.x = (field_config.width - text.width) / 2 + offset_x;
    			text.y = (this.height - text.height) / 2;
    			this.AddChild(text);

    			offset_x = offset_x + field_config.width;

    			// 导出数据用
    			var field_info = new OPSTableDataHeadFieldInfo();
    			field_info.field = field_config.field;
    			field_info.name = field_config.name;
    		    ++ field_list_count;
    		    this._field_list[field_list_count] = field_info;
    		}
    	}
    	this.width = offset_x;
    }

    // 获取操作间隔
    public get field_offset() : double
    {
    	return this._field_offset;
    }

    // 获取字段列表
    public get field_list() : List<OPSTableDataHeadFieldInfo>
    {
    	return this._field_list;
    }

    public get handle_width() : double
    {
    	return this._handle_width;
    }

    // 设置全选
    public set all_select(bool value)
    {
    	this._all_check_button.selected = value;
    }

    // 全选check和单选改变事件
    public fun HandleSelectAllChange(ALittle.UIChangedEvent event)
    {
        var object = event.target;
    	var selected = object.selected;
    	if (selected)
    		this._parent.SelectAll();
    	else
    		this._parent.CancelSelectAll();
    }

    // 排序变化
    public fun HandleOrderChange(ALittle.UIChangedEvent event)
    {
		var object = cast<OPSTableDataOrderButton>(event.target);
    	// 获取排序参数
    	var order = new OPSTableDataHeadOrderInfo();
    	order.order_param = object.order_param;
    	order.order_type = object.order_type;
    	this.OtherOrderButtonChange(object);
    	this._parent.QueryOrder(order);
    }

    // 改变其他排序按钮的状态
    public fun OtherOrderButtonChange(OPSTableDataOrderButton target)
    {
    	for (var k, button:OPSTableDataOrderButton in this._order_btn)
    	{
    		if (button != target)
    		    button.DefaultType();
    	}
    }
}