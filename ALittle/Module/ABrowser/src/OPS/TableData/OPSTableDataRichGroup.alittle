
namespace ABrowser;

struct OPSTableDataRichGroupLineInfo
{
	double height;
	double width;
	List<ALittle.DisplayObject> childs;
	int child_count;
}

protected class OPSTableDataRichGroup : ALittle.DisplayLayout
{
	private double _enter_key_height;
	private double _line_spacing;
	private double _column_spacing;
	private double _remain_width;

	private int _halign;
	private int _valign;

	private List<OPSTableDataRichGroupLineInfo> _show_line;
	private List<ALittle.DisplayObject> _show_childs;

    public ctor(ALittle.ControlSystem ctrl_sys)
    {
    	this._enter_key_height = 20; // 默认回车高度
    
    	this._line_spacing = 0;
    	this._column_spacing = 0; 	// 默认控件间隔宽度
    
    	this._halign = ALittle.UIEnumTypes.HALIGN_LEFT;
    	this._valign = ALittle.UIEnumTypes.VALIGN_TOP;
    	
    	this._show_line = new List<OPSTableDataRichGroupLineInfo>(); 	// 行控件列表
    	this._show_childs = new List<ALittle.DisplayObject>();
    
    	this._remain_width = 0;
    }
    
    public set width(double value)
    {
    	if (this.width == value) return;
    	ALittle.DisplayLayout.width(this, value);
    	this.Refresh();
    }
    
    // 设置水平对齐
    public set halign(int value)
    {
    	if (this._halign == value) return;
    	this._halign = value;
    	this.Refresh();
    }
    public get halign() : int
    {
    	return this._halign;
    }
    
    // 设置垂直对齐
    public set valign(int value)
    {
    	if (this._valign == value) return;
    	this._valign = value;
    	this.Refresh();
    }
    public get valign() : int
    {
    	return this._valign;
    }
    
    // 设置行间距
    public set line_spacing(double value)
    {
    	if (this._line_spacing == value) return;
    	this._line_spacing = value;
    	this.Refresh();
    }
    public get line_spacing() : double
    {
    	return this._line_spacing;
    }
    
    // 设置控件间距
    public set column_spacing(double value)
    {
    	if (this._column_spacing == value) return;
    	this._column_spacing = value;
    	this.Refresh();
    }
    public get column_spacing() : double
    {
    	return this._column_spacing;
    }
    
    // 行中添加子控件
    public fun SetChildList(List<ALittle.DisplayObject> child_list)
    {
    	this._show_childs = new List<ALittle.DisplayObject>();
    	var show_child_count = 0;
    	for (var index, child in child_list)
    	{
    		++ show_child_count;
    		this._show_childs[show_child_count] = child;
    	}
    
    	// 更新布局
    	this.Refresh();
    }
    
    public fun AddBr()
    {
    	var child = new Map<string, any>();
    	child["__class"] = "Br";
    	var child_count = ALittle.List_MaxN(this._show_childs);
    	++ child_count;
    	this._show_childs[child_count] = cast<ALittle.DisplayObject>(child);
    
    	// 更新布局
    	this.Refresh();
    }
    
    public fun Clear()
    {
    	this._show_childs = new List<ALittle.DisplayObject>();
    	this.Refresh();
    }
    
    public fun Refresh()
    {
    	// 所有行
    	this._show_line = new List<OPSTableDataRichGroupLineInfo>();
    	var show_line_count = 0;
    
    	// 当前行
    	var cur_line = new OPSTableDataRichGroupLineInfo();
    	cur_line.height = 0;
    	cur_line.width = 0;
    	cur_line.childs = new List<ALittle.DisplayObject>();
    	cur_line.child_count = 0;
    
    	// 控件索引
    	var child_index = 1;
    
    	// 剩余宽度
    	this._remain_width = this.width;
    	while (true)
    	{
    		// 获取当前控件
    		var child = this._show_childs[child_index];
    		if (child == null) break;
    
    		// 如果是回车
    		if (cast<Map<string, string>>(child)["__class"] == "Br")
    		{
    			// 如果当前行一个控件都没有
    			if (cur_line.child_count == 0)
    			{
    				// 当前行的高度是回车的高度
    				cur_line.height = this._enter_key_height;
    				cur_line.width = 0;
    				// 添加到行容器中
    				++ show_line_count;
    				this._show_line[show_line_count] = cur_line;
    				// 产生新的行
    				cur_line = new OPSTableDataRichGroupLineInfo();
    				cur_line.height = 0;
    				cur_line.width = 0;
    				cur_line.childs = new List<ALittle.DisplayObject>();
    				cur_line.child_count = 0;
    				// 重置剩余宽度
    				this._remain_width = this.width;
    			}
    			// 如果当前已经有控件了
    			else
    			{
    				// 直接把当期行直接添加进
    				++ show_line_count;
    				this._show_line[show_line_count] = cur_line;
    				// 产生新的行
    				cur_line = new OPSTableDataRichGroupLineInfo();
    				cur_line.height = 0;
    				cur_line.width = 0;
    				cur_line.childs = new List<ALittle.DisplayObject>();
    				cur_line.child_count = 0;
    				// 重置剩余宽度
    				this._remain_width = this.width;
    			}
    		}
    		else
    		{
    			// 如果当前一个控件都没有
    			if (cur_line.child_count == 0)
    			{
    				// 直接设置当前行为这个控件的高度
    				cur_line.height = cast<Map<string, double>>(child)["height"];
    				cur_line.width = cast<Map<string, double>>(child)["width"];
    				cur_line.child_count = 1;
    				cur_line.childs[cur_line.child_count] = child;
    				// 计算剩余宽度
    				this._remain_width = this._remain_width - cast<Map<string, double>>(child)["width"];
    				// 如果当前剩余宽度没有了
    				if (this._remain_width <= 0)
    				{
    					// 把当前行添加进所有行
						++ show_line_count;
						this._show_line[show_line_count] = cur_line;
    					// 创建新的行
    					cur_line = new OPSTableDataRichGroupLineInfo();
    					cur_line.height = 0;
    					cur_line.width = 0;
    					cur_line.childs = new List<ALittle.DisplayObject>();
    					cur_line.child_count = 0;
    					// 重置剩余宽度
    					this._remain_width = this.width;
    				}
    			}
    			else
    			{
    				// 计算当前剩余宽度
    				this._remain_width = this._remain_width - cast<Map<string, double>>(child)["width"] - this._column_spacing;
    				// 如果剩余宽度不足
    				if (this._remain_width < 0)
    				{
    					// 把当前行添加进所有行
						++ show_line_count;
						this._show_line[show_line_count] = cur_line;
    					// 创建新的行
    					cur_line = new OPSTableDataRichGroupLineInfo();
    					cur_line.height = cast<Map<string, double>>(child)["height"];
    					cur_line.width = cast<Map<string, double>>(child)["width"];
    					cur_line.childs = new List<ALittle.DisplayObject>();
    					cur_line.child_count = 1;
    					cur_line.childs[cur_line.child_count] = child;
    					// 重置剩余宽度
    					this._remain_width = this.width - cast<Map<string, double>>(child)["width"];
    					if (this._remain_width < 0)
    					{
    						// 把当前行添加进所有行
							++ show_line_count;
							this._show_line[show_line_count] = cur_line;
    						// 创建新的行
    						cur_line = new OPSTableDataRichGroupLineInfo();
    						cur_line.height = 0;
    						cur_line.width = 0;
    						cur_line.childs = new List<ALittle.DisplayObject>();
    						cur_line.child_count = 0;
    						// 重置剩余宽度
    						this._remain_width = this.width;
    					}
    				}
    				else
    				{
    					cur_line.width = cur_line.width + cast<Map<string, double>>(child)["width"] + this._column_spacing;
    					// 计算高度
    					if (cur_line.height < cast<Map<string, double>>(child)["height"]) cur_line.height = cast<Map<string, double>>(child)["height"];
    					// 添加控件
    					++ cur_line.child_count;
    					cur_line.childs[cur_line.child_count] = child;
    				}
    			}
    		}
    		++ child_index;
    	}
    
    	// 如果当前行有控件，那么就加入所有行
    	if (cur_line.child_count > 0)
    	{
			++ show_line_count;
			this._show_line[show_line_count] = cur_line;
    	}
    
    	// 遍历所有行，开始组织界面
    
    	// 移除所有子控件
    	this.RemoveAllChild();

		var offset_y = 0.0;
    	for (var k, v in this._show_line)
    	{
			var offset_x = 0.0;
    		if (this._halign == ALittle.UIEnumTypes.HALIGN_CENTER)
    			offset_x = (this.width - v.width) / 2;
    		elseif (this._halign == ALittle.UIEnumTypes.HALIGN_RIGHT)
    			offset_x = this.width - v.width;
    		else
    			offset_x = 0;

    		for (var index, child in v.childs)
    		{
    			this.AddChild(child);
    			child.x = offset_x;
    			if (this._valign == ALittle.UIEnumTypes.VALIGN_CENTER)
    				child.y = offset_y + (v.height - child.height) / 2;
    			elseif (this._valign == ALittle.UIEnumTypes.VALIGN_BOTTOM)
    				child.y = offset_y + (v.height - child.height);
    			else
    				child.y = offset_y;

    			offset_x = offset_x + child.width + this._column_spacing;
    		}
    		offset_y = offset_y + this._line_spacing + v.height;
    	}
    
    	this.height = offset_y - this._line_spacing;
    	this.DispatchEvent(new ALittle.UIResizeEvent());
    }
}