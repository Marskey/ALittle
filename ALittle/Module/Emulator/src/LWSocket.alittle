
namespace Emulator;

protected class LWSocket : Lua.ISocket
{
	public async fun ReadMessage()
	{
        var msg_type = 0;
        var msg_size = 0;
        var server_id = 0;
        var server_type = 0;
        var protobuf_msg:lua.protobuf_message = null;
        var error:string = null;

        while (this.IsConnected())
		{
            error, msg_type = this.ReadUint16();
            if (error != null) break;
            
            error, msg_size = this.ReadUint16();
            if (error != null) break;

            error, server_id = this.ReadUint16();
            if (error != null) break;
            
            error, server_type = this.ReadUint16();
            if (error != null) break;
            
            var name = this.MsgId2MsgFullName(msg_type);

            if (msg_size > 0)
            {
                error, protobuf_msg = this.ReadProtobuf(name, msg_size);
                if (error != null) break;   
            }
            
            this.HandleMessage(msg_type, name, protobuf_msg);

            if (protobuf_msg != null)
            {
                lua.protobuf.freemessage(protobuf_msg);
                protobuf_msg = null;
            }
        }
    }

    public fun WriteMessage(string name, any msg) : bool
    {
        var msg_type = this.MsgFullName2MsgId(name);
        if (msg_type == null) return false;
        
        var protobuf_msg = Lua.Table2Protobuf(name);
        if (protobuf_msg == null) return false;

        var msg_size = lua.protobuf.message_getbytesize(protobuf_msg);
        var binary_value = lua.memory.create(msg_size);

        var result = lua.protobuf.message_serializetoarray(protobuf_msg, binary_value, msg_size);
        if (result)
        {
            this.WriteUint16(msg_type);
            this.WriteUint16(msg_size);
            this.WriteUint16(1);
            this.WriteUint16(1);
            this.WriteBinary(binary_value, msg_size);
        }

        lua.protobuf.freemessage(protobuf_msg);
        lua.memory.free(binary_value);

        return result;
    }

    private fun MsgId2MsgFullName(int id) : string
    {
        return "";
    }
    
    private fun MsgFullName2MsgId(string name) : int
    {
        return null;
    }

    private fun HandleMessage(int id, string name, lua.protobuf_message msg)
    {
        
    }
}