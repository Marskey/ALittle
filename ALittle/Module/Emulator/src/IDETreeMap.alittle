
namespace Emulator;

public class IDETreeMap : IDETree
{
	private ALittle.TextButton _add_button;

	private int _cpp_type;
	private lua.protobuf_reflection _rflct;
	private lua.protobuf_message _msg;
	private lua.protobuf_field_descriptor _field;

    private lua.protobuf_field_descriptor _key_descriptor;
    private lua.protobuf_field_descriptor _value_descriptor;

	public ctor(ALittle.ControlSystem ctrl_sys, string field_name, lua.protobuf_reflection rflct, lua.protobuf_message msg, lua.protobuf_field_descriptor field)
	{
		this._rflct = rflct;
		this._msg = msg;
		this._field = field;
        
        var map_descriptor = lua.protobuf.fielddescriptor_messagetype(field);
        this._key_descriptor = lua.protobuf.messagedescriptor_findfieldbyname(map_descriptor, "key");
        this._value_descriptor = lua.protobuf.messagedescriptor_findfieldbyname(map_descriptor, "value");
        
		// 对树的头部进行处理
		this._head = ctrl_sys.CreateControl{ALittle.DisplayObject}("ide_common_tree_map", this);
		ALittle.DisplayGroup.AddChild(this, this._head, 1);

		this.Init();
        /*
		
            var msg_count = lua.protobuf.reflection_getrepeatedmessagecount(rflct, msg, field_descriptor);
            
            var map_descriptor = lua.protobuf.fielddescriptor_messagetype(field_descriptor);
            var key_descriptor = lua.protobuf.messagedescriptor_findfieldbyname(map_descriptor, "key");
            var key_type = lua.protobuf.fielddescriptor_cpptypename(key_descriptor);
            var value_descriptor = lua.protobuf.messagedescriptor_findfieldbyname(map_descriptor, "value");
            var value_type = lua.protobuf.fielddescriptor_cpptypename(value_descriptor);

            var tree_map = new IDETreeMap(g_Control, field_name, key_type, value_type);
            detail_info.tree.AddChild(tree_map);

            for (var index = 0; index < msg_count; 1)
            {
                var sub_msg = lua.protobuf.reflection_getrepeatedmessage(rflct, msg, field_descriptor, index);
                var sub_rflct = lua.protobuf.message_getreflection(sub_msg);
                
                var key_cpp_type = lua.protobuf.fielddescriptor_cpptype(key_descriptor);
                if (key_cpp_type == lua.protobuf_cpptype.CPPTYPE_BOOL)
                {
                    var value = lua.protobuf.reflection_getbool(sub_rflct, sub_msg, key_descriptor);
                
                }
                elseif (key_cpp_type == lua.protobuf_cpptype.CPPTYPE_INT32)
                {
                    var value = lua.protobuf.reflection_getint32(sub_rflct, sub_msg, key_descriptor);
                
                }
                elseif (key_cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT32)
                {
                    var value = lua.protobuf.reflection_getuint32(sub_rflct, sub_msg, key_descriptor);
                
                }
                elseif (key_cpp_type == lua.protobuf_cpptype.CPPTYPE_INT64)
                {
                    var value = lua.protobuf.reflection_getint64(sub_rflct, sub_msg, key_descriptor);
                
                }
                elseif (key_cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT64)
                {
                    var value = lua.protobuf.reflection_getuint64(sub_rflct, sub_msg, key_descriptor);
                
                }
                elseif (key_cpp_type == lua.protobuf_cpptype.CPPTYPE_DOUBLE)
                {
                    var value = lua.protobuf.reflection_getdouble(sub_rflct, sub_msg, key_descriptor);
                
                }
                elseif (key_cpp_type == lua.protobuf_cpptype.CPPTYPE_FLOAT)
                {
                    var value = lua.protobuf.reflection_getfloat(sub_rflct, sub_msg, key_descriptor);
                
                }
                elseif (key_cpp_type == lua.protobuf_cpptype.CPPTYPE_ENUM)
                {
                    var value = lua.protobuf.reflection_getenumvalue(sub_rflct, sub_msg, key_descriptor);
                
                }
                elseif (key_cpp_type == lua.protobuf_cpptype.CPPTYPE_STRING)
                {
                    var value = lua.protobuf.reflection_getstring(sub_rflct, sub_msg, key_descriptor);
                
                }

                var value_cpp_type = lua.protobuf.fielddescriptor_cpptype(value_descriptor);
                if (value_cpp_type == lua.protobuf_cpptype.CPPTYPE_BOOL)
                {
                    var value = lua.protobuf.reflection_getbool(sub_rflct, sub_msg, value_descriptor);
                
                }
                elseif (value_cpp_type == lua.protobuf_cpptype.CPPTYPE_INT32)
                {
                    var value = lua.protobuf.reflection_getint32(sub_rflct, sub_msg, value_descriptor);
                
                }
                elseif (value_cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT32)
                {
                    var value = lua.protobuf.reflection_getuint32(sub_rflct, sub_msg, value_descriptor);
                
                }
                elseif (value_cpp_type == lua.protobuf_cpptype.CPPTYPE_INT64)
                {
                    var value = lua.protobuf.reflection_getint64(sub_rflct, sub_msg, value_descriptor);
                
                }
                elseif (value_cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT64)
                {
                    var value = lua.protobuf.reflection_getuint64(sub_rflct, sub_msg, value_descriptor);
                
                }
                elseif (value_cpp_type == lua.protobuf_cpptype.CPPTYPE_DOUBLE)
                {
                    var value = lua.protobuf.reflection_getdouble(sub_rflct, sub_msg, value_descriptor);
                
                }
                elseif (value_cpp_type == lua.protobuf_cpptype.CPPTYPE_FLOAT)
                {
                    var value = lua.protobuf.reflection_getfloat(sub_rflct, sub_msg, value_descriptor);
                
                }
                elseif (value_cpp_type == lua.protobuf_cpptype.CPPTYPE_ENUM)
                {
                    var value = lua.protobuf.reflection_getenumvalue(sub_rflct, sub_msg, value_descriptor);
                
                }
                elseif (value_cpp_type == lua.protobuf_cpptype.CPPTYPE_STRING)
                {
                    var value = lua.protobuf.reflection_getstring(sub_rflct, sub_msg, value_descriptor);
                
                }
                elseif (value_cpp_type == lua.protobuf_cpptype.CPPTYPE_MESSAGE)
                {
                    var value = lua.protobuf.reflection_getmessage(sub_rflct, sub_msg, value_descriptor);
                    detail_info.tree.AddChild(UtilityCreateTreeMessage(value, field_name));
                }
            }


		this._item_title.text = "[repeated "..sub_type.."] "..field_name.." ";
        */
		this._add_button.x = this._item_title.x + this._item_title.width;

		this._head.width = this._add_button.x + this._add_button.width + 2;
	}

	private fun HandleAddClick(ALittle.UIClickEvent event)
	{
        this.AddLine(this.child_count);
        this.fold = true;
    }

    public fun AddLine(int index)
    {   /*
        if (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_BOOL)
        {
            lua.protobuf.reflection_insertrepeatedbool(this._rflct, this._msg, this._field, index, false);
            this.AddChild(new IDETreeRepeatedBool(g_Control, this, this._rflct, this._msg, this._field, index), index + 1);
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_INT32)
        {
            lua.protobuf.reflection_insertrepeatedint32(this._rflct, this._msg, this._field, index, 0);
            this.AddChild(new IDETreeRepeatedValue(g_Control, this, this._rflct, this._msg, this._field, index), index + 1);
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT32)
        {
            lua.protobuf.reflection_insertrepeateduint32(this._rflct, this._msg, this._field, index, 0);
            this.AddChild(new IDETreeRepeatedValue(g_Control, this, this._rflct, this._msg, this._field, index), index + 1);
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_INT64)
        {
            lua.protobuf.reflection_insertrepeatedint64(this._rflct, this._msg, this._field, index, 0);
            this.AddChild(new IDETreeRepeatedValue(g_Control, this, this._rflct, this._msg, this._field, index), index + 1);
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT64)
        {
            lua.protobuf.reflection_insertrepeateduint64(this._rflct, this._msg, this._field, index, 0);
            this.AddChild(new IDETreeRepeatedValue(g_Control, this, this._rflct, this._msg, this._field, index), index + 1);
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_DOUBLE)
        {
            lua.protobuf.reflection_insertrepeateddouble(this._rflct, this._msg, this._field, index, 0);
            this.AddChild(new IDETreeRepeatedValue(g_Control, this, this._rflct, this._msg, this._field, index), index + 1);
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_FLOAT)
        {
            lua.protobuf.reflection_insertrepeatedfloat(this._rflct, this._msg, this._field, index, 0);
            this.AddChild(new IDETreeRepeatedValue(g_Control, this, this._rflct, this._msg, this._field, index), index + 1);
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_ENUM)
        {
            lua.protobuf.reflection_insertrepeatedint32(this._rflct, this._msg, this._field, index, 0);
            this.AddChild(new IDETreeRepeatedEnum(g_Control, this, this._rflct, this._msg, this._field, index), index + 1);
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_STRING)
        {
            lua.protobuf.reflection_insertrepeatedstring(this._rflct, this._msg, this._field, index, "");
            this.AddChild(new IDETreeRepeatedValue(g_Control, this, this._rflct, this._msg, this._field, index), index + 1);
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_MESSAGE)
        {
            var value = lua.protobuf.reflection_insertrepeatedmessage(this._rflct, this._msg, this._field, index);
            this.AddChild(UtilityCreateTreeMessage(value, ""), index + 1);
        }*/
    }

    public fun CreateOneBefore(ALittle.DisplayObject child)
    {
        var index = this.GetChildIndex(child) - 1;
        this.AddLine(index);
    }

    public fun Delete(ALittle.DisplayObject child)
    {
        var index = this.GetChildIndex(child) - 1;
        this.RemoveChild(child);

        if (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_BOOL)
            lua.protobuf.reflection_removerepeatedbool(this._rflct, this._msg, this._field, index);
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_INT32)
            lua.protobuf.reflection_removerepeatedint32(this._rflct, this._msg, this._field, index);
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT32)
            lua.protobuf.reflection_removerepeateduint32(this._rflct, this._msg, this._field, index);
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_INT64)
            lua.protobuf.reflection_removerepeatedint64(this._rflct, this._msg, this._field, index);
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT64)
            lua.protobuf.reflection_removerepeateduint64(this._rflct, this._msg, this._field, index);
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_DOUBLE)
            lua.protobuf.reflection_removerepeateddouble(this._rflct, this._msg, this._field, index);
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_FLOAT)
            lua.protobuf.reflection_removerepeatedfloat(this._rflct, this._msg, this._field, index);
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_ENUM)
            lua.protobuf.reflection_removerepeatedint32(this._rflct, this._msg, this._field, index);
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_STRING)
            lua.protobuf.reflection_removerepeatedstring(this._rflct, this._msg, this._field, index);
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_MESSAGE)
            lua.protobuf.reflection_removerepeatedmessage(this._rflct, this._msg, this._field, index);
    }
}
