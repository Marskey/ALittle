
namespace Emulator;

protected enum LWLoginStatus
{
    CONNECT_IDLE = 0;
    CONNECT_LS = 1;
    CONNECT_GS = 2;
}

protected struct NetAddress
{
    string domain_name;        // 域名
    string ip;        // ip
    int port;        // 端口
}

protected struct MsgRegServerInfo
{
    int server_type;        // 服务器的类型
    int server_id;        // 服务器的id
	int kingdom_id;        // 王国ID
    NetAddress net_address;        // 地址
}

protected struct MSG_SERVER_REGIST_REQ
{
    MsgRegServerInfo info;
}

protected class LWProtobuf
{
	private Map<int, string> _id_map_name;
	private Map<string, int> _name_map_id;

	private LWSocket _ls_socket;
	private LWSocket _gs_socket;
	private int _login_status;

	public ctor()
	{
		this._id_map_name = new Map<int, string>();
		this._name_map_id = new Map<string, int>();
		this._login_status = LWLoginStatus.CONNECT_IDLE;
    }

	public fun Clear()
	{
        this._id_map_name = new Map<int, string>();
		this._name_map_id = new Map<string, int>();
    }

	public fun Refresh()
	{
		this.Clear();

        var enum_descriptor = A_LuaSocketSchedule.GetEnumDescriptor("EMsgTypes");
		if (enum_descriptor != null) this.AddEnumKeyValue(enum_descriptor);
    }

	private fun AddEnumKeyValue(lua.protobuf_enum_descriptor descriptor)
	{
        var count = lua.protobuf.enumdescriptor_valuecount(descriptor);
		for (var i = 0; i < count; 1)
		{
			var enumvalue_descriptor = lua.protobuf.enumdescriptor_value(descriptor, i);
			if (enumvalue_descriptor != null)
			{
				var field_name = lua.protobuf.enumvaluedescriptor_name(enumvalue_descriptor);
				var field_number = lua.protobuf.enumvaluedescriptor_number(enumvalue_descriptor);

				this._id_map_name[field_number] = field_name;
				this._name_map_id[field_name] = field_number;
			}
		}
    }

	public fun MsgId2MsgFullName(int id) : string
	{
        return this._id_map_name[id];
    }

	public fun MsgFullName2MsgId(string full_name) : int
	{
		var list = ALittle.String_Split(full_name, ".");
		if (list[2] == null) return null;
        return this._name_map_id["_"..list[2]];
    }

	// 断开连接
	public fun CloseConnect()
	{
        if (this._ls_socket != null)
		{
            this._ls_socket.Close();
			this._ls_socket = null;
        }
        if (this._gs_socket != null)
		{
            this._gs_socket.Close();
			this._gs_socket = null;
        }
    }

	private fun HandleDisconnected(int status)
	{
		if (this._login_status == status)
		{
			if (this._ls_socket != null)
			{
				this._ls_socket.Close();
				this._ls_socket = null;
            }
			if (this._gs_socket != null)
			{
				this._gs_socket.Close();
				this._gs_socket = null;
            }
			g_GCenter.HandleSocketDisconnected();
        }
    }

	// 发送协议
	public await fun StartLogin(string ip, int port, lua.protobuf_message msg) : string
	{
        this.CloseConnect();

		this._login_status = LWLoginStatus.CONNECT_LS;
		this._ls_socket = new LWSocket(bind(this.HandleDisconnected, this, LWLoginStatus.CONNECT_LS));
		var error = this._ls_socket.Connect(ip, port);
		if (error != null) return error;

		// 发送注册包
		var register_req = new MSG_SERVER_REGIST_REQ();
		register_req.info = new MsgRegServerInfo();
		register_req.info.server_type = 1;
		error = this._ls_socket.SendStruct("ProtoMsg.MSG_SERVER_REGIST_REQ", register_req);
		if (error != null) return error;
		
		// 发送消息包
		this._ls_socket.SendMessage(msg);
		var json = lua.protobuf.message_jsonencode(msg);
		ALittle.Log(json);
		// 读取消息包
		error, msg = this._ls_socket.ReadMessage();
		if (error != null) return error;

		json = lua.protobuf.message_jsonencode(msg);
		ALittle.Log(json);

		this._login_status = LWLoginStatus.CONNECT_GS;

		return null;
    }
}

protected var g_LWProtobuf = new LWProtobuf();