
namespace Emulator;

public class IDETreeRepeated : IDETree
{
	private ALittle.TextButton _add_button;

	private int _cpp_type;
	private lua.protobuf_reflection _rflct;
	private lua.protobuf_message _msg;
	private lua.protobuf_field_descriptor _field;

	public ctor(ALittle.ControlSystem ctrl_sys, string field_name, lua.protobuf_reflection rflct, lua.protobuf_message msg, lua.protobuf_field_descriptor field)
	{
		// 对树的头部进行处理
		this._head = ctrl_sys.CreateControl{ALittle.DisplayObject}("ide_common_tree_repeated", this);
		ALittle.DisplayGroup.AddChild(this, this._head, 1);

		this._add_button.x = this._item_title.x + this._item_title.width;

		this._head.width = this._add_button.x + this._add_button.width + 2;
		
		this.Init();

		this._cpp_type = lua.protobuf.fielddescriptor_cpptype(field);
		if (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_BOOL)
        {
            var value_list = lua.protobuf.reflection_getrepeatedbool(rflct, msg, field);
            for (var index, value in value_list)
            {
                this.AddChild(new IDETreeRepeatedBool(g_Control, this));
            }
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_INT32)
        {
            var value_list = lua.protobuf.reflection_getrepeatedint32(rflct, msg, field);
                
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT32)
        {
            var value_list = lua.protobuf.reflection_getrepeateduint32(rflct, msg, field);
                
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_INT64)
        {
            var value_list = lua.protobuf.reflection_getrepeatedint64(rflct, msg, field);
                
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_UINT64)
        {
            var value_list = lua.protobuf.reflection_getrepeateduint64(rflct, msg, field);
                
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_DOUBLE)
        {
            var value_list = lua.protobuf.reflection_getrepeateddouble(rflct, msg, field);
                
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_FLOAT)
        {
            var value_list = lua.protobuf.reflection_getrepeatedfloat(rflct, msg, field);
                
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_ENUM)
        {
            var value_list = lua.protobuf.reflection_getrepeatedint32(rflct, msg, field);
                
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_STRING)
        {
            var value_list = lua.protobuf.reflection_getrepeatedstring(rflct, msg, field);
        }
        elseif (this._cpp_type == lua.protobuf_cpptype.CPPTYPE_MESSAGE)
        {
            var value_list = lua.protobuf.reflection_getrepeatedmessage(rflct, msg, field);
            for (var index, value in value_list)
                this.AddChild(UtilityCreateTreeMessage(value, field_name));
        }

		this._item_title.text = "[repeated "..sub_type.."] "..field_name.." ";

	}

	private fun HandleAddClick(ALittle.UIClickEvent event)
	{
        
    }

    public fun CreateOneBefore(ALittle.DisplayObject child)
    {
        
    }

    public fun Delete(ALittle.DisplayObject child)
    {
        
    }
}
