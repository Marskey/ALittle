
namespace AUIPlugin;

// 壳入口函数
public async static __Browser_Setup(ALittle.DisplayLayout layer_group
                              , ALittle.ControlSystem control
                              , string module_base_path, string script_base_path
                              , string debug)
{
}

// 壳处理添加模块，layer_group是模块的层组
// 返回false，或者nil，表示不处理，下面的层直接挂姐在壳下面
public static __Browser_AddModule(string module_name, ALittle.DisplayLayout layer_group, ALittle.ModuleInfo module_info)
{
}

// 壳结束函数
public static __Browser_Shutdown()
{
}

protected var g_Control:ALittle.ControlSystem;
protected var g_ModuleBasePath:string;
protected var g_ScriptBasePath:string;

// 模块入口函数
public async static __Module_Setup(ALittle.DisplayLayout layer_group, ALittle.ControlSystem control
                                  , string module_base_path, string script_base_path, string debug)
{
}

// 模块结束函数
public static __Module_Shutdown()
{
}

// 提供给壳的模块信息
public static __Module_GetInfo(ALittle.ControlSystem control, string module_base_path, string script_base_path) : ALittle.ModuleShortInfo
{
    return null;
}

// 插件入口函数
public async static __Plugin_Setup(ALittle.ControlSystem control, string module_base_path, string script_base_path)
{
	g_Control = control;
	g_ModuleBasePath = module_base_path;
    g_ScriptBasePath = script_base_path;

    alittle.Require(script_base_path, "AUIIMEManager");
    alittle.Require(script_base_path, "AUIVersionManager");
    alittle.Require(script_base_path, "AUITool");
    alittle.Require(script_base_path, "AUIRightMenu");
    alittle.Require(script_base_path, "AUIWebLoginManager");
    g_AUIIMEManager.Setup();
}

// 插件入口函数
public static __Plugin_Shutdown()
{
    g_AUIIMEManager.Shutdown();
    g_AUITool.Shutdown();
}
