
namespace AUIPlugin;

public struct AUIRightMenuInfo
{
	string name;
	bool disabled;
	Functor<()> callback;
}

public class AUIRightMenu
{
	private ALittle.DisplayObject _menu;
	private ALittle.Linear _linear;

	private List<AUIRightMenuInfo> _info_list = new List<AUIRightMenuInfo>();

	public fun AddItem(string name, Functor<()> callback, [Nullable] bool disabled)
	{
		if (name == null) name = "";
		if (disabled == null) disabled = false;
		var info = new AUIRightMenuInfo();
		info.name = name;
		info.callback = callback;
		info.disabled = disabled;
		ALittle.List_Push(this._info_list, info);
    }

	public fun Show([Nullable] ALittle.DisplayObject target)
	{
		if (this._menu == null)
		{
			this._menu = g_Control.CreateControl{ALittle.DisplayObject}("ide_common_menu", this);
			var max_width = 0.0;
			for (var index, info in this._info_list)
			{
				var item = g_Control.CreateControl{ALittle.TextButton}("ide_common_item_button");
				item.text = info.name;
				if (item.show_text != null && item.show_text.width > max_width)
					max_width = item.show_text.width;
				item.disabled = info.disabled;
				item._user_data = info;
				item.AddEventListener(this, this.HandleItemClick);
				this._linear.AddChild(item);
			}   
			
			this._menu.width = max_width + 50;
			this._menu.height = this._linear.height + 10;
        }
		
		// 设置菜单的位置
		if (target != null)
		{
			var x, y = target.LocalToGlobal();
			this._menu.x = x;
			this._menu.y = y + target.height;   
        }
		else
		{
            this._menu.x = A_UISystem.mouse_x;
			this._menu.y = A_UISystem.mouse_y;
        }
        A_LayerManager.ShowFromRight(this._menu);
    }

	public fun Hide()
	{
		if (this._menu != null)
			A_LayerManager.HideFromRight(this._menu);
    }

	private fun HandleItemClick(ALittle.UIClickEvent event)
	{
		this.Hide();

        var info:AUIRightMenuInfo = event.target._user_data;
		if (info.callback != null)
			info.callback();
    }
}