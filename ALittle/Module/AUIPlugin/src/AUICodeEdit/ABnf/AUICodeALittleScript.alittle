
namespace AUIPlugin;

private var g_ALittleScriptColor:Map<int, ABnfColor>;

enum ALittleScriptColorType
{
    COMMENT = 1;
    DEFINE_NAME = 2;
    VAR_NAME = 3;
    CUSTOM_NAME = 4;
    CTRL_KEYWORD = 5;
    KEYWORD = 6;
    METHOD_NAME = 7;
    DEFAULT = 8;
    TEXT = 9;
}

public class AUICodeALittleScript : AUICodeLanguage
{
    public ctor(AUICodeProject project, string full_path, string module_path)
    {
        if (g_ALittleScriptColor == null)
        {
            g_ALittleScriptColor = new Map<int, ABnfColor>();
            var color:ABnfColor;
            {
                color = new ABnfColor();
                color.red = 87/255;
                color.green = 166/255;
                color.blue = 74/255;
                g_ALittleScriptColor[ALittleScriptColorType.COMMENT] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 78/255;
                color.green = 201/255;
                color.blue = 176/255;
                g_ALittleScriptColor[ALittleScriptColorType.DEFINE_NAME] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 218/255;
                color.green = 218/255;
                color.blue = 218/255;
                g_ALittleScriptColor[ALittleScriptColorType.VAR_NAME] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 156/255;
                color.green = 220/255;
                color.blue = 254/255;
                g_ALittleScriptColor[ALittleScriptColorType.CUSTOM_NAME] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 216/255;
                color.green = 160/255;
                color.blue = 223/255;
                g_ALittleScriptColor[ALittleScriptColorType.CTRL_KEYWORD] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 86/255;
                color.green = 156/255;
                color.blue = 214/255;
                g_ALittleScriptColor[ALittleScriptColorType.KEYWORD] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 220/255;
                color.green = 220/255;
                color.blue = 170/255;
                g_ALittleScriptColor[ALittleScriptColorType.METHOD_NAME] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 169/255;
                color.green = 183/255;
                color.blue = 198/255;
                g_ALittleScriptColor[ALittleScriptColorType.DEFAULT] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 214/255;
                color.green = 157/255;
                color.blue = 133/255;
                g_ALittleScriptColor[ALittleScriptColorType.TEXT] = color;   
            }
        }

        this._abnf_file = lua.alittlescript.create_alittlescript_file(project.project, module_path, full_path, "");
    }

    public fun OnRightMenu(AUIRightMenu menu)
    {
        menu.AddItem("生成", bind(this.GenerateLanguage, this, true));
    }

    public fun OnSave()
    {
        this.GenerateLanguage(false);
    }

    // 生成对应的代码
    public async fun GenerateLanguage(bool notice)
    {
        var error = this.Generate(this._full_path);
        if (error != null)
        {
            if (notice)
                g_AUITool.ShowNotice("错误", error.error.." 文件路径"..error.full_path);
            return;
        }

        if (notice)
            g_AUITool.ShowNotice("提示", "生成成功");
    }

    // 颜色查询
    public fun QueryColorValue(int tag) : ABnfColor { return g_ALittleScriptColor[tag]; }

    // 设置目标生成语言
    public fun SetTargetLanguage(string target_languaeg)
    {
        lua.alittlescript.alittlescriptproject_settargetlanguage(this._project.project, target_languaeg);
    }

    // 生成目标语言
    public await fun Generate(string full_path) : lua.ALittleScriptGenerateError
    {
        var query_id = this._project.Add(co);
        lua.alittlescript.alittlescriptproject_generate(this._project.project, query_id, full_path);
        return yield;
    }
}

public class AUICodeALittleScriptProject : AUICodeProject
{
    public get upper_ext() : string { return "ALITTLE"; }

    public fun OnTreeMenu(string full_path, AUIRightMenu menu)
    {

    }

    public fun OnTreeItemMenu(string full_path, AUIRightMenu menu)
    {
        
    }
}