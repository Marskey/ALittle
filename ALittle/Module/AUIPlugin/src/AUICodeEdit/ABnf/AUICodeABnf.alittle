
namespace AUIPlugin;

private var g_ABnfColor:Map<int, ABnfColor>;

enum ABnfColorType
{
    ABnfKeyWord = 1;
    ABnfId = 2;
    ABnfComment = 3;
    ABnfKey = 4;
    ABnfString = 5;
    ABnfRegex = 6;
}

struct ABnfProjectInfo
{
    AUICodeProject project;
}

protected var g_ABnfProjectInfo:ABnfProjectInfo = ALittle.CreateValueWeakMap();

public class AUICodeABnf : AUICodeLanguage
{
    public ctor(AUICodeProject project, string full_path)
    {
        if (this._project == null && g_ABnfProjectInfo.project == null)
        {
            var buffer = ALittle.File_ReadTextFromFile(g_ModuleBasePath.."/Other/ABnf/ABnf.abnf");
            if (buffer == null) buffer = "";

            var native_project = lua.abnf.create_abnf_project("", buffer);
            g_ABnfProjectInfo.project = new AUICodeProject(native_project);
            g_ABnfProjectInfo.project.Start();
        }

        if (this._project == null) this._project = g_ABnfProjectInfo.project;

        if (g_ABnfColor == null)
        {
            g_ABnfColor = new Map<int, ABnfColor>();
            var color:ABnfColor;
            {
                color = new ABnfColor();
                color.red = 255/255;
                color.green = 198/255;
                color.blue = 109/255;
                g_ABnfColor[ABnfColorType.ABnfKeyWord] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 204/255;
                color.green = 120/255;
                color.blue = 50/255;
                g_ABnfColor[ABnfColorType.ABnfId] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 128/255;
                color.green = 128/255;
                color.blue = 128/255;
                g_ABnfColor[ABnfColorType.ABnfComment] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 53/255;
                color.green = 155/255;
                color.blue = 185/255;
                g_ABnfColor[ABnfColorType.ABnfKey] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 85/255;
                color.green = 134/255;
                color.blue = 74/255;
                g_ABnfColor[ABnfColorType.ABnfString] = color;   
            }
            {
                color = new ABnfColor();
                color.red = 152/255;
                color.green = 118/255;
                color.blue = 170/255;
                g_ABnfColor[ABnfColorType.ABnfRegex] = color;   
            }
        }

        this._abnf_file = lua.abnf.create_abnf_file(this._project.project, full_path, "");
    }

    public fun OnOpen()
    {
        this._project.UpdateFile(this._full_path);
    }

    public fun OnShow()
    {
        
    }

    public fun OnHide()
    {
        
    }

    public fun OnClose()
    {
        this._project.RemoveFile(this._full_path);
    }

    // 颜色查询
    public fun QueryColorValue(int tag) : ABnfColor { return g_ABnfColor[tag]; }

    // 生成对应的代码
    public async fun GenerateABnf()
    {
        
    }

    // 查询错误信息
    public await fun Generate(string target_path, string language_name) : string
    {
        var query_id = this._project.Add(co);
        lua.abnf.abnffile_generate(this._abnf_file, query_id, this._version, target_path, language_name);
        return yield;
    }
}