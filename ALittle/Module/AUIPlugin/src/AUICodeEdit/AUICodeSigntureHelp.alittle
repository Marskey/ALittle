
namespace AUIPlugin;

struct AUICodeParamItemInfo
{
    List<ALittle.DisplayObject> text_list;
}

protected class AUICodeSigntruetureHelp
{
    private ALittle.DisplayLayout _dialog;
    private ALittle.DisplayLayout _text_container;
    private List<AUICodeParamItemInfo> _item_list;

    private lua.ABnfQuerySignatureHelp _signture_help;
    private int _line_start;
    private int _char_start;
    private AUICodeEdit _edit;

    public ctor(AUICodeEdit edit)
    {
        this._edit = edit;
    }

    public fun Shutdown()
    {
        this.Hide();
    }

    public async fun ShowSigntureHelp()
    {
        if (this._signture_help == null)
        {
            if (!this.ReInit())
            {
                this.Hide();
                return;
            }
        }

        this._line_start = this._edit.cursor.line;
        this._char_start = this._edit.cursor.char;
        var text = this._edit.GetTargetText(this._signture_help.line_start, this._signture_help.char_start - 1, this._edit.cursor.line, this._edit.cursor.char);
        if (text == null || text == "")
        {
            this.Hide();
            return;
        }

        if (!this.Fliter(0, 0))
        {
            this.Hide();

            if (!this.ReInit())
                return;

            this._line_start = this._edit.cursor.line;
            this._char_start = this._edit.cursor.char;
            text = this._edit.GetTargetText(this._signture_help.line_start, this._signture_help.char_start - 1, this._edit.cursor.line, this._edit.cursor.char);
            if (text == null || text == "")
                return;
            if (!this.Fliter(0, 0))
                this.Hide();
        }
    }

    public fun IsShow() : bool { return this._signture_help != null; }

    private await fun ReInit() : bool
    {
        if (this._edit.language == null) return false;
        this._signture_help = this._edit.language.QuerySigntureHelp(this._edit.cursor.line, this._edit.cursor.char - 1);
        if (this._signture_help == null) return false;
        
        // 计算坐标
        var x, y = this._edit.CalcPosition(this._signture_help.line_start, this._signture_help.char_start, true);
        y += CODE_LINE_HEIGHT;

        if (this._dialog == null)
        {
            this._dialog = g_Control.CreateControl{ALittle.DisplayLayout}("ide_tool_signture_tip");
            this._dialog.width = 200;
            this._dialog.AddEventListener(this, this.HandleHideEvent);
        }
        this._text_container.RemoveAllChild();

        this._dialog.x = x;
        this._dialog.y = y;

        this._item_list = new List<AUICodeParamItemInfo>();

        var offset = 0.0;
        for (var param_index, param in this._signture_help.param_list)
        {
            var info = new AUICodeParamItemInfo();
            info.text_list = new List<ALittle.DisplayObject>();
            var text_count = 0;

            var text_list = ALittle.String_SplitUTF8(param.name);
            var len = ALittle.List_MaxN(text_list);
            for (var index = len; index >= 1; -1)
            {
                var char = text_list[index];
                if (char == "\t")
                    offset += this._edit.ascii_width * 4;
                elseif (char == " ")
                    offset += this._edit.ascii_width;
                elseif (char != "\r" && char != "\n")
                {
                    var is_asicc = true;
                    [Language(Lua)]
                    {
                        var byte_count = lua.utf8.bytecount(char, 0, 1);
                        if (byte_count > 1) is_asicc = false;
                    }
                    [Language(JavaScript)]
                    {
                        var code = cast<javascript.String>(char).charCodeAt(0);
                        if (code > 255) is_asicc = false;
                    }

                    var text = new ALittle.Text(g_Control);
                    text.red = CODE_SIGNTURE_RED;
                    text.green = CODE_SIGNTURE_GREEN;
                    text.blue = CODE_SIGNTURE_BLUE;
                    text.text = char;
                    text.x = offset;
                    text.font_path = CODE_FONT_PATH;
                    text.font_size = CODE_FONT_SIZE;
                    this._text_container.AddChild(text);

                    if (is_asicc) offset += this._edit.ascii_width;
                    else offset += this._edit.word_width;

                    ++ text_count;
                    info.text_list[text_count] = text;
                }	
            }
            this._item_list[param_index] = info;
        }

        this._dialog.width = offset;

        A_LayerManager.ShowFromRight(this._dialog, false);

        return true;
    }

    private fun Fliter(int line, int char) : bool
    {
        var sort_list = new List<AUICodeCompleteItemInfo>();
        var count = 0;

        return true;
    }

    public fun Hide()
    {
        this._signture_help = null;
        this._edit.help_container.RemoveChild(this._dialog);
    }

    public fun TryHide()
    {
        if (this._signture_help == null) return;

            // 检查光标
        if (this._edit.cursor.line < this._signture_help.line_start || this._edit.cursor.line > this._line_start)
        {
            this.Hide();
            return;
        }

        if (this._edit.cursor.line == this._signture_help.line_start && this._edit.cursor.char < this._signture_help.char_start)
        {
            this.Hide();
            return;
        }

        if (this._edit.cursor.line == this._line_start && this._edit.cursor.char > this._char_start)
        {
            this.Hide();
            return;
        }
    }

    private fun HandleHideEvent(ALittle.UIHideEvent event)
    {
        this._edit = null;
        this._signture_help = null;
    }
}