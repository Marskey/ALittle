
namespace AUIPlugin;

private var LINE_HEIGHT = 18;
private var PAD_HEIGHT = 100;
private var FONT_SIZE = 14;
private var FONT_PATH = "YaHei-Consolas.ttf";
private var FONT_RED = 169/255;
private var FONT_GREEN = 183/255;
private var FONT_BLUE = 198/255;
private var SELECT_RED = 33/255;
private var SELECT_GREEN = 66/255;
private var SELECT_BLUE = 131/255;

protected var g_DefaultColor = new ABnfColor();
g_DefaultColor.alpha = 1;
g_DefaultColor.red = FONT_RED;
g_DefaultColor.green = FONT_GREEN;
g_DefaultColor.blue = FONT_BLUE;

private var FOCUS_RED = 88/255;
private var FOCUS_GREEN = 157/255;
private var FOCUS_BLUE = 246/255;

protected struct AUICodeCharInfo
{
    string char;
    ALittle.Text text;
    double red; double green; double blue;
    double pre_width;
    double width;
}

protected struct AUICodeLineInfo
{
    List<AUICodeCharInfo> char_list;
    int char_count;
    AUICodeLineContainer container;
    AUICodeEdit edit;
}

protected struct AUICodeErrorInfo
{
    ALittle.DisplayObject _focus_quad;
    string error;
}

protected class AUICodeQuad : ALittle.Quad
{
    public get is_input() : bool { return true; }
    public get editable() : bool { return true; }
    public get font_size() : int { return FONT_SIZE; }
    public get cursor_x() : double
    {
        var tab_child = cast<AUICodeEdit>(this._user_data);
        return tab_child.cursor.x;
    }
    public get cursor_y() : double
    {
        var tab_child = cast<AUICodeEdit>(this._user_data);
        return tab_child.cursor.y;
    }
    public get cursor_b() : double
    {
        var tab_child = cast<AUICodeEdit>(this._user_data);
        return tab_child.cursor.y + tab_child.cursor.height;
    }
}

protected class AUICodeLinear : ALittle.Linear
{
}

protected class AUICodeLineContainer : ALittle.DisplayLayout
{
    private bool _showd = false;
    private int _version = 0;
    private ALittle.LoopTimer _delay_loop = null;
    private Functor<()> _set_color;

    public ALittle.Quad _select;  // 选择底色
    public ALittle.DisplayLayout _error;    // 查找容器
    public ALittle.DisplayLayout _text;    // 文本容器

    public ctor(ALittle.ControlSystem ctrl_sys)
    {
        // 用于算则显示
        var quad = new ALittle.Quad(ctrl_sys);
        quad = new ALittle.Quad(g_Control);
        quad.red = SELECT_RED;
        quad.green = SELECT_GREEN;
        quad.blue = SELECT_BLUE;
        quad.height = LINE_HEIGHT;
        quad.visible = false;
        this.AddChild(quad);
        this._select = quad;

        // 用于显示错误容器
        var error = new ALittle.DisplayLayout(ctrl_sys);
        error.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        error.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this.AddChild(error);
        this._error = error;

        // 用于显示文本
        var text = new ALittle.DisplayLayout(ctrl_sys);
        text.width_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        text.height_type = ALittle.UIEnumTypes.SIZE_MARGIN;
        this.AddChild(text);
        this._text = text;

        this.AddEventListener(this, this.HandleHide);
        this.AddEventListener(this, this.HandleShow);
    }

    public fun AddChar(AUICodeCharInfo char)
    {
        // 如果已经创建了text，那就直接复用
        if (char.text != null)
            this._text.AddChild(char.text);

        if (!this._showd) return;

        // 构建文本
        if (char.text == null && char.width > 0
            && char.char != " " && char.char != "\t")
        {
            char.text = new ALittle.Text(g_Control);
            char.text.disabled = true;
            char.text.red = char.red;
            char.text.green = char.green;
            char.text.blue = char.blue;
            char.text.font_path = FONT_PATH;
            char.text.font_size = FONT_SIZE;
            char.text.text = char.char;
            char.text.x = char.pre_width;
            this._text.AddChild(char.text);
        }

        // 查询颜色
        var line = cast<AUICodeLineInfo>(this._user_data);
        if (this._delay_loop == null && line.edit.language != null && line.edit.language.version != this._version)
        {
            this._delay_loop = new ALittle.LoopTimer(bind(this.HandleColor, this), 1);
            this._delay_loop.Start();
        }
    }

    public fun RestoreColor()
    {
        this._set_color = null;
        if (this._delay_loop != null) return;

        this._version = 0;
        this._delay_loop = new ALittle.LoopTimer(bind(this.HandleColor, this), 1);
        this._delay_loop.Start();
    }

    public fun SetColor(int char_start, int char_end, double red, double green, double blue)
    {
        if (this._delay_loop != null)
        {
            this._set_color = bind(this.SetColor, this, char_start, char_end, red, green, blue);
            return;
        }

        var line = cast<AUICodeLineInfo>(this._user_data);
        for (var i = char_start; i <= char_end; 1)
        {
            var child = line.char_list[i];
            if (child != null && child.text != null)
            {
                child.text.red = red;
                child.text.green = green;
                child.text.blue = blue;
            }
        }   
    }

    private async fun HandleColor()
    {
        this._delay_loop = null;

        // 如果已经没有父节点，那么直接返回
        if (this.parent == null) return;
        
        var line = cast<AUICodeLineInfo>(this._user_data);
        if (this._version == line.edit.language.version) return;
        this._version = line.edit.language.version;
        var line_index = ALittle.Math_Floor(this.y / LINE_HEIGHT) + 1;
        if (line_index < 1 || line_index > line.edit.line_count) return;

        var list = line.edit.language.QueryColor(line_index);
        for (var index, info in list)
        {
            var char_start = 1;
            if (info.line_start == line_index)
                char_start = info.char_start;
            var char_end = line.char_count;
            if (info.line_end == line_index)
                char_end = info.char_end;

            var color = line.edit.language.QueryColorValue(info.tag);
            if (color == null) color = g_DefaultColor;

            for (var i = char_start; i <= char_end; 1)
            {
                var child = line.char_list[i];
                if (child != null && child.text != null)
                {
                    child.text.red = color.red;
                    child.text.green = color.green;
                    child.text.blue = color.blue;
                    if (info.blur)
                        child.text.alpha = 0.5;   
                    else
                        child.text.alpha = 1;   
                }
            }
        }

        if (this._set_color != null)
        {
            this._set_color();
            this._set_color = null;
        }
    }

    private fun HandleHide(ALittle.UIHideEvent event)
    {
    }

    private fun HandleShow(ALittle.UIShowEvent event)
    {
        if (!this._showd)
        {
            this._showd = true;

            var line = cast<AUICodeLineInfo>(this._user_data);
            for (var index, char in line.char_list)
            {
                if (char.text == null && char.width > 0
                    && char.char != " " && char.char != "\t")
                {
                    char.text = new ALittle.Text(g_Control);
                    char.text.disabled = true;
                    char.text.red = FONT_RED;
                    char.text.green = FONT_GREEN;
                    char.text.blue = FONT_BLUE;
                    char.text.font_path = FONT_PATH;
                    char.text.font_size = FONT_SIZE;
                    char.text.text = char.char;
                    char.text.x = char.pre_width;
                    this._text.AddChild(char.text);
                }
            }
        }
        
        // 查询颜色
        var line = cast<AUICodeLineInfo>(this._user_data);
        if (this._delay_loop == null && line.edit.language != null && line.edit.language.version != this._version)
        {
            this._delay_loop = new ALittle.LoopTimer(bind(this.HandleColor, this), 1);
            this._delay_loop.Start();
        }
    }
}

protected class AUICodeEditContainer : ALittle.DisplayLayout
{
    protected fun ClipRect(double x, double y, double width, double height, double h_move, double v_move)
    {
        cast<AUICodeLinear>(this._user_data).ClipRect(x - this._x, y - this._y, width - this._x, height - this._y, h_move, v_move);
    }
}

public struct AUICodeEditGotoEvent : ALittle.UIEvent
{
    string file_path;
    int line_start;
    int char_start;
    int line_end;
    int char_end;
}

public class AUICodeEdit : ALittle.DisplayLayout
{
    private AUICodeLanguage _language;  // 代码解析器

    private int _query_info_version;
    private lua.ABnfQueryInfo _query_info;
    private bool _in_query_info = false;

    private ALittle.LoopTimer _error_loop;  // 显示错误信息的定时器

    private ALittle.ScrollScreen _code_screen;  // 滚动屏幕
	private AUICodeLinear _code_linear;      // 代码容器
    private ALittle.DisplayLayout _cursor_container;    // 光标容器
    private ALittle.DisplayLayout _error_container;     // 错误容器
    private AUICodeQuad _edit_quad;           // 编辑区
    private ALittle.DisplayObject _goto_quad;   // goto的下划线
    private bool _move_in = false;

    protected AUICodeCursor _cursor;
    protected AUICodeSelectCursor _select_cursor;

    private List<AUICodeLineInfo> _line_list = new List<AUICodeLineInfo>();
    private int _line_count = 0;

    // 用于计算文本
    private ALittle.Text _text_show;

    // 因为是等宽，所以可以事先计算一下字体宽度
    private double _ascii_width;    // ascii的宽度
    private double _word_width;     // 中文的宽度

    // 文件路径
    private string _file_path;
	private ALittle.RevokeList _revoke_list;         // 撤销操作列表

    // 记录当前ErrorQuad
    private ALittle.DisplayObject _error_quad_move_in;
    private bool _in_drag = false;
    private bool _force_query_error = false;

	public fun TCtor()
	{
        this._code_screen.AddEventListener(this, this.HandleFocusIn);
        this._code_screen.AddEventListener(this, this.HandleFocusOut);
        this._code_screen.AddEventListener(this, this.HandleMoveIn);
        this._code_screen.AddEventListener(this, this.HandleMoveOut);
        this._code_screen.AddEventListener(this, this.HandleLButtonDown);
        this._code_screen.AddEventListener(this, this.HandleDragBegin);
        this._code_screen.AddEventListener(this, this.HandleDrag);
        this._code_screen.AddEventListener(this, this.HandleDragEnd);
        this._code_screen.AddEventListener(this, this.HandleKeyDown);
        this._code_screen.AddEventListener(this, this.HandleKeyUp);
        this._code_screen.AddEventListener(this, this.HandleTextInput);
        this._code_screen.AddEventListener(this, this.HandleMouseMove);
        this._code_screen.AddEventListener(this, this.HandleChangedEvent);

		// 创建编辑容器
        this._code_screen.container = new AUICodeEditContainer(this._ctrl_sys);
        this._edit_quad._user_data = this;
        this._goto_quad.visible = false;
        this._code_screen.container._user_data = this._code_linear;

        this._cursor = new AUICodeCursor(this._ctrl_sys, this);
        this._cursor.width = 1;
        this._cursor.height = LINE_HEIGHT;
        this._cursor_container.AddChild(this._cursor);
        this._cursor.disabled = true;

        this._select_cursor = new AUICodeSelectCursor(this);

        this._text_show = new ALittle.Text(this._ctrl_sys);
        this._text_show.font_path = "YaHei-Consolas.ttf";
        this._text_show.font_size = 14;

        this._ascii_width = this._text_show.native_show.CalcTextWidth("A");
        this._word_width = this._text_show.native_show.CalcTextWidth("测");
    }

    public get is_input() : bool { return true; }
    public get editable() : bool { return true; }
    public get font_size() : int { return FONT_SIZE; }
    public get cursor_x() : double { return this._edit_quad.cursor_x; }
    public get cursor_y() : double { return this._edit_quad.cursor_y; }
    public get cursor_b() : double { return this._edit_quad.cursor_b; }

    public get code_screen() : ALittle.ScrollScreen { return this._code_screen; }
    public get code_linear() : AUICodeLinear { return this._code_linear; }
    public get cursor() : AUICodeCursor { return this._cursor; }
    public get select_cursor() : AUICodeSelectCursor { return this._select_cursor; }
    public get language() : AUICodeLanguage { return this._language; }
    public get ascii_width() : double { return this._ascii_width; }
    public set line_count(int count) { this._line_count = count; }
    public get line_count() : int { return this._line_count; }
    public get line_list() : List<AUICodeLineInfo> { return this._line_list; }
    public get line_height() : int { return LINE_HEIGHT; }
    public get revoke_list() : ALittle.RevokeList { return this._revoke_list; }

    public fun FocusLineCharToCenter(int it_line, int it_char)
    {
        var line = this._line_list[it_line];
        if (line == null) return;
        var char = line.char_list[it_char];
        if (char == null) char = line.char_list[1];

        var y = (it_line - 1) * LINE_HEIGHT;
        var x = char.pre_width;
   
        var real_width = this._code_screen.container.width - this._code_screen.view_width;
        if (real_width > 0)
        {
            var view_x = this._code_screen.view_width / 2;
            var center_x = x;
            this._code_screen.bottom_scrollbar.offset_rate = (center_x - view_x) / real_width;
        }

        var real_height = this._code_screen.container.height - this._code_screen.view_height;
        if (real_height > 0)
        {
            var view_y = this._code_screen.view_height / 2;
            var center_y = y;
            this._code_screen.right_scrollbar.offset_rate = (center_y - view_y) / real_height;
        }
        this._code_screen.RejustScrollBar();
    }

    public fun FocusLineCharToUp(int it_line, int it_char)
    {
        var line = this._line_list[it_line];
        if (line == null) return;

        var real_height = this._code_screen.container.height - this._code_screen.view_height;
        if (real_height > 0)
        {
            this._code_screen.right_scrollbar.offset_rate = (it_line - 1) * LINE_HEIGHT / real_height;
            this._code_screen.RejustScrollBar();   
        }
    }

    public fun FocusLineCharToDown(int it_line, int it_char)
    {
        var line = this._line_list[it_line];
        if (line == null) return;

        var real_height = this._code_screen.container.height - this._code_screen.view_height;
        if (real_height > 0)
        {
            this._code_screen.right_scrollbar.offset_rate = (it_line * LINE_HEIGHT - this._code_screen.view_height) / real_height;
            this._code_screen.RejustScrollBar();   
        }
    }

    private fun HandleFocusIn(ALittle.UIFocusInEvent event)
    {
        ALittle.System_OpenIME();
    }

    private fun HandleFocusOut(ALittle.UIFocusOutEvent event)
    {
        ALittle.System_CloseIME();
    }

    private fun HandleMoveIn(ALittle.UIMoveInEvent event)
    {
        this._move_in = true;
        ALittle.System_SetEditCursor();
    }

    private fun HandleMoveOut(ALittle.UIMoveOutEvent event)
    {
        this.StopQueryInfo();
        this._move_in = false;
        ALittle.System_SetNormalCursor();
    }
    
    private fun HandleLButtonDown(ALittle.UILButtonDownEvent event)
    {
        this._select_cursor.Hide();
        this._cursor.SetOffsetXY(event.rel_x, event.rel_y);
        
        // 如果多次点击，那么就选中文本
        if (event.count > 1)
        {
            var it_start, it_end = this._cursor.CalcSelectWord();
            if (it_start == null) return;
            this._cursor.SetLineChar(this._cursor.line, it_end);
            this._select_cursor.StartLineChar(this._cursor.line, it_start);
            this._select_cursor.UpdateLineChar(this._cursor.line, it_end);
        }

        if (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_CTRL] && this._query_info != null && this._language != null)
        {
            var it_line, it_char = this.CalcLineAndChar(event.rel_x, event.rel_y);
            this.DoQueryGoto(it_line, it_char);
            this.StopQueryInfo();
        }

        this._cursor.RejustShowCursor();
    }

    private async fun DoQueryGoto(int it_line, int it_char)
    {
        var info = this._language.QueryGoto(it_line, it_char);
        if (info != null)
        {
            if (info.file_path == this._file_path)
            {
                this._cursor.SetLineChar(info.line_start, info.char_start - 1);
                this._select_cursor.StartLineChar(info.line_start, info.char_start - 1);
                this._select_cursor.UpdateLineChar(info.line_end, info.char_end);
                this.FocusLineCharToCenter(this._cursor.line, this._cursor.char);
            }
            // 对外发送事件，让外面打开，然后再聚焦到某个代码段
            else
            {
                var goto_event = new AUICodeEditGotoEvent();
                goto_event.file_path = info.file_path;
                goto_event.line_start = info.line_start;
                goto_event.char_start = info.char_start;
                goto_event.line_end = info.line_end;
                goto_event.char_end = info.char_end;
                this.DispatchEvent(goto_event);
            }
        }
    }

    private fun HandleDragBegin(ALittle.UIButtonDragBeginEvent event)
    {
        if (this._error_quad_move_in != null)
        {
            g_AUITool.HideTip();
            this._error_quad_move_in = null;
        }

        this._in_drag = true;
        this._cursor.SetOffsetXY(event.rel_x, event.rel_y);
        this._select_cursor.StartLineChar(this._cursor.line, this._cursor.char);
    }

    private fun HandleDrag(ALittle.UIButtonDragEvent event)
    {
        this._cursor.SetOffsetXY(event.rel_x, event.rel_y);
        this._select_cursor.UpdateLineChar(this._cursor.line, this._cursor.char);
    }

    private fun HandleDragEnd(ALittle.UIButtonDragEndEvent event)
    {
        this._select_cursor.TryHide();
        this._in_drag = false;
    }


    private fun HandleMouseMove(ALittle.UIMouseMoveEvent event)
    {
        // 显示错误的TIP
        if (!this._in_drag)
        {
            var item = this._error_container.PickUp(event.rel_x, event.rel_y);
            if (item != this._error_quad_move_in)
            {
                if (this._error_quad_move_in != null) g_AUITool.HideTip();
                this._error_quad_move_in = item;
                if (item != null)
                {
                    var item_info = cast<AUICodeErrorInfo>(item._user_data);
                    var x, y = item.LocalToGlobal();
                    var center_x = x + item.width / 2;
                    var center_y = y;
                    g_AUITool.ShowTip(item_info.error);
                    var tip_width, tip_height = g_AUITool.GetTipSize();
                    g_AUITool.MoveTip(center_x - tip_width / 2, center_y - tip_height);
                }
            }   
        }

        if (!A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_CTRL]) return;

        this.UpdateQueryInfo(event.rel_x, event.rel_y);
    }

    private async fun UpdateQueryInfo(double x, double y)
    {
        if (this._language == null)
        {
            ALittle.System_SetEditCursor();
            return;
        }

        if (this._in_query_info)
        {
            if (this._query_info == null)
                ALittle.System_SetEditCursor();
            else
                ALittle.System_SetHandCursor();
            return;
        }

        var it_line, it_char = this.CalcLineAndChar(x, y);
        this._in_query_info = true;
        var info = this._language.QueryInfo(it_line, it_char);
        if (this._in_query_info == false || info == null)
        {
            if (this._query_info != null)
            {
                g_AUITool.HideTip();
                this._goto_quad.visible = false;
                var line_container = cast<AUICodeLineContainer>(this._code_linear.GetChildByIndex(this._query_info.line_start));
                if (line_container != null) line_container.RestoreColor();
                this._query_info = null;
            }
            ALittle.System_SetEditCursor();
            return;
        }
        this._in_query_info = false;

        if (this._query_info != null
            && this._query_info.line_start == info.line_start
            && this._query_info.char_start == info.char_start
            && this._query_info.line_end == info.line_end
            && this._query_info.char_end == info.char_end
            && this._query_info_version == this._language.version)
        {
            ALittle.System_SetHandCursor();
            return;
        }

        if (this._query_info != null)
        {
            g_AUITool.HideTip();
            this._goto_quad.visible = false;
            var line_container = cast<AUICodeLineContainer>(this._code_linear.GetChildByIndex(this._query_info.line_start));
            if (line_container != null) line_container.RestoreColor();   
            this._query_info = null;
        }

        var line = this._line_list[info.line_start];

        var quad_x, quad_y = this._edit_quad.LocalToGlobal();
        var char_end = info.char_end;
        if (line != null && info.line_start != info.line_end) info.char_end = line.char_count;
        var rect_x, rect_y, rect_width = this.CalcRect(info.line_start, info.char_start, char_end);

        // 如果这个时候鼠标已经移走，那么就清空
        if (A_UISystem.mouse_x < quad_x + rect_x || A_UISystem.mouse_x >= quad_x + rect_x + rect_width
            || A_UISystem.mouse_y < quad_y + rect_y || A_UISystem.mouse_y >= quad_y + rect_y + LINE_HEIGHT)
        {
            ALittle.System_SetEditCursor();
            return;
        }

        this._query_info_version = this._language.version;
        this._query_info = info;

        var line_container = cast<AUICodeLineContainer>(this._code_linear.GetChildByIndex(info.line_start));
        if (line != null && line_container != null)
        {
            if (info.line_start == info.line_end)
                line_container.SetColor(info.char_start, info.char_end, FOCUS_RED, FOCUS_GREEN, FOCUS_BLUE);
            else
                line_container.SetColor(info.char_start, line.char_count, FOCUS_RED, FOCUS_GREEN, FOCUS_BLUE);
        }

        g_AUITool.ShowTip(info.info);
        
        var center_x = rect_x + rect_width / 2 + quad_x;
        var center_y = rect_y + quad_y;
        var tip_width, tip_height = g_AUITool.GetTipSize();
        
        // 把内容放在头部
        g_AUITool.MoveTip(center_x - tip_width / 2, center_y - tip_height);

        this._goto_quad.x = rect_x;
        this._goto_quad.y = rect_y;
        this._goto_quad.width = rect_width;
        this._goto_quad.height = LINE_HEIGHT;
        this._goto_quad.visible = true;

        ALittle.System_SetHandCursor();
    }

    private fun StopQueryInfo()
    {
        if (this._language == null) return;
        this._in_query_info = false;

        this._query_info_version = null;

        if (this._query_info != null)
        {
            var line_container = cast<AUICodeLineContainer>(this._code_linear.GetChildByIndex(this._query_info.line_start));
            if (line_container != null) line_container.RestoreColor();
        }

        g_AUITool.HideTip();
        this._query_info = null;
        this._goto_quad.visible = false;
    }

    private async fun UpdateErrorInfo()
    {
        g_AUITool.HideTip();
        this._error_quad_move_in = null;
        this._error_container.RemoveAllChild();
        var list = this._language.QueryError(this._force_query_error);
        if (list == null) return;

        for (var index, info in list)
        {
            var item_info = new AUICodeErrorInfo();
            var item = g_Control.CreateControl{ALittle.DisplayObject}("ide_code_error_item", item_info);
            var line = this._line_list[info.line_start];
            var char_end = info.char_end;
            if (info.line_start != info.line_end) info.char_end = line.char_count;
            var x, y, width = this.CalcRect(info.line_start, info.char_start, char_end);
            item.x = x;
            item.y = y;
            item.width = width;
            item.height = LINE_HEIGHT;
            item_info.error = info.error;
            item_info._focus_quad._user_data = item_info;
            this._error_container.AddChild(item);
        }
    }

    private fun HandleChangedEvent(ALittle.UIChangedEvent event)
    {
        if (this._language == null) return;

        // 获取显示的行，然后进行颜色处理
        var map = this._code_linear.GetShowMap();
        for (var object:AUICodeLineContainer, _ in map)
            object.RestoreColor();

        this.StartErrorLoop(false);
    }

    private fun StartErrorLoop(bool force)
    {
        this._force_query_error = force;
        if (this._error_loop == null)
            this._error_loop = new ALittle.LoopTimer(bind(this.UpdateErrorInfo, this), 1000);

        this._error_loop.Stop();
        this._error_loop.Reset();
        this._error_loop.Start();        
    }

    // 计算行列
    public fun CalcLineAndChar(double x, double y) : int, int
    {
        var it_line = ALittle.Math_Floor(y / LINE_HEIGHT) + 1;
        if (it_line < 1) it_line = 1;
        elseif (it_line > this._line_count) it_line = this._line_count;

        var it_char:int = 0;
        var line = this._line_list[it_line];
        if (line == null) return it_line, it_char;
        if (line.char_count == 0) return it_line, 0;

        var pre_width = line.char_list[1].width / 2;
        if (x < line.char_list[1].width / 2) return it_line, 0;

        for (var index = 1; index < line.char_count; 1)
        {
            var next_width = pre_width + line.char_list[index].width / 2 + line.char_list[index + 1].width / 2;
            if (x >= pre_width && x < next_width)
                return it_line, index;
            pre_width = next_width;
        }
        var count = line.char_count;
        while (count > 0 && line.char_list[count].width <= 0)
            -- count;
        return it_line, count;
    }

    // 计算坐标，获取x，y，宽度
    public fun CalcRect(int it_line, int char_start, int char_end) : double, double, double
    {
        var line = this._line_list[it_line];
        if (line == null) return 0,0,0;

        var y = (it_line - 1) * LINE_HEIGHT;
        
        var x = 0.0;
        if (line.char_list[char_start] != null) x = line.char_list[char_start].pre_width;

        var width = 0.0;
        var char_e = line.char_list[char_end];
        if (char_e != null) width = char_e.pre_width + char_e.width - x;

        return x, y, width;
    }

    // 计算相对坐标
    public fun CalcPosition(int it_line, int it_char, bool pre) : double, double
    {
        var line = this._line_list[it_line];
        if (line == null) return 0, 0;

        var y = (it_line - 1) * LINE_HEIGHT;
        var x = 0.0;
        if (it_char > 0)
        {
            x = line.char_list[it_char].pre_width;
            if (!pre) x += line.char_list[it_char].width;
        }
            
        return x, y;
    }

    // 计算绝对坐标
    public fun CalcAbsPosition(int it_line, int it_char, bool pre) : double, double
    {
        var x, y = this.CalcPosition(it_line, it_char, pre);
        var abs_x, abs_y = this._edit_quad.LocalToGlobal();
        return abs_x + x, abs_y + y;
    }

    // 上色
    public fun BrushColor(int line_start, int char_start, int line_end, int char_end, double red, double green, double blue)
    {
        if (line_start == line_end)
        {
            var line = this._line_list[line_start];
            for (var it_char = char_start + 1; it_char <= char_end; 1)
            {
                var char = line.char_list[it_char];
                char.red = red; char.green = green; char.blue = blue;
                if (char.text != null) { char.text.red = red; char.text.green = green; char.text.blue = blue; }
            }
            return;
        }

        for (var it_line = line_start; it_line <= line_end; 1)
        {
            var line = this._line_list[it_line];
            if (it_line == line_start)
            {
                for (var it_char = char_start + 1; it_char <= line.char_count; 1)
                {
                    var char = line.char_list[it_char];
                    char.red = red; char.green = green; char.blue = blue;
                    if (char.text != null) { char.text.red = red; char.text.green = green; char.text.blue = blue; }
                }
            }
            elseif (it_line == line_end)
            {
                for (var it_char = 1; it_char <= char_end; 1)
                {
                    var char = line.char_list[it_char];
                    char.red = red; char.green = green; char.blue = blue;
                    if (char.text != null) { char.text.red = red; char.text.green = green; char.text.blue = blue; }
                }
            }
            else
            {
                for (var it_char = 1; it_char <= line.char_count; 1)
                {
                    var char = line.char_list[it_char];
                    char.red = red; char.green = green; char.blue = blue;
                    if (char.text != null) { char.text.red = red; char.text.green = green; char.text.blue = blue; }
                }
            }
        }
    }

    // 删除选择行
    public fun DeleteSelectText() : bool
    {
        var result, it_line, it_char = this._select_cursor.DeleteSelect(true);
        if (result) this._cursor.SetLineChar(it_line, it_char);
        return result;
    }

    private fun HandleTextInput(ALittle.UITextInputEvent event)
    {
        var text = this._cursor.virtual_indent..event.text;
        if (this.InsertText(text, true))
        {
            if (this._language != null)
            {
                var auto_pair = this._language.QueryAutoPair(this._cursor.line, this._cursor.char, event.text);
                if (auto_pair != null)
                {
                    if (this._cursor.GetNextCharInLine() != auto_pair)
                    {
                        var old_line = this._cursor.line;
                        var old_char = this._cursor.char;
                        this.InsertText(auto_pair, true);
                        this._cursor.SetLineChar(old_line, old_char);
                    }
                }
            }

            this.DispatchEvent(new ALittle.UIChangedEvent());
            g_AUICodeCompleteScreen.ShowComplete(this);
        }   
    }

    private fun HandleKeyDown(ALittle.UIKeyDownEvent event)
    {
        // 标记是否需要发送CHANGE事件
        var is_change = false;
        // 处理键盘按键
        if (event.sym == ALittle.UIEnumTypes.KEY_LEFT)
        {
            if (ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_SHIFT) == 0)
            {
                if (this._select_cursor.line_start != null)
                    this._select_cursor.Hide();
                else
                    this._cursor.OffsetLeft(ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_CTRL) != 0);
                this._cursor.RejustShowCursor();
                g_AUICodeCompleteScreen.TryHide(this);
            }
            else
            {
                if (this._select_cursor.line_start == null)
                    this._select_cursor.StartLineChar(this._cursor.line, this._cursor.char);
                this._cursor.OffsetLeft(ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_CTRL) != 0);
                if (this._cursor.line == this._select_cursor.line_start && this._cursor.char == this._select_cursor.char_start)
                    this._cursor.OffsetLeft(ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_CTRL) != 0);
                this._select_cursor.UpdateLineChar(this._cursor.line, this._cursor.char);
                g_AUICodeCompleteScreen.Hide();
            }

			event.handled = true;
        }
        elseif (event.sym == ALittle.UIEnumTypes.KEY_UP)
        {
            if (g_AUICodeCompleteScreen.IsShow())
            {
                g_AUICodeCompleteScreen.SelectUp();   
            }
            else
            {
                if (ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_SHIFT) == 0)
                {
                    if (this._select_cursor.line_start != null)
                        this._select_cursor.Hide();
                    else
                        this._cursor.OffsetUp();
                    this._cursor.RejustShowCursor();
                }
                else
                {
                    if (this._select_cursor.line_start == null)
                        this._select_cursor.StartLineChar(this._cursor.line, this._cursor.char);
                    this._cursor.OffsetUp();
                    if (this._cursor.line == this._select_cursor.line_start && this._cursor.char == this._select_cursor.char_start)
                        this._cursor.OffsetUp();
                    this._select_cursor.UpdateLineChar(this._cursor.line, this._cursor.char);   
                }
                var offset_y = this._cursor.y + this._code_screen.container_y;
                if (offset_y < 0) this.FocusLineCharToUp(this._cursor.line, this._cursor.char);
                g_AUICodeCompleteScreen.Hide();
            }
			event.handled = true;
        }
        elseif (event.sym == ALittle.UIEnumTypes.KEY_DOWN)
        {
            if (g_AUICodeCompleteScreen.IsShow())
            {
                g_AUICodeCompleteScreen.SelectDown();   
            }
            else
            {
                if (ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_SHIFT) == 0)
                {
                    if (this._select_cursor.line_start != null)
                        this._select_cursor.Hide();
                    else
                        this._cursor.OffsetDown();
                    this._cursor.RejustShowCursor();
                }
                else
                {
                    if (this._select_cursor.line_start == null)
                        this._select_cursor.StartLineChar(this._cursor.line, this._cursor.char);
                    this._cursor.OffsetDown();
                    if (this._cursor.line == this._select_cursor.line_start && this._cursor.char == this._select_cursor.char_start)
                        this._cursor.OffsetDown();
                    this._select_cursor.UpdateLineChar(this._cursor.line, this._cursor.char);   
                }
                var offset_y = this._cursor.y + this._cursor.height + this._code_screen.container_y;
                if (offset_y > this._code_screen.view_height) this.FocusLineCharToDown(this._cursor.line, this._cursor.char);
                g_AUICodeCompleteScreen.Hide();
            }
			event.handled = true;
        }
        elseif (event.sym == ALittle.UIEnumTypes.KEY_RIGHT)
        {
            if (ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_SHIFT) == 0)
            {
                if (this._select_cursor.line_start != null)
                    this._select_cursor.Hide();
                else
                    this._cursor.OffsetRight(ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_CTRL) != 0);
                this._cursor.RejustShowCursor();
                g_AUICodeCompleteScreen.TryHide(this);
            }
            else
            {
                if (this._select_cursor.line_start == null)
                    this._select_cursor.StartLineChar(this._cursor.line, this._cursor.char);
                this._cursor.OffsetRight(ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_CTRL) != 0);
                if (this._cursor.line == this._select_cursor.line_start && this._cursor.char == this._select_cursor.char_start)
                    this._cursor.OffsetRight(ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_CTRL) != 0);
                this._select_cursor.UpdateLineChar(this._cursor.line, this._cursor.char);   
                g_AUICodeCompleteScreen.Hide();
            }
			event.handled = true;
        }
        elseif (event.sym == ALittle.UIEnumTypes.KEY_BACKSPACE)
        {
            if (this._select_cursor.line_start == null)
            {
                is_change = this._cursor.DeleteLeft(true);
                this._cursor.RejustShowCursor();
                g_AUICodeCompleteScreen.TryHide(this);
                if (g_AUICodeCompleteScreen.IsShow())
                    g_AUICodeCompleteScreen.ShowComplete(this);
            }
            else
            {
                is_change = this.DeleteSelectText();
                g_AUICodeCompleteScreen.Hide();
            }
			event.handled = true;
        }
        elseif (event.sym == ALittle.UIEnumTypes.KEY_DELETE)
        {
            if (this._select_cursor.line_start == null)
            {
                is_change = this._cursor.DeleteRight(true);
            }
            else
            {
                is_change = this.DeleteSelectText();
            }
			event.handled = true;
        }
        elseif (event.sym == ALittle.UIEnumTypes.KEY_HOME)
        {
            if (ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_SHIFT) == 0)
            {
                if (this._select_cursor.line_start != null)
                    this._select_cursor.Hide();
                else
                    this._cursor.OffsetHome();
                g_AUICodeCompleteScreen.TryHide(this);
            }
            else
            {
                if (this._select_cursor.line_start == null)
                    this._select_cursor.StartLineChar(this._cursor.line, this._cursor.char);
                this._cursor.OffsetHome();
                this._select_cursor.UpdateLineChar(this._cursor.line, this._cursor.char);  
                g_AUICodeCompleteScreen.Hide(); 
            }
            event.handled = true;
        }
        elseif (event.sym == ALittle.UIEnumTypes.KEY_END)
        {
            if (ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_SHIFT) == 0)
            {
                if (this._select_cursor.line_start != null)
                    this._select_cursor.Hide();
                else
                    this._cursor.OffsetEnd();
                g_AUICodeCompleteScreen.TryHide(this);
            }
            else
            {
                if (this._select_cursor.line_start == null)
                    this._select_cursor.StartLineChar(this._cursor.line, this._cursor.char);
                this._cursor.OffsetEnd();
                this._select_cursor.UpdateLineChar(this._cursor.line, this._cursor.char); 
                g_AUICodeCompleteScreen.Hide();   
            }
			event.handled = true;
        }
        elseif (event.sym == ALittle.UIEnumTypes.KEY_ENTER || event.sym == ALittle.UIEnumTypes.KEY_NUMBER_ENTER)
        {
            if (g_AUICodeCompleteScreen.IsShow())
            {
                is_change = g_AUICodeCompleteScreen.DoSelect();
            }
            else
            {
                var old_line = this._cursor.line;
                var old_char = this._cursor.char;
                var revoke_bind = new ALittle.RevokeBind();
                is_change = this.InsertText("\n", true, revoke_bind);
                if (this._cursor.CurLineHasChar())
                {
                    this._cursor.UpdateVirtualIndent();
                    var text = this._cursor.virtual_indent;
                    if (text != "")
                        is_change = this.InsertText(text, true, revoke_bind);
                    // 如果右边是花括号
                    if (this._cursor.GetCurCharInLine() == "}")
                    {
                        this._cursor.SetLineChar(old_line, old_char);
                        is_change = this.InsertText("\n", true, revoke_bind);
                        this._cursor.RejustShowCursor();
                    }
                }
                else
                    this._cursor.RejustShowCursor();
                revoke_bind.complete = bind(this.DispatchChangedEvent, this);
                this._revoke_list.PushRevoke(revoke_bind);
            }
			event.handled = true;
        }
        elseif (event.sym == ALittle.UIEnumTypes.KEY_TAB)
        {
            is_change = this.InsertText("\t", true);
            g_AUICodeCompleteScreen.Hide();   
			event.handled = true;
        }
        elseif (event.sym == ALittle.UIEnumTypes.KEY_X && ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_CTRL) != 0)
        {
            var select_text = this._select_cursor.GetSelectText();
            if (select_text != null)
                ALittle.System_SetClipboardText(select_text);
            is_change = this.DeleteSelectText();
            g_AUICodeCompleteScreen.Hide();   
			event.handled = true;
        }
        elseif (event.sym == ALittle.UIEnumTypes.KEY_C && ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_CTRL) != 0)
        {
            var select_text = this._select_cursor.GetSelectText();
            if (select_text != null)
                ALittle.System_SetClipboardText(select_text);
			event.handled = true;
        }
        elseif (event.sym == ALittle.UIEnumTypes.KEY_V && ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_CTRL) != 0)
        {
            if (ALittle.System_HasClipboardText())
            {
                is_change = this.InsertText(ALittle.System_GetClipboardText(), true);
                g_AUICodeCompleteScreen.Hide();   
            }
			event.handled = true;
        }
        elseif (event.sym == ALittle.UIEnumTypes.KEY_A && ALittle.BitAnd(event.mod, ALittle.UIEnumTypes.KMOD_CTRL) != 0)
        {
            if (this._line_count > 0)
            {
                this._cursor.SetLineChar(this._line_count, this._line_list[this._line_count].char_count);
                this._select_cursor.StartLineChar(1, 0);
                this._select_cursor.UpdateLineChar(this._cursor.line, this._cursor.char);
                g_AUICodeCompleteScreen.Hide();   
            }
			event.handled = true;
        }
        elseif (event.sym == ALittle.UIEnumTypes.KEY_CTRL)
        {
            if (this._move_in && !this._in_query_info)
            {
                var x, y = this._edit_quad.LocalToGlobal();
                this.UpdateQueryInfo(A_UISystem.mouse_x - x, A_UISystem.mouse_y - y);
            }   
        }
        
        // 检查是否发送CHANGE事件
        if (is_change)
        {
            this.DispatchEvent(new ALittle.UIChangedEvent());
        }
    }

    private fun DispatchChangedEvent()
    {
        this.DispatchEvent(new ALittle.UIChangedEvent());
    }

    private fun HandleKeyUp(ALittle.UIKeyUpEvent event)
    {
        if (event.sym == ALittle.UIEnumTypes.KEY_CTRL)
        {
            if (this._move_in)
            {
                ALittle.System_SetEditCursor();
                this.StopQueryInfo();
            }
            else
                ALittle.System_SetNormalCursor();
        }
    }

    public fun OnUnDo()
    {
        g_AUICodeCompleteScreen.Hide();
    }

    public fun OnTabRightMenu(AUIRightMenu menu)
    {
        if (this._language != null) this._language.OnTabRightMenu(menu);
    }

    public fun OnHide()
    {
        this._cursor.Hide();
        if (this._language != null) this._language.OnHide();
    }

    public fun OnShow()
    {
        this._cursor.Show();
        this._edit_quad.DelayFocus();
        if (this._language != null) this._language.OnShow();
        this.StartErrorLoop(true);
    }

    public fun OnSave()
    {
        if (this._language != null) this._language.OnSave();
    }

    public fun OnClose()
    {
        if (this._error_loop != null)
        {
            this._error_loop.Stop();
            this._error_loop = null;
        }
        this._cursor.Hide();
        this._file_path = null;
        ALittle.System_CloseIME();

        if (this._language != null) this._language.OnClose();

        [Language(Lua)]
        lua.collectgarbage("collect");
    }

    public fun Load(string file_path, ALittle.RevokeList revoke_list, [Nullable] AUICodeLanguage language) : bool
    {
        // 保存代码解析器
        this._language = language;

        // 如果没有指定language，并且是abnf文件，那么就创建一个默认的
        if (this._language == null && ALittle.File_GetFileExtByPathAndUpper(file_path) == "ABNF")
            this._language = new AUICodeABnf(null, file_path);

        if (this._language != null) this._language.OnOpen();

        // 打开文件
        var content = ALittle.File_ReadTextFromStdFile(file_path);
        if (content == null) return false;

        // 设置文本内容
        this.SetText(content);
        this._file_path = file_path;
        this._revoke_list = revoke_list;
        if (this._revoke_list == null) this._revoke_list = new ALittle.RevokeList();

        return true;
    }

    // 根据内容创建行
    private fun CreateLines(string content) : List<AUICodeLineInfo>, int, double
    {
        var line_list = new List<AUICodeLineInfo>();
        var line_count = 0;
        var max_width = 0.0;

        var line:AUICodeLineInfo = null;
        var len = ALittle.String_Len(content);
        var index = 1;
        var pre_width = 0.0;
        while (index <= len)
        {
            var is_asicc = true;
            var byte_count = 1;
            var char_text:string = null;
            [Language(Lua)]
            {
                byte_count = lua.utf8.bytecount(content, index - 1, 1);
                if (byte_count > 1) is_asicc = false;
                char_text = lua.String.sub(content, index, index + byte_count - 1);
            }
            [Language(JavaScript)]
            {
                var code = cast<javascript.String>(content).charCodeAt(index - 1);
                if (code > 255) is_asicc = false;
                char_text = cast<javascript.String>(content).substring(index - 1, index);
            }
            index += byte_count;

            var char = new AUICodeCharInfo();
            if (is_asicc)
            {
                if (char_text == "\t")
                    char.width = this._ascii_width * 4;
                elseif (char_text == "\r" || char_text == "\n")
                    char.width = 0;
                else
                    char.width = this._ascii_width;
            }   
            else
                char.width = this._word_width;
            char.red = FONT_RED;
            char.green = FONT_GREEN;
            char.blue = FONT_BLUE;
            char.char = char_text;
            char.pre_width = pre_width;
            pre_width += char.width;

            if (line == null)
            {
                line = new AUICodeLineInfo();
                line.edit = this;
                line.char_count = 0;
                line.char_list = new List<AUICodeCharInfo>();
                line.container = new AUICodeLineContainer(g_Control);
                line.container._user_data = line;
                line.container.height = LINE_HEIGHT;
            }
            line.char_count += 1;
            line.char_list[line.char_count] = char;

            if (char_text == "\n")
            {
                line_count += 1;
                line_list[line_count] = line;
                line = null;
                pre_width = 0;
            }
        }

        if (line != null)
        {
            line_count += 1;
            line_list[line_count] = line;
        }

        var last_line = line_list[line_count];
        if (last_line == null) return line_list, line_count, max_width;
        var last_char = last_line.char_list[last_line.char_count];
        if (last_char == null) return line_list, line_count, max_width;

            // 如果最后一个是回车，那么加一个空行
        if (last_char.char == "\n")
        {
            line = new AUICodeLineInfo();
            line.edit = this;
            line.char_count = 0;
            line.char_list = new List<AUICodeCharInfo>();
            line.container = new AUICodeLineContainer(g_Control);
            line.container._user_data = line;
            line.container.height = LINE_HEIGHT;
            line_count += 1;
            line_list[line_count] = line;
        }

        for (var i, line_info in line_list)
        {
            last_char = line_info.char_list[line_info.char_count];
            if (last_char != null) line_info.container.width = last_char.pre_width + last_char.width;
            if (line_info.container.width > max_width) max_width = line_info.container.width;
        }

        return line_list, line_count, max_width;
    }

    // 设置文本
    public fun SetText(string content)
    {
        this._code_linear.RemoveAllChild();
        var max_width = 0.0;
        this._line_list, this._line_count, max_width = this.CreateLines(content);

        for (var index, line in this._line_list)
            this._code_linear.AddChild(line.container);
        this._code_screen.container.width = max_width;
        this._code_screen.container.height = this._line_count * LINE_HEIGHT + PAD_HEIGHT;
        this._code_screen.RejustScrollBar();

        this._cursor.SetLineChar(1, 0);

        if (this._language != null) this._language.SetText(content);
    }

    // 插入文本
    public fun InsertText(string content, bool need_revoke, [Nullable]ALittle.RevokeBind revoke_bind) : bool
    {
        var insert_revoke:ALittle.RevokeBind;
        if (need_revoke) insert_revoke = new ALittle.RevokeBind(); 

        var is_changed, delete_it_line, delete_it_char = this._select_cursor.DeleteSelect(need_revoke, insert_revoke);
        if (is_changed) this._cursor.SetLineChar(delete_it_line, delete_it_char);
        
        var line_list, line_count, max_width = this.CreateLines(content);
        if (line_count == 0) return is_changed;
        is_changed = true;

        if (this._language != null) this._language.InsertText(content, this._cursor.line, this._cursor.char);

        var old_it_line = this._cursor.line;
        var old_it_char = this._cursor.char;

        var split_pre_line:AUICodeLineInfo = this._line_list[this._cursor.line];
        var split_it_char = this._cursor.char;

        // 如果当前没有数据，那么就构建一个
        if (split_pre_line == null)
        {
            split_pre_line = new AUICodeLineInfo();
            split_pre_line.edit = this;
            split_pre_line.char_count = 0;
            split_pre_line.char_list = new List<AUICodeCharInfo>();
            split_pre_line.container = new AUICodeLineContainer(g_Control);
            split_pre_line.container._user_data = split_pre_line;
            split_pre_line.container.height = LINE_HEIGHT;
            this._code_linear.AddChild(split_pre_line.container);
            this._line_count += 1;
            this._line_list[this._line_count] = split_pre_line;
        }

        // 把当前行拆成两行
        var split_next_line:AUICodeLineInfo = split_pre_line;
        var it_cursor_line = this._cursor.line;
        var it_cursor_char = this._cursor.char;

        // 将插入的行位置空出来
        if (line_count > 1)
        {
            this._code_linear.RemoveAllChild();
            var new_line_list = new List<AUICodeLineInfo>();
            var new_line_count = 0;

            // 处理开始那些行
            for (var i = 1; i < this._cursor.line; 1)
            {
                var line = this._line_list[i];
                this._code_linear.AddChild(line.container);
                new_line_count += 1;
                new_line_list[new_line_count] = line;
            }
            // 把当前行拆成两行
            {
                split_next_line = new AUICodeLineInfo();
                split_next_line.edit = this;
                split_next_line.char_count = 0;
                split_next_line.char_list = new List<AUICodeCharInfo>();
                split_next_line.container = new AUICodeLineContainer(g_Control);
                split_next_line.container._user_data = split_next_line;
                split_next_line.container.height = LINE_HEIGHT;
                for (var i = this._cursor.char + 1; i <= split_pre_line.char_count; 1)
                {
                    split_next_line.char_count += 1;
                    split_next_line.char_list[split_next_line.char_count] = split_pre_line.char_list[i];
                    if (split_pre_line.char_list[i].text != null)
                        split_next_line.container.AddChild(split_pre_line.char_list[i].text);
                }

                var split_count = split_pre_line.char_count - this._cursor.char;
                ALittle.List_Splice(split_pre_line.char_list, this._cursor.char + 1, split_count);
                split_pre_line.char_count -= split_count;

                // 插入旧行
                this._code_linear.AddChild(split_pre_line.container);
                new_line_count += 1;
                new_line_list[new_line_count] = split_pre_line;
            }
            // 插入新的行
            for (var i = 2; i < line_count; 1)
            {
                var line = line_list[i];
                this._code_linear.AddChild(line.container);
                new_line_count += 1;
                new_line_list[new_line_count] = line;
            }
            // 插入拆分行
            {
                this._code_linear.AddChild(split_next_line.container);
                new_line_count += 1;
                new_line_list[new_line_count] = split_next_line;
                it_cursor_line = new_line_count;
                it_cursor_char = 0;
            }
            // 插入剩余行
            for (var i = this._cursor.line + 1; i <= this._line_count; 1)
            {
                var line = this._line_list[i];
                this._code_linear.AddChild(line.container);
                new_line_count += 1;
                new_line_list[new_line_count] = line;
            }
            this._line_list = new_line_list;
            this._line_count = new_line_count;
        }

        // 开始衔接起始行
        if (line_count > 0)
        {
            var line = line_list[1];
            var char_list = new List<AUICodeCharInfo>();
            var char_count = 0;
            split_pre_line.container._text.RemoveAllChild();
            // 插入旧的数据
            var pre_width = 0.0;
            for (var i = 1; i <= split_it_char; 1)
            {
                var char = split_pre_line.char_list[i];
                char.pre_width = pre_width;
                if (char.text != null) char.text.x = pre_width;
                split_pre_line.container.AddChar(char);
                char_count += 1;
                char_list[char_count] = char;
                pre_width += char.width;
            }
            // 插入新的数据
            for (var i = 1; i <= line.char_count; 1)
            {
                var char = line.char_list[i];
                char.pre_width = pre_width;
                if (char.text != null) char.text.x = pre_width;
                split_pre_line.container.AddChar(char);   
                char_count += 1;
                char_list[char_count] = char;
                pre_width += char.width;
            }
            // 如果只在起始行插入，那么光标移动到插入最后字符的位置
            if (line_count <= 1)
                it_cursor_char = char_count;
            // 插入后缀数据
            for (var i = split_it_char + 1; i <= split_pre_line.char_count; 1)
            {
                var char = split_pre_line.char_list[i];
                char.pre_width = pre_width;
                if (char.text != null) char.text.x = pre_width;
                split_pre_line.container.AddChar(char);   
                char_count += 1;
                char_list[char_count] = char;
                pre_width += char.width;
            }
            split_pre_line.char_count = char_count;
            split_pre_line.char_list = char_list;
            split_pre_line.container.width = pre_width;
        }

        // 开始衔接结束行
        if (line_count > 1)
        {
            var line = line_list[line_count];
            var char_list = new List<AUICodeCharInfo>();
            var char_count = 0;
            split_next_line.container._text.RemoveAllChild();
            // 插入新的数据
            var pre_width = 0.0;
            for (var i = 1; i <= line.char_count; 1)
            {
                var char = line.char_list[i];
                char.pre_width = pre_width;
                if (char.text != null) char.text.x = pre_width;
                split_next_line.container.AddChar(char);   
                char_count += 1;
                char_list[char_count] = char;
                pre_width += char.width;
            }
            it_cursor_char = char_count;
            // 插入后缀数据
            for (var i = 1; i <= split_next_line.char_count; 1)
            {
                var char = split_next_line.char_list[i];
                char.pre_width = pre_width;
                if (char.text != null) char.text.x = pre_width;
                split_next_line.container.AddChar(char);   
                char_count += 1;
                char_list[char_count] = char;
                pre_width += char.width;
            }
            split_next_line.char_count = char_count;
            split_next_line.char_list = char_list;
            split_next_line.container.width = pre_width;
        }

        max_width = 0.0;
        for (var index, line in this._line_list)
            if (line.container.width > max_width) max_width = line.container.width;
        this._code_screen.container.width = max_width;
        this._code_screen.container.height = this._line_count * LINE_HEIGHT + PAD_HEIGHT;
        this._code_screen.RejustScrollBar();

        this._cursor.SetLineChar(it_cursor_line, it_cursor_char);

        if (need_revoke)
        {
            var revoke = new AUICodeInsetTextRevoke(this, this._cursor, this._select_cursor, old_it_line, old_it_char, it_cursor_line, it_cursor_char, content, revoke_bind == null);
            insert_revoke.PushRevoke(revoke);
            if (revoke_bind != null)
                revoke_bind.PushRevoke(insert_revoke);
            else
                this._revoke_list.PushRevoke(insert_revoke);
        }

        return is_changed;
    }

    public fun GetText() : string
    {
        if (this._file_path == null) return "";

        var text_list = new List<string>();
        var text_count = 0;
        for (var i, line in this._line_list)
        {
            for (var j, char in line.char_list)
            {
                text_count += 1;
                text_list[text_count] = char.char;
            }
        }
        return ALittle.String_Join(text_list, "");
    }

    public fun GetSelectText() : string
    {
        return this._select_cursor.GetSelectText();
    }

    public fun GetTargetText(int line_start, int char_start, int line_end, int char_end) : string
    {
        return this._select_cursor.GetTargetText(line_start, char_start, line_end, char_end);
    }

    public fun Save() : bool
    {
        if (this._file_path == null) return false;

        var text_list = new List<string>();
        var text_count = 0;
        for (var i, line in this._line_list)
        {
            for (var j, char in line.char_list)
            {
                text_count += 1;
                text_list[text_count] = char.char;
            }
        }
        ALittle.File_WriteTextToFile(ALittle.String_Join(text_list, ""), this._file_path);

        this.OnSave();
        return true;
	}

    public fun EditFocus(int line_start, int char_start, int line_end, int char_end)
    {
        this._edit_quad.DelayFocus();

        if (line_start != null && char_start != null)
        {
            if (char_start > 0) char_start -= 1;
            if (line_end == null || char_end == null)
            {
                this._select_cursor.Hide();
                this._cursor.SetLineChar(line_start, char_start);
            }
            else
            {
                this._cursor.SetLineChar(line_start, char_start);
                this._select_cursor.StartLineChar(line_start, char_start);
                this._select_cursor.UpdateLineChar(line_end, char_end);
            }
            this.FocusLineCharToCenter(this._cursor.line, this._cursor.char);
        }
    }
}
