namespace alittle;

public async static __LUAAPI_SEngine_Init(string script_base_path)
{
    alittle.Require(script_base_path.."Utility/System");
    alittle.Require(script_base_path.."Utility/HttpSystem");
    alittle.Require(script_base_path.."Utility/HttpFileSystem");
    alittle.Require(script_base_path.."Utility/ClientSystem");
    alittle.Require(script_base_path.."Utility/SessionSystem");
    alittle.Require(script_base_path.."Utility/MysqlSystem");
    
    alittle.Require(script_base_path.."CacheData/CacheDataSet");
    alittle.Require(script_base_path.."CacheData/FullDataSet");
    
    alittle.Require(script_base_path.."Utility/LogEventSystem");
    alittle.Require(script_base_path.."Utility/GatewaySystem");
}

public static __LUAAPI_SetupMainModule(string module_name, string config_path)
{
    ALittle.Log("module_name:"..module_name);
    var module = cast<Map<string, any>>(_G)[module_name];
    if (module == null)
    {
        ALittle.Log("找不到模块:"..module_name);
        return;
    }
    
    var setup_module:Functor<(string)> = cast<Map<string, any>>(module)["__Module_Setup"];
    if (setup_module == null)
    {
        ALittle.Log("找不到模块__Module_Setup函数:"..module_name);
        return;
    }
    
    setup_module(config_path);
}

public static __LUAAPI_ShutdownMainModule(string module_name)
{
    var module = cast<Map<string, any>>(_G)[module_name];
    if (module == null)
    {
        ALittle.Log("找不到模块:"..module_name);
        return;
    }

    var shutdown_module:Functor<()> = cast<Map<string, any>>(module)["__Module_Shutdown"];
    if (shutdown_module == null)
    {
        ALittle.Log("找不到模块__Module_Shutdown函数:"..module_name);
        return;
    }

    shutdown_module();
}

public static __LUAAPI_Update(int frame_time)
{
    A_LoopSystem.Update(frame_time);
}

public static __LUAAPI_HandleMysqlQueryTask(int id, string reason)
{
    A_MysqlSystem.HandleMysqlQueryTask(id, reason);
}

public static __LUAAPI_HandleMysqlEmptyTask(int id, string reason)
{
    A_MysqlSystem.HandleMysqlEmptyTask(id, reason);
}

public static __LUAAPI_HttpSucceed(int id, string response)
{
    A_HttpSystem.HandleHttpSucceed(id, response);
}

public static __LUAAPI_HttpFailed(int id, string reason)
{
    A_HttpSystem.HandleHttpFailed(id, reason);
}

public static __LUAAPI_HttpTask(int http_id, string path, string param, string content)
{
    var http_callback = ALittle.FindHttpCallback(path);
    if (http_callback != null)
    {
        ALittle.HttpSystem.HandleHttpTask(http_id, http_callback, ALittle.String_HttpAnalysisValueMap(param, content));
        return;
    }

    var http_download_callback = ALittle.FindHttpDownloadCallback(path);
    if (http_download_callback != null)
    {
        ALittle.HttpSystem.HandleHttpDownloadTask(http_id, http_download_callback, ALittle.String_HttpAnalysisValueMap(param, content));
        return;
    }

    __CPPAPI_ServerSchedule.HttpClose(http_id);
}

public static __LUAAPI_HttpFileTask(int http_id, string path, string param, string content)
{
    A_HttpFileSystem.HandleHttpFileTask(http_id, path, ALittle.FindHttpFileReceiverCallback(path), ALittle.String_HttpAnalysisValueMap(param, content));
}

public static __LUAAPI_HttpFileCompletedTask(int http_id, string reason)
{
    A_HttpFileSystem.HandleHttpFileCompletedTask(http_id, reason);
}

public static __LUAAPI_ClientConnect(int client_id, string remote_ip, int remote_port)
{
    A_ClientSystem.HandleClientConnect(client_id, remote_ip, remote_port);
}

public static __LUAAPI_ClientDisconnect(int client_id)
{
    A_ClientSystem.HandleClientDisconnect(client_id);
}

public static __LUAAPI_ClientMessage(int client_id, int id, int rpc_id, ALittle.IMessageReadFactory factory)
{
    A_ClientSystem.HandleClientMessage(client_id, id, rpc_id, factory);
}

public static __LUAAPI_SessionConnect(int connect_key, int route_type, int route_num)
{
    A_SessionSystem.HandleSessionConnect(connect_key, route_type, route_num);
}

public static __LUAAPI_SessionDisconnect(int connect_key, int route_type, int route_num)
{
    A_SessionSystem.HandleSessionDisconnect(connect_key, route_type, route_num);
}

public static __LUAAPI_SessionMessage(int connect_key, int id, int rpc_id, ALittle.IMessageReadFactory factory)
{
    A_SessionSystem.HandleSessionMessage(connect_key, id, rpc_id, factory);
}

public static __LUAAPI_ConnectSessionFailed(int route_type, int route_num, string reason)
{
    A_SessionSystem.HandleConnectSessionFailed(route_type, route_num, reason);
}

public static __LUAAPI_ConnectSessionSucceed(int connect_key, int route_type, int route_num)
{
    A_SessionSystem.HandleConnectSessionSucceed(connect_key, route_type, route_num);
}

public static __LUAAPI_HandleConsoleCmd(string cmd)
{
    ALittle.ExecuteCommand(cmd);
}