
[Language(JavaScript)]
namespace JavaScript;

public class JDisplayObject : ALittle.IDisplayObject
{
    private PIXI.DisplayObject _native;
    private PIXI.Point _scale;
    private PIXI.Point _pivot;
    private bool _clip;
    private bool _visible;
    
    public ctor()
    {
        this._scale = new PIXI.Point(1, 1);
        this._pivot = new PIXI.Point(0, 0);
        this._clip = false;
        this._visible = true;
    }
    
    public get native() : PIXI.DisplayObject { return this._native; }
    public fun SetX(double value) { this._native.x = value; }
    public fun SetY(double value) { this._native.y = value; }
    public fun SetScaleX(double value) { this._scale.x = value; this._native.scale = this._scale; }
    public fun SetScaleY(double value) { this._scale.y = value; this._native.scale = this._scale; }
    public fun SetCenterX(double value) { this._pivot.x = value; this._native.pivot = this._pivot; }
    public fun SetCenterY(double value) { this._pivot.y = value; this._native.pivot = this._pivot; }
    public fun SetAngle(double value) { this._native.rotation = value; }
    public fun SetWidth(double value) { this._native.width = value; }
    public fun SetHeight(double value) { this._native.height = value; }
    public fun SetVisible(bool value) { this._visible = value; this._native.visible = value && !this._clip; }
    public fun SetClip(bool value) { this._clip = value; this._native.visible = value && this._visible; }
    public fun SetAlpha(double value) { this._native.alpha = value; }
    public fun SetRed(double value) {}
    public fun SetGreen(double value) {}
    public fun SetBlue(double value) {}
    public fun RemoveChild(ALittle.IDisplayObject value) {}
    public fun AddChild(ALittle.IDisplayObject value) {}
    public fun AddChildBefore(ALittle.IDisplayObject value1, ALittle.IDisplayObject value2) {}
    public fun RemoveAllChild() {}
    public fun SetFont(string path, int size) {}
    public fun ClearTexture() {}
    public fun SetTexture(ALittle.ITexture texture) {}
    public fun SetTextureCoord(double t, double b, double l, double r) {}
    public fun SetFlip(int value) {}
    public fun SetRowColCount(int row_count, int col_count) {}
    public fun SetRowColIndex(int row, int col) {}
    public fun NeedDraw() {}
    public fun SetText(string value) {}
    public fun SetBold(bool value) {}
    public fun SetItalic(bool value) {}
    public fun SetUnderline(bool value) {}
    public fun SetDeleteline(bool value) {}
    public fun SetOutline(bool value) {}
    public fun GetRealWidth() : int { return 0; }
    public fun GetRealHeight() : int { return 0; }
    public fun GetFontHeight() : int { return 0; }
    public fun SetHAlign(int value) {}
    public fun SetVAlign(int value) {}
    public fun SetCursorAlpha(double value) {}
    public fun GetLineWidth(int value) : int { return 0; }
    public fun GetLineCount() : int { return 0; }
    public fun GetScrollOffset() : int { return 0; }
    public fun IsDefaultText() : bool { return false; }
    public fun SetDefaultText(bool defaultv, string value) {}
    public fun SetDefaultTextAlpha(double value) {}
    public fun GetCursorX() : int { return 0; }
    public fun GetCursorY() : int { return 0; }
    public fun GetText() : string { return null; }
    public fun SetCursorToEnd() {}
    public fun SetCursorToHome() {}
    public fun ShowCursor(bool value) {}
    public fun ClickCursor(double x, double y) {}
    public fun ClickWordCursor(double x, double y) : bool { return false; }
    public fun SelectAll() {}
    public fun GetSelectText() : string { return null; }
    public fun InsertText(string value) : bool { return false; }
    public fun CursorOffsetLR(bool value) {}
    public fun SelectCursorOffsetLR(bool value) {}
    public fun CursorOffsetUD(bool value) {}
    public fun SelectCursorOffsetUD(bool value) {}
    public fun DeleteText(bool value) : bool { return false; }
    public fun DeleteSelectText() : bool { return false; }
    public fun DragCursorBegin() {}
    public fun DragCursor(double x, double y) {}
    public fun SetCursorRed(double value) {}
    public fun SetCursorGreen(double value) {}
    public fun SetCursorBlue(double value) {}
    public fun SetPasswordMode(bool value) {}
    public fun CursorOffset(bool value) {}
    public fun SelectCursorOffset(bool value) {}
    public fun SetTexUV(int index, double u, double v) {}
    public fun SetPosXY(int index, double x, double y) {}
    public fun SetLeftSize(double value) {}
    public fun SetRightSize(double value) {}
    public fun SetTopSize(double value) {}
    public fun SetBottomSize(double value) {}
    public fun CutTextByWidth(int remain_width, string text, int total_width) : int { return 0; }
    public fun ClearCutWidthCache() {}
    public fun GetCutWidthListCount() : int { return 0; }
    public fun GetCutWidthByIndex(int index) : int { return 0; }
    public fun CalcTextWidth(string value) : int { return 0; }    
}

public class JDisplayObjects : JDisplayObject
{
    public ctor()
    {
        this._native = new PIXI.Container();
    }
    
    public fun RemoveChild(ALittle.IDisplayObject value)
    {
        cast<PIXI.Container>(this._native).removeChild(cast<JDisplayObject>(value)._native);
    }
    public fun AddChild(ALittle.IDisplayObject value) { cast<PIXI.Container>(this._native).addChild(cast<JDisplayObject>(value)._native); }
    public fun AddChildBefore(ALittle.IDisplayObject back, ALittle.IDisplayObject value)
    {
        var index = cast<PIXI.Container>(this._native).getChildAt(cast<JDisplayObject>(value)._native);
        cast<PIXI.Container>(this._native).addChildAt(cast<JDisplayObject>(value)._native, index - 1);
    }
    public fun RemoveAllChild()
    {
        cast<PIXI.Container>(this._native).removeChildren(0);
    }
}

public class JDisplaySystem : ALittle.IDisplaySystem
{
    private PIXI.Container _layer;
    private PIXI.Container _special_layer;
    
    public ctor()
    {
        this._layer = new PIXI.Container();
        this._special_layer = new PIXI.Container();
    }
    
    public fun AddToStage(PIXI.Container stage)
    {
        this._layer.width = stage.width;
        this._layer.height = stage.height;
        this._special_layer.width = stage.width;
        this._special_layer.height = stage.height;
        
        stage.addChild(this._layer);
        stage.addChild(this._special_layer);
    }
    
    public fun AddSpecialChild(ALittle.IDisplayObject value)
    {
        this._special_layer.addChild(cast<JDisplayObject>(value).native);
    }
    public fun AddChild(ALittle.IDisplayObject value)
    {
        this._layer.addChild(cast<JDisplayObject>(value).native);
    }
    public fun AddChildBefore(ALittle.IDisplayObject back, ALittle.IDisplayObject value)
    {
        var index = this._layer.getChildAt(cast<JDisplayObject>(value).native);
        this._layer.addChildAt(cast<JDisplayObject>(value).native, index - 1);
    }
    public fun RemoveChild(ALittle.IDisplayObject value)
    {
        this._layer.removeChild(cast<JDisplayObject>(value).native);
    }
    public fun RemoveAllChild()
    {
        this._layer.removeChildren(0);
        this._special_layer.removeChildren(0);
    }
}

public var A_JDisplaySystem:JDisplaySystem = new JDisplaySystem();

public class JQuad : JDisplayObject
{
    private int _color;
    private int _red;
    private int _green;
    private int _blue;
    private double _alpha;
    private double _width;
    private double _height;
    
    public ctor()
    {
        this._native = new PIXI.Graphics();
        this._red = 255;
        this._green = 255;
        this._blue = 255;
        this._color = this._red * 65536 + this._green * 256 + this._blue;
        this._alpha = 1;
        this._width = 0;
        this._height = 0;
    }
    
    private fun Draw()
    {
        cast<PIXI.Graphics>(this._native).clear();
        cast<PIXI.Graphics>(this._native).beginFill(this._color, this._alpha);
        cast<PIXI.Graphics>(this._native).drawRect(0, 0, this._width, this._height);
        cast<PIXI.Graphics>(this._native).endFill();
    }
    
    public fun SetWidth(double value)
    {
        this._width = value;
        this.Draw();
    }
    public fun SetHeight(double value)
    {
        this._height = value;
        this.Draw();
    }
    
    public fun SetRed(double value)
    {
        this._red = javascript.Math.floor(value * 255);
        this._color = this._red * 65536 + this._green * 256 + this._blue;
        this.Draw();
    }
    
    public fun SetGreen(double value)
    {
        this._green = javascript.Math.floor(value * 255);
        this._color = this._red * 65536 + this._green * 256 + this._blue;
        this.Draw();
    }
    public fun SetBlue(double value)
    {
        this._blue = javascript.Math.floor(value * 255);
        this._color = this._red * 65536 + this._green * 256 + this._blue;
        this.Draw();
    }
    public fun SetAlpha(double value)
    {
        this._alpha = value;
        this.Draw();
    }   
}

public class JImage : JDisplayObject
{ 
    public ctor()
    {
        this._native = new PIXI.Sprite();
    }
    
    public fun ClearTexture()
    {
        cast<PIXI.Sprite>(this._native).texture = null;
    }
    public fun SetTexture(ALittle.ITexture texture)
    {
        cast<PIXI.Sprite>(this._native).texture = cast<JTexture>(texture).native;
    }
    public fun SetTextureCoord(double t, double b, double l, double r)
    {
        // 因为Web版本的图片都是散装的，所以不需要处理
    }
}

public class JGrid9Image : JDisplayObject
{
    private double _leftWidth;
    private double _rightWidth;
    private double _topHeight;
    private double _bottomHeight;

    private PIXI.NineSlicePlane _nine;

    public ctor()
    {
        this._native = new PIXI.Container();
        this._leftWidth = 0;
        this._rightWidth = 0;
        this._topHeight = 0;
        this._bottomHeight = 0;
    }
    
    public fun ClearTexture()
    {
        cast<PIXI.Container>(this._native).removeChildren(0);
        this._nine = null;
    }
    public fun SetTexture(ALittle.ITexture texture)
    {
        if (this._nine == null)
        {
            this._nine = new PIXI.NineSlicePlane(cast<JTexture>(texture).native
                            , this._leftWidth, this._topHeight, this._rightWidth, this._bottomHeight);
            cast<PIXI.Container>(this._native).addChild(this._nine);
            this._nine.width = this._native.width;
            this._nine.height = this._native.height;
        }
        else
        {
            cast<PIXI.NineSlicePlane>(this._native).texture = cast<JTexture>(texture).native;
        }
    }
    public fun SetTextureCoord(double t, double b, double l, double r)
    {
        // 因为Web版本的图片都是散装的，所以不需要处理
    }

    public fun SetWidth(double width)
    {
        this._native.width = width;
        if (this._nine != null) this._nine.width = width;
    }

    public fun SetHeight(double height)
    {
        this._native.height = height;
        if (this._nine != null) this._nine.height = height;
    }

    public fun SetLeftSize(double value)
    {
        this._leftWidth = value;
        if (this._nine != null) this._nine.leftWidth = value;
    }
    public fun SetRightSize(double value)
    {
        this._rightWidth = value;
        if (this._nine != null) this._nine.rightWidth = value;
    }
    public fun SetTopSize(double value)
    {
        this._topHeight = value;
        if (this._nine != null) this._nine.topHeight = value;
    }
    public fun SetBottomSize(double value)
    {
        this._bottomHeight = value;
        if (this._nine != null) this._nine.bottomHeight = value;
    }
}

public class JText : JDisplayObject
{
    private PIXI.TextStyle _style;
    private int _red;
    private int _green;
    private int _blue;
    private int _real_width;
    private int _real_height;
    private string _text;
    
    public ctor()
    {
        this._native = new PIXI.Text();
        this._style = new PIXI.TextStyle();
        this._real_width = 0;
        this._real_height = 0;
        this._red = 255;
        this._green = 255;
        this._blue = 255;
        this._style.fill = "#"..cast<javascript.Number>((this._red * 65536 + this._green * 256 + this._blue)).toString(16);
        this._text = "";
    }
    
    public fun SetText(string value)
    {
        this._text = value;
        cast<PIXI.Text>(this._native).text = value;
        var m = PIXI.TextMetrics.measureText(this._text, this._style);
        this._real_width = m.width;
        this._real_height = m.height;
    }
        
    public fun SetFont(string path, int size)
    {
        this._style.fontFamily = path;
        this._style.fontSize = size;
        cast<PIXI.Text>(this._native).style = this._style;
        var m = PIXI.TextMetrics.measureText(this._text, this._style);
        this._real_width = m.width;
        this._real_height = m.height;
    }
    
    public fun SetRed(double value)
    {
        this._red = javascript.Math.floor(value * 255);
        this._style.fill = "#"..cast<javascript.Number>((this._red * 65536 + this._green * 256 + this._blue)).toString(16);
        cast<PIXI.Text>(this._native).style = this._style;
    }
    
    public fun SetGreen(double value)
    {
        this._green = javascript.Math.floor(value * 255);
        this._style.fill = "#"..cast<javascript.Number>((this._red * 65536 + this._green * 256 + this._blue)).toString(16);
        cast<PIXI.Text>(this._native).style = this._style;
    }
    public fun SetBlue(double value)
    {
        this._blue = javascript.Math.floor(value * 255);
        this._style.fill = "#"..cast<javascript.Number>((this._red * 65536 + this._green * 256 + this._blue)).toString(16);
        cast<PIXI.Text>(this._native).style = this._style;
    }
    
    public fun GetRealWidth() : int { return this._real_width; }
    public fun GetRealHeight() : int { return this._real_height; }
}

private var __TEXTURELOADER_MAXID = 0;

public class JTexture : ALittle.ITexture
{
    private PIXI.Texture _texture;
    private int _width;
    private int _height;
    
    public ctor(PIXI.Texture texture, int width, int height)
    {
        this._texture = texture;
        this._width = width;
        this._height = height;
    }
    
    public fun Clear()
    {
        this._texture = null;
    }
    public get native() : PIXI.Texture { return this._texture; }
    public fun GetTexture() : ALittle.ITexture { return this; }
    public fun GetWidth() : int { return 0; }
    public fun GetHeight() : int { return 0; }
}

public class JTextureLoader : ALittle.ITextureLoader
{
    private int _id;
    private string _file_path;
    private string _atlas_info;
    private int _width;
    private int _height;
    private bool _load_failed;
    private string _altas;
    
    public ctor()
    {
        ++ __TEXTURELOADER_MAXID;
        this._id = __TEXTURELOADER_MAXID;
        this._load_failed = false;
    }
    
    public fun SetPath(string big_path, string altas, int big_width, int big_height, bool crypt_mode)
    {
        this._file_path = big_path;
        this._atlas_info = altas;
        this._width = big_width;
        this._height = big_height;
        this._altas = altas;
    }
    
    public fun Start()
    {
        var real_path:string = null;
        var altas_list = ALittle.String_Split(this._altas, ";");
        for (var index, altas in altas_list)
        {
            var split = ALittle.String_Split(altas, ",");
            if (split[1] != null)
                real_path = split[1];
        }
        if (real_path == null)
        {
            this.HandleLoadFailed();
            return;
        }
        
        var loader = new PIXI.Loader();
        loader.onError.add(bind(this.HandleLoadFailed, this));
        loader.add(this._file_path, real_path).load(bind(this.HandleLoadSucceed, this));
    }
    public fun GetID() : int { return this._id; }
    public fun GetPath() : string { return this._file_path; }
        
    private fun HandleLoadSucceed(PIXI.Loader loader, Map<string, PIXI.LoaderResource> resources)
    {
        if (this._load_failed) return;
        
        var resource = resources[this._file_path];
        if (resource == null || resource.texture == null)
        {
            this.HandleLoadFailed();
            return;
        }
        
        var func = cast<Map<string, Functor<(ALittle.ITextureLoader, ALittle.ITexture)>>>(window)["__ALITTLEAPI_TextureLoadSucceed"];
        if (func == null) return;
        func(this, new JTexture(resource.texture, this._width, this._height));
    }
       
    private fun HandleLoadFailed()
    {
        if (this._load_failed) return;
        
        this._load_failed = true;
        var func = cast<Map<string, Functor<(ALittle.ITextureLoader)>>>(window)["__ALITTLEAPI_TextureLoadFailed"];
        if (func == null) return;
        func(this);
    }
}

public class JTextureCutLoader : ALittle.ITextureCutLoader
{
    private int _id;
    
    public ctor()
    {
        ++ __TEXTURELOADER_MAXID;
        this._id = __TEXTURELOADER_MAXID;
    }
    
    public fun SetPath(string path, int max_width, int max_height) {}
    public fun Start() {}
    public fun GetID() : int { return this._id; }
    public fun GetPath() : string { return null; }
    public fun GetMaxWidth() : int { return null; }
    public fun GetMaxHeight() : int { return null; }
}