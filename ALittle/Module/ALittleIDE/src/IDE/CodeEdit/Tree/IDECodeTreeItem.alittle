
namespace ALittleIDE;

public class IDECodeTreeItem : IDECodeTreeLogic
{
	public ctor(ALittle.ControlSystem ctrl_sys, IDECodeTreeUserInfo user_info)
	{
		this._item = ctrl_sys.CreateControl{ALittle.DisplayObject}("ide_code_tree_item", this);
		this.AddChild(this._item);
		this.width = this._item.width;
		this.height = this._item.height;

		this._item_button.selected = false;
		this._item_button.group = user_info.group;
		this._item_button.AddEventListener(this, this.HandleClick);
		this._item_button.AddEventListener(this, this.HandleRButtonDown);
		this._item_button._user_data = this;
		
		this._item_title.text = this._user_info.name;
	}
	
	public get is_tree() : bool { return false; }
	public get fold() : bool { return false; }
	public set fold(bool value) { }

	// 打开文件
	private fun HandleClick(ALittle.UIClickEvent event)
	{
		g_IDECenter.center.content_edit.StartEditCodeBySelect(this._user_info.name, this._user_info);
    }
	
	// 搜索文件
	public fun SearchFile(string name, [Nullable] List<IDECodeTreeLogic> list) : List<IDECodeTreeLogic>
	{
		if (list == null) list = new List<IDECodeTreeLogic>();
	
		if (ALittle.String_Find(this._user_info.name, name) != null)
			ALittle.List_Push(list, this);
		return list;
	}

	// 查找文件
	public fun FindFile(string full_path) : IDECodeTreeLogic
	{
		if (this._user_info.path == full_path) return this;
		return null;
    }

	private fun HandleRButtonDown(ALittle.UIRButtonDownEvent event)
	{
        var menu = new AUIPlugin.AUIRightMenu();
		if (this._user_info.project != null)
			this._user_info.project.OnTreeItemMenu(this._user_info.path, menu);
		menu.AddItem("重命名", bind(this.HandleRenameFile, this));
		menu.AddItem("删除", bind(this.HandleDeleteFile, this));
		menu.Show();
    }

	private async fun HandleDeleteFile()
	{
		var file_name = ALittle.File_GetFileNameByPath(this._user_info.path);
		var result = g_AUITool.DeleteNotice("删除", "确定要删除"..file_name.."吗?");
		if (result != AUIPlugin.AUIToolOption.YES) return;

		this.OnDelete();

		ALittle.File_DeleteFile(this._user_info.path);

		var parent = this.parent;
        this.RemoveFromParent();
		if (parent != null) parent.DispatchEvent(new ALittle.UIResizeEvent());
		g_IDECenter.center.content_edit.CloseTabByName{IDECodeTabChild}(this._user_info.name);
    }

	private async fun HandleRenameFile()
	{
		var file_name = ALittle.File_GetFileNameByPath(this._user_info.path);
		var x, y = this.LocalToGlobal();
		var new_name = g_AUITool.ShowRename(file_name, x, y, 200);
		if (new_name == null || new_name == "") return;

		var old_name = this._user_info.name;
		var old_path = this._user_info.path;
		var new_path = ALittle.File_GetFilePathByPath(old_path).."/"..new_name;

		this._user_info.path = new_path;
		this._user_info.name = new_name;

		this._item_title.text = this._user_info.name;

		if (this._user_info.project != null)
			this._user_info.project.RemoveFile(old_path);

		ALittle.File_RenameFile(old_path, new_path);

		g_IDECenter.center.content_edit.RenameTabByName{IDECodeTabChild}(old_name, this._user_info.name);

		if (this._user_info.project != null)
			this._user_info.project.UpdateFile(this._user_info.module_path, this._user_info.path);
    }

	// 触发删除
	public fun OnDelete()
	{
		if (this._user_info.project != null)
			this._user_info.project.RemoveFile(this._user_info.path);
    }
}