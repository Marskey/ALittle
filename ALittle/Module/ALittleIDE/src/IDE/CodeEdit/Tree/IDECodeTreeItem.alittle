
namespace ALittleIDE;

public class IDECodeTreeItem : IDECodeTreeLogic
{
	public ctor(ALittle.ControlSystem ctrl_sys, IDECodeTreeUserInfo user_info)
	{
		this._item = ctrl_sys.CreateControl{ALittle.DisplayObject}("ide_code_tree_item", this);
		this.AddChild(this._item);
		this.width = this._item.width;
		this.height = this._item.height;

		this._item_button.selected = false;
		this._item_button.group = user_info.group;
		this._item_button.AddEventListener(this, this.HandleClick);
		this._item_button._user_data = this;
		
		this._item_title.text = this._user_info.name;
	}
	
	public get is_tree() : bool { return false; }
	public get fold() : bool { return false; }
	public set fold(bool value) { }

	// 打开文件
	private fun HandleClick(ALittle.UIClickEvent event)
	{
		g_IDECenter.center.content_edit.StartEditCodeBySelect(this._user_info.name, this._user_info);
    }
	
	// 搜索文件
	public fun SearchFile(string name, [Nullable] List<IDECodeTreeLogic> list) : List<IDECodeTreeLogic>
	{
		if (list == null) list = new List<IDECodeTreeLogic>();
	
		if (ALittle.String_Find(this._user_info.name, name) != null)
			ALittle.List_Push(list, this);
		return list;
	}
	
	// 搜索类/枚举/结构体名
	public fun SearchDefine(string name, [Nullable] List<IDECodeTreeLogic> list) : List<IDECodeTreeLogic>
	{
		if (list == null) list = new List<IDECodeTreeLogic>();
		return list;
	}
}