
namespace ALittleIDE;

public class IDECodeTree : IDECodeTreeLogic
{
	private ALittle.Linear _body;
	private ALittle.DisplayObject _item_checkbutton;

	public ctor(ALittle.ControlSystem ctrl_sys, IDECodeTreeUserInfo user_info)
	{
		this._head = ctrl_sys.CreateControl{ALittle.DisplayObject}("ide_code_tree_head", this);
		ALittle.DisplayGroup.AddChild(this, this._head);
		
		this._item_button.selected = false;
		this._item_button.group = user_info.group;
		this._item_button.AddEventListener(this, this.HandleLButtonDown);
		this._item_button._user_data = this;
	
		// 对数的身体部分进行处理
		this._body = new ALittle.Linear(ctrl_sys);
		this._body.type = ALittle.UIEnumTypes.TYPE_V;
		this._body.x = 8;
		this._body.y = this._head.height;
		this._body.width = this._head.width;
		this._item_checkbutton.selected = true;
		ALittle.DisplayGroup.AddChild(this, this._body);
		this._body.AddEventListener(this, this.HandleChildResize);
	
		// 设置一下拾取属性
		this._pickup_rect = false;
		this._pickup_child = true;
	
		this.fold = false;
		if (user_info.root)
			this._item_title.text = this._user_info.module_name;
		else
			this._item_title.text = this._user_info.name;
		this.Refresh();
	}
	
	public fun HandleLButtonDown(ALittle.UILButtonDownEvent event)
	{
		if (event.count == 1) return;
		this.fold = !this.fold;
	}
	
	public get is_tree() : bool { return true; }

	// 刷新子节点
	public fun Refresh()
	{
		var map = ALittle.File_GetFileNameListByDir(this._user_info.path);

		// 刷新已存在
		var remove:List<IDECodeTreeLogic> = null;
		for (var index, child:IDECodeTreeLogic in this.childs)
		{
            var attr = map[child._user_info.name];
			if (attr == null)
			{
				if (remove == null) remove = new List<IDECodeTreeLogic>();
				ALittle.List_Push(remove, child);
            }

			map[child._user_info.name] = null;
			child.Refresh();
        }

		// 添加
		var add:List<string> = null;
		for (var name, attr in map)
		{
			if (add == null) add = new List<string>();
            ALittle.List_Push(add, name);
		}

		if (add != null)
		{
			ALittle.List_Sort(add);
			for (var index, name in add)
			{
                var attr = map[name];
				if (attr.mode == "directory")
				{
					var info = new IDECodeTreeUserInfo();
					info.module_name = this._user_info.module_name;
					info.name = name;
					info.path = this._user_info.path.."/"..name;
					info.group = this._user_info.group;
					info.root = false;
                    this.AddChild(new IDECodeTree(this._ctrl_sys, info));
                }
				elseif (ALittle.File_GetFileExtByPathAndUpper(name) == "ALITTLE")
				{
					var info = new IDECodeTreeUserInfo();
					info.module_name = this._user_info.module_name;
					info.name = name;
					info.path = this._user_info.path.."/"..name;
					info.group = this._user_info.group;
					info.root = false;
                    this.AddChild(new IDECodeTreeItem(this._ctrl_sys, info));
                }
            }
        }
    }
	
	// 搜索文件
	public fun SearchFile(string name, [Nullable] List<IDECodeTreeLogic> list) : List<IDECodeTreeLogic>
	{
		if (list == null) list = new List<IDECodeTreeLogic>();
		
		for (var k, child:IDECodeTreeLogic in this._body.childs)
			child.SearchFile(name, list);
	
		return list;
	}
	
	public fun HandleChildResize(ALittle.UIResizeEvent event)
	{
		this.DispatchEvent(new ALittle.UIResizeEvent());
	}
	
	public fun HandleHeadChanged(ALittle.UIEvent event)
	{
		this._body.visible = event.target.selected;
		this.DispatchEvent(new ALittle.UIResizeEvent());
	}
	//////////////////////////////////////////////////////////////////////////////////////
	public fun GetChildIndex(ALittle.DisplayObject child) : int	{ return this._body.GetChildIndex(child);	}
	public fun SetChildIndex(ALittle.DisplayObject child, int index) : bool { return this._body.SetChildIndex(child, index); }
	public fun GetChildByIndex(int index) : ALittle.DisplayObject {	return this._body.GetChildByIndex(index); }
	public fun GetChildIndex(ALittle.DisplayObject child) : int	{ return this._body.GetChildIndex(child);	}
	public get childs() : List<ALittle.DisplayObject> { return this._body.childs; }
	public get child_count() : int { return this._body.child_count;	}
	public fun HasChild(ALittle.DisplayObject child) : bool { return this._body.HasChild(child); }

	public fun AddChild(ALittle.DisplayObject child, [Nullable] int index) : bool
	{
		if (this._body.AddChild(child, index) == false)
			return false;
		child._logic_parent = this;

		if (this._body.abs_visible)
			this.DispatchEvent(new ALittle.UIResizeEvent());
		return true;
	}
	
	public fun RemoveChild(ALittle.DisplayObject child) : bool
	{
		if (this._body.RemoveChild(child) == false)
			return false;
		child.group = null;
		if (this._body.abs_visible)
			this.DispatchEvent(new ALittle.UIResizeEvent());
		return true;
	}
	
	public fun RemoveAllChild()
	{
		for (var index, child in this.childs)
			child.group = null;
		this._body.RemoveAllChild();
		
		if (this._body.abs_visible)
			this.DispatchEvent(new ALittle.UIResizeEvent());
	}
	
	//////////////////////////////////////////////////////////////////////
	public get width() : double
	{
		var head_width = 0.0;
		if (this._head != null) head_width = this._head.width;
		var body_width = 0.0;
		if (this._body.visible)
		{
			var start_x = this._body.x;
			body_width = start_x + this._body.width;
			var childs = this._body.childs;
			for (var k, v in childs)
			{
				var child_width = start_x + v.x + v.width;
				if (body_width < child_width) body_width = child_width;
			}
		}
		if (head_width > body_width) return head_width;
		return body_width;
	}
	
	public get height() : double
	{
		var head_height = 0.0;
		if (this._head != null) head_height = this._head.height;
		if (this._body.visible) return head_height + this._body.height;
		return head_height;
	}
	
	public get fold() : bool { return this._body.visible; }
	public set fold(bool value)
	{
		if (value == this._body.visible) return;
	
		this._body.visible = value;
		this._item_checkbutton.selected = value;
		this.DispatchEvent(new ALittle.UIResizeEvent());
	}
	
	public get max_right() : double	{ return this.width; }
	public get max_bottom() : double { return this.height; }
}
