
namespace ALittleIDE;

public class IDETabChild : ALittle.UIEventDispatcher
{
	private string _name;           // 当前控件名
	private bool _save;             // 是否已保存
	
	private ALittle.RevokeList _revoke_list;         // 撤销操作列表
    private ALittle.ControlSystem _ctrl_sys;	// 控件系统

	public ctor(ALittle.ControlSystem ctrl_sys, string name, bool save)
	{
		this._name = name;
		this._save = save;
		// 撤销列表
		this._revoke_list = new ALittle.RevokeList();
    }
	
	public get id() : string { return this._name; }
	public get name() : string { return this._name; }
	public get save() : bool { return this._save; }
	public set save(bool value) {}
	public fun Save() { this.save = true; }
	public get revoke_list() : ALittle.RevokeList { return this._revoke_list; }
	public fun CanDelete(string control_name) : string { return null; }
	public get title() : string { return this._name; }
	public get tab_body() : ALittle.DisplayObject { return null; }

	public fun OnHide() {}
	public fun OnShow() {}
	public fun OnClose() {}
	public fun OnOpen() {}
	public fun OnRightMenu(AUIPlugin.AUIRightMenu menu) {}
}

public class IDEContentEdit : ALittle.DisplayLayout
{
	private ALittle.DisplayObject _cur_tab;		// 当前标签页
	private ALittle.Tab _main_tab;				// tab标签管理器
	
	public fun TCtor()
	{
		// 接听tab的相关事件以及回调
		this._main_tab.AddEventListener(this, this.HandleMainTabSelectChange);
		this._main_tab.AddEventListener(this, this.HandleMainTabRightClick);
		this._main_tab.AddEventListener(this, this.HandleMainTabKeyDown);
		this._main_tab.close_callback = bind(this.MainTabTabCloseYesOrNot, this);
		this._main_tab.close_post_callback = bind(this.MainTabTabClose, this);
		// 监听关闭
		g_IDEProject.AddEventListener(this, this.HandleProjectClose);
	}
	
	public get cur_tab() : ALittle.DisplayObject { return this._cur_tab; }
	public get main_tab() : ALittle.Tab { return this._main_tab; }
	public get cur_tab_child() : IDETabChild
	{
		if (this._cur_tab == null) return null;
		return this._cur_tab._user_data;
	}

	private fun HandleProjectClose(IDEProjectCloseEvent event)
	{
        this.CloseAllTab();
    }
	
	////////////////////////////////////////////////////////////////////////-	
	// 按照name遍历Tab是否已存在某个名字的控件
	public fun GetTabById<T:IDETabChild>(string id) : ALittle.DisplayObject
	{
		//遍历
		var tab_childs = this._main_tab.childs;
		for (var index, child in tab_childs)
		{
			var tab_child = ALittle.Cast{T, IDETabChild}(child._user_data);
			if (tab_child != null && tab_child.id == id)
				return child;
		}
		return null;
	}
	
	// 获取控件映射表
	public fun GetTabIdMap<T:IDETabChild>() : Map<string, bool>
	{
		//遍历
		var info = new Map<string, bool>();
		var tab_childs = this._main_tab.childs;
		for (var index, child in tab_childs)
		{
			var tab_child = ALittle.Cast{T, IDETabChild}(child._user_data);
			if (tab_child != null)
				info[tab_child.id] = true;
        }

		return info;
	}
	
	// 获取当前标签的下标
	public fun GetCurTabIndex() : int
	{
		return this._main_tab.tab_index;
	}
	
	// 获取当前标签的下标
	public fun SetCurTabIndex(int index)
	{
		if (this._main_tab.tab_index == index) return;
		this._main_tab.tab_index = index;
		this.ChangeTabEdit(this._cur_tab, this._main_tab.tab);
	}
	
	// 检查是否已经都保存了
	public fun IsSaveAll() : bool
	{
		//遍历
		var tab_childs = this._main_tab.childs;
		for (var index, child in tab_childs)
		{
			if (cast<IDETabChild>(child._user_data).save == false)
				return false;
		}
		return true;
	}
	
	// 切换tab编辑, 从from切换到to
	public fun ChangeTabEdit(ALittle.DisplayObject child_from, ALittle.DisplayObject child_to)
	{
		if (child_from == child_to) return;
		// 把控件树区域的结构保存到from的info, 判断是否为Tab栏的第一个子控件
		if (child_from != null)
		{
			var tab_child:IDETabChild = child_from._user_data;
			tab_child.OnHide();
		}
	
		if (child_to != null)
		{
			var tab_child:IDETabChild = child_to._user_data;
			tab_child.OnShow();
		}
	
		// 保存当前分页
		this._cur_tab = child_to;
	}
	
	// 关闭某个分页
	public fun CloseTab(ALittle.DisplayObject child)
	{
		var tab_child:IDETabChild = child._user_data;
		tab_child.OnClose();
		this._main_tab.RemoveChild(child);

		// 切换到当前标签页
		this.ChangeTabEdit(null, this._main_tab.tab);
	}

	// 保存某个分页
	public fun SaveTab(ALittle.DisplayObject child)
	{
        var tab_child:IDETabChild = child._user_data;
		tab_child.save = true;
    }
	
	// 关闭全部分页
	public fun CloseAllTab()
	{
		this.ChangeTabEdit(this._main_tab.tab, null);

		for (var k, child in this._main_tab.childs)
		{
			var tab_child:IDETabChild = child._user_data;
			tab_child.OnClose();
		}
		this._main_tab.RemoveAllChild();
	}
	
	// 保存全部分页
	public fun SaveAllTab()
	{
		for (var k, child in this._main_tab.childs)
		{
			var tab_child:IDETabChild = child._user_data;
			tab_child.save = true;
		}
	}

	// 是否允许删除某个控件
	public fun CanDelete(string control_name) : string
	{
		for (var k, child in this._main_tab.childs)
		{
			var tab_child:IDETabChild = child._user_data;
			var error = tab_child.CanDelete(control_name);
			if (error != null) return error;
		}
		return null;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////-
	// Tab栏的选中项发生改变时执行的操作
	private fun HandleMainTabSelectChange(ALittle.UISelectChangedEvent event)
	{
		this.ChangeTabEdit(this._cur_tab, this._main_tab.tab);
	}
	
	// Tab栏中有子控件被关闭执行的操作
	private fun MainTabTabClose(ALittle.DisplayObject child)
	{
		this.CloseTab(child);
	}

	// 判断能否直接关闭
	private fun MainTabTabCloseYesOrNot(ALittle.DisplayObject child) : bool
	{
		var tab_child:IDETabChild = child._user_data;
		if (tab_child.save) return true;
	
		this.MainTabTabCloseImpl(tab_child, child);
		return false;
	}

	private async fun MainTabTabCloseImpl(IDETabChild tab_child, ALittle.DisplayObject child)
	{
		var cancel_callback = bind(this.CloseTab, this, child);
		var result = g_AUITool.SaveNotice("提示", "是否保存?");
		if (result == AUIPlugin.AUIToolOption.YES)
			tab_child.save = true;
		this.CloseTab(child);    
    }
	
	// Tab右键事件
	private fun HandleMainTabRightClick(ALittle.UIRButtonDownEvent event)
	{
		var tab_child:IDETabChild = event.target._user_data;

		var menu = new AUIPlugin.AUIRightMenu();
		menu.AddItem("保存", bind(tab_child.Save, tab_child));
		tab_child.OnRightMenu(menu);
		menu.AddItem("关闭自己", bind(g_IDECenter.center.content_edit.CloseTabWithAsk, g_IDECenter.center.content_edit, tab_child.tab_body));
		menu.AddItem("关闭左侧", bind(g_IDECenter.center.content_edit.CloseLeftTab, g_IDECenter.center.content_edit, tab_child.tab_body));
		menu.AddItem("关闭右侧", bind(g_IDECenter.center.content_edit.CloseRightTab, g_IDECenter.center.content_edit, tab_child.tab_body));
		menu.Show();
	}
	
	// Tab按键事件
	private async fun HandleMainTabKeyDown(ALittle.UIKeyDownEvent event)
	{
	}

	// Tab界面右上角菜单按钮
	private fun HandleTabRightExMenu(ALittle.UIEvent event)
	{
		//遍历
		var tab_childs = this._main_tab.childs;
		if (tab_childs[1] == null) return;

		var menu = new AUIPlugin.AUIRightMenu();
		for (var index, child in tab_childs)
		{
			var tab_child:IDETabChild = child._user_data;
			menu.AddItem(tab_child.title, bind(this.SelectItemClick, this, child));
		}
		menu.Show();
	}
	
	private fun SelectItemClick(ALittle.DisplayObject child_to)
	{
		// 获取当前tab
		var child_from = this._main_tab.tab;
		// 设置索引
		this._main_tab.SetChildIndex(child_to, 1);
		this._main_tab.tab = child_to;
		// 切换
		this.ChangeTabEdit(child_from, child_to);
	}

	public async fun CloseTabWithAsk(ALittle.DisplayObject child)
	{
		var tab_child:IDETabChild = child._user_data;
        
		if (tab_child.save)
		{
			this.CloseTab(child);
			return;
		}
		var result = g_AUITool.SaveNotice("提示", "是否保存当前标签页?");
		if (result == AUIPlugin.AUIToolOption.YES)
			tab_child.save = true;
		this.CloseTab(child);
    }

	public fun CloseLeftTab(ALittle.DisplayObject child)
	{
		var close_list = new List<ALittle.DisplayObject>();
		for (var index, child_v in this._main_tab.childs)
		{
			if (child_v == child) break;
			var tab_child:IDETabChild = child_v._user_data;
			if (tab_child.save)
				ALittle.List_Push(close_list, child_v);
		}
		for (var index, child_v in close_list)
			this.CloseTab(child_v);
	}

	public fun CloseRightTab(ALittle.DisplayObject child)
	{
		var close_list = new List<ALittle.DisplayObject>();
		var child_list = this._main_tab.childs;
		var cur_index = this._main_tab.GetChildIndex(child);
		var child_count = this._main_tab.child_count;
		for (var index = cur_index + 1; index <= child_count; 1)
		{
			var child_v = child_list[index];
			var tab_child:IDETabChild = child_v._user_data;
			if (tab_child.save)
				ALittle.List_Push(close_list, child_v);
		}
		for (var index, child_v in close_list)
			this.CloseTab(child_v);
    }

	////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 新建控件，并编辑
	public fun StartEditControlByNew(string name, string type) : IDEUITabChild
	{
		// 获取当前正在编辑的分页
		var child_from = this._main_tab.tab;
		// 创建Tab子控件
		var tab_child = new IDEUITabChild(g_Control, name, false);
		tab_child.CreateByNew(type);
		// 添加到界面中去
		this._main_tab.AddChild(tab_child.tab_screen);
		// 发送打开事件
		tab_child.OnOpen();
		//切换
		this._main_tab.tab = tab_child.tab_screen;
		//切换时的数据操作
		this.ChangeTabEdit(child_from, this._main_tab.tab);
		// 设置标题
		tab_child.UpdateTitle();
		// 设置焦点
		tab_child.ShowHandleQuad(tab_child.tree_object);
		return tab_child;
	}
	
	// 继承控件，并编辑
	public fun StartEditControlByExtends(string name, string extends_v) : IDEUITabChild
	{
		// 获取当前正在编辑的分页
		var child_from = this._main_tab.tab;
		// 创建Tab子控件
		var tab_child = new IDEUITabChild(g_Control, name, false);
		tab_child.CreateByExtends(extends_v);
		// 添加到界面中去
		this._main_tab.AddChild(tab_child.tab_screen);
		// 发送打开事件
		tab_child.OnOpen();
		//切换
		this._main_tab.tab = tab_child.tab_screen;
		// 切换时的数据操作
		this.ChangeTabEdit(child_from, this._main_tab.tab);
		// 设置标题
		tab_child.UpdateTitle();
		// 设置焦点
		tab_child.ShowHandleQuad(tab_child.tree_object);
		return tab_child;
	}
	
	// 选择控件，并编辑
	public fun StartEditControlBySelect(string name, const ALittle.DisplayInfo info) : IDEUITabChild
	{
		// 判断显示tab栏中是否已有该控件
		var child = this.GetTabById{IDEUITabChild}(name);
		if (child != null) // 切换
		{
			// 获取当前正在编辑的标签页
			var child_from = this._main_tab.tab;
			// 设置目标标签页
			this._main_tab.tab = child;
			// 切换时数据操作
			this.ChangeTabEdit(child_from, this._main_tab.tab);
			return child._user_data;
		}
	
		// 获取当前正在编辑的标签页
		var child_from = this._main_tab.tab;
		var tab_child = new IDEUITabChild(g_Control, name, true);
		tab_child.CreateBySelect(info);
	
		// 添加到界面中去
		this._main_tab.AddChild(tab_child.tab_screen, 1);
		// 发送打开事件
		tab_child.OnOpen();
		//切换
		this._main_tab.tab = tab_child.tab_screen;
		// 切换时的数据操作
		this.ChangeTabEdit(child_from, this._main_tab.tab);
		// 设置标题
		tab_child.UpdateTitle();
		// 如果根节点不是容器，那么直接设置焦点
		if (!tab_child.tree_object.is_tree)
			tab_child.ShowHandleQuad(tab_child.tree_object);

		return tab_child;
	}

	// 选择文件，并编辑
	public fun StartEditCodeBySelect(string name, IDECodeTreeUserInfo info) : IDECodeTabChild
	{
		// 判断显示tab栏中是否已有该控件
		var child = this.GetTabById{IDECodeTabChild}(info.path);
		if (child != null) // 切换
		{
			// 获取当前正在编辑的标签页
			var child_from = this._main_tab.tab;
			// 设置目标标签页
			this._main_tab.tab = child;
			// 切换时数据操作
			this.ChangeTabEdit(child_from, this._main_tab.tab);
			return child._user_data;
		}

		// 获取当前正在编辑的标签页
		var child_from = this._main_tab.tab;
		var tab_child = new IDECodeTabChild(g_Control, name, true);
		tab_child.CreateBySelect(info);
	
		// 添加到界面中去
		this._main_tab.AddChild(tab_child.tab_screen, 1);
		// 发送打开事件
		tab_child.OnOpen();
		//切换
		this._main_tab.tab = tab_child.tab_screen;
		// 切换时的数据操作
		this.ChangeTabEdit(child_from, this._main_tab.tab);
		// 设置标题
		tab_child.UpdateTitle();

		return tab_child;
    }
}