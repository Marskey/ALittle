
namespace ALittleIDE;

class IDECenter
{
	private IDEUIAccount _account;
	private IDEUIProjectDropdown _project_dropdown;
	private IDEUIMainMenu _main_menu;
	private IDEUICenter _center;

	private IDEUIControlAttr _control_attr;	// 控件属性
	private ALittle.Dialog _control_attr_dialog;
	
	public await fun Setup()
	{
		// 创建主界面
		g_Control.CreateControl{ALittle.DisplayObject}("ide_main_scene", this, g_MainLayer);
		this._control_attr_dialog.visible = false;
		// 打开上一次的项目
		g_IDEProject.OpenLastProject();
		// 初始化组合键
		A_UISystem.keydown_callback = bind(this.HandleShortcutKey, this);
	}
	
	public fun Shutdown()
	{
		if (this._account != null) this._account.Shutdown();
		if (this._main_menu != null) this._main_menu.Shutdown();
	}

	public get center() : IDEUICenter { return this._center; }
	public get control_attr() : IDEUIControlAttr { return this._control_attr; }
	
	public async fun RefreshProject()
	{
		// 检查是否都保存了
		if (!this._center.content_edit.IsSaveAll())
		{
			var result = g_AUITool.SaveNotice("提示", "是否保存当前项目?");
			if (result == AUIPlugin.AUIToolOption.YES)
				this._center.content_edit.SaveAllTab();
		}
		// 刷新当前
		g_IDEProject.RefreshProject();
	}

	public fun ShowControlAttrDialog(ALittle.DisplayObject object)
	{
        this._control_attr_dialog.visible = true;

        this._control_attr_dialog.x = A_UISystem.mouse_x + 50;
		this._control_attr_dialog.y = A_UISystem.mouse_y;

		if (this._control_attr_dialog.x + this._control_attr_dialog.width > A_UISystem.view_width)
			this._control_attr_dialog.x = A_UISystem.view_width - this._control_attr_dialog.width;
		if (this._control_attr_dialog.y + this._control_attr_dialog.height > A_UISystem.view_height)
    		this._control_attr_dialog.y = A_UISystem.view_height - this._control_attr_dialog.height;
	}

	////////////////////////////////////////////////////////////////////////////////////////
	// 处理快捷点
	public fun HandleShortcutKey(int mod, int sym, int scancode)
	{
		// 判断F5，运行当前项目快捷键
		if (A_UISystem.sym_map[ALittle.UIEnumTypes.KEY_F5])
		{
			g_IDEProject.RunProject();
			return;
		}

		if (this._center != null)
			this._center.HandleShortcutKey();
	}
}

protected var g_IDECenter = new IDECenter();