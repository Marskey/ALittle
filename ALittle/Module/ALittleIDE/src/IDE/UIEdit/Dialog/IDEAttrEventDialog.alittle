
namespace ALittleIDE;

public class IDEAttrEventDialog
{
    private ALittle.DisplayObject _dialog;
    private DisplayObjectS _target_panel;
    private string _target_text;
    private bool _target_need_reset;

    private ALittle.ImageEdit _event_edit;

    private string _edit_old_text;
    private IDERevokeList _revoke_list;
    private ALittle.DisplayObject _select_dialog;

    ////////////////////////////////////////////////////////////////////////////////////////
    public fun ShowDialog(DisplayObjectS target_panel, string text, bool need_reset)
    {
        // 创建模态提示对话框，并添加到模态层
        if (this._dialog == null)
        {
            this._dialog = g_Control.CreateControl{ALittle.DisplayObject}("ide_event_edit_dialog", this);
            A_LayerManager.AddToModal(this._dialog);
        }
        // 显示提示对话框，设置标题和内容
        this._dialog.visible = true;
        this._target_panel = target_panel;
        this._target_text = text;
        this._target_need_reset = need_reset;
        this.ResetText();
    
        A_UISystem.focus = this._event_edit.show_edit;
    }
    public fun HideDialog()
    {
        this._dialog.visible = false;
    }
    public fun IsShow() : bool
    {
        if (this._dialog == null) return false;
        return this._dialog.visible;
    }
    
    public fun HandleEventConfirm(ALittle.UIClickEvent event)
    {
        var content = this._event_edit.text;
        if (content == "")
        {
            this._dialog.visible = false;
            var object:ALittle.DisplayObject = cast<Map<string, any>>(this._target_panel)["_"..this._target_text];
            object.text = "";
            this._target_panel.TableDataSet(this._target_text, false);
            return;
        }
        var has_error = false;
        // 根据换行换行键拆分
        var event_list = ALittle.String_SplitSepList(content, ["\n", "\r"]);
        var event_data:List<ALittle.EventInfo> = null;
        for (var index, event_string in event_list)
        {
            if (event_data == null) event_data = new List<ALittle.EventInfo>();
            var event_info:ALittle.EventInfo = null;
            // 根据冒号拆分
            var event_split = ALittle.String_Split(ALittle.String_Trim(event_string), ":");
            var event_count = ALittle.List_MaxN(event_split);
            if (event_count == 2)
            {
                event_info = new ALittle.EventInfo();
                event_info.type = event_split[1];
                event_info.func = event_split[2];
            }

            // 如果是有效信息，那么就添加到列表中
            if (event_info != null)
                ALittle.List_Push(event_data, event_info);
            else
                has_error = true;
        }
    
        if (event_data == null || has_error)
        {
            g_AUITool.ShowNotice("警告", "事件编辑有错误，请检查");
            return;
        }
        this._dialog.visible = false;
        if (event_data == null) return;
        cast<ALittle.DisplayObject>(cast<Map<string, any>>(this._target_panel)["_"..this._target_text]).text = ALittle.String_JsonEncode(event_data);
        this._target_panel.TableDataSet(this._target_text, false);
    }
    
    public fun ResetText()
    {
        var info:List<ALittle.EventInfo> = cast<Map<string, any>>(this._target_panel.base)[this._target_text];
        if (info == null) info = cast<Map<string, any>>(this._target_panel.default)[this._target_text];
        if (info == null) info = new List<ALittle.EventInfo>();
        var content = new List<string>();
        var content_count = 0;
        for (var index, event_info in info)
        {
            var data_type = event_info.type..":";
            var event_string = data_type..event_info.func;
            ++ content_count;
            content[content_count] = event_string;
        }
        var content_str = ALittle.String_Join(content, "\n");
        this._event_edit.text = content_str;
        this._edit_old_text = content_str;
        this._revoke_list = new IDERevokeList();
    }
    
    public fun ShowEventSelectDialog(double x, double y)
    {
        if (this._select_dialog == null)
        {
            // 创建控件
            this._select_dialog = g_Control.CreateControl{ALittle.DisplayObject}("ide_event_select_screen", this);
            // 把事件类型添加进来
            for (var k, v in g_IDEEnum.event_type_list)
            {
                var button = g_Control.CreateControl{ALittle.DisplayObject}("ide_common_item_button");
                button.text = v;
                button.AddEventListener(this, this.HandleEventSelectClick);
                button.drag_trans_target = this._select_dialog;
                this._select_dialog.AddChild(button);
            }
        }
    
        this._select_dialog.x = x;
        this._select_dialog.y = y;
        A_LayerManager.ShowFromRight(this._select_dialog);
    }
    
    public fun HandleEventSelectClick(ALittle.UIClickEvent event)
    {
        A_LayerManager.HideFromRight(this._select_dialog);
        var text = event.target.text;
        this._event_edit.InsertText("ALittle."..text);
    }
    
    public fun HandleEventRightButtonDown(ALittle.UIRButtonDownEvent event)
    {
        this.ShowEventSelectDialog(A_UISystem.mouse_x, A_UISystem.mouse_y);
    }
    
    public fun HandleEventChange(ALittle.UIChangedEvent event)
    {
        var edit_new_text = this._event_edit.text;
        var revoke = new IDETextEditRevoke(this._event_edit, this._edit_old_text, edit_new_text);
        this._edit_old_text = edit_new_text;
        this._revoke_list.PushRevoke(revoke);
    }
    
    public fun HandleEventKeyDown(ALittle.UIKeyDownEvent event) : bool
    {
            // 判定Ctrl键是否按下
        var ctrl = A_UISystem.sym_map[1073742048];
        if (ctrl == null) return false;
        // 判断Ctrl+Z
        var z = A_UISystem.sym_map[122];
        if (z)
            this._revoke_list.UndoRevoke();
        
        return true;
    }
}

protected var g_IDEAttrEventDialog = new IDEAttrEventDialog();