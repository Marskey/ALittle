
namespace ALittleIDE;

struct IDEPasteControlUserData
{
	IDEUITreeLogic target;
	ALittle.DisplayInfo info;
	int child_index;
	IDERevokeBind revoke_bind;
	Functor<(bool, List<IDEUITreeLogic>)> callback;
}

public class IDEUIControlTree : ALittle.DisplayLayout
{
	private ALittle.DisplayObject _control_add_dialog;
	private ALittle.DropDown _control_add_new_type;
	private ALittle.DropDown _control_add_type;
	private ALittle.DisplayObject _control_add_extends_name;
	
	private ALittle.DisplayObject _control_replace_dialog;
	private ALittle.DropDown _control_replace_new_type;
	private ALittle.DropDown _control_replace_type;
	private ALittle.DisplayObject _control_replace_extends_name;

	private ALittle.DisplayObject _paste_control_dialog;
	private ALittle.DropDown _control_paste_type;

	private ALittle.DisplayObject _tree_search_key;
	private ALittle.DisplayObject _tree_search_type;

	////////////////////////////////////////////////////////////////////////////////////////
	// 处理控件树，右键菜单
	public fun HandleControlTreeItemRightClick(ALittle.UIRButtonDownEvent event)
	{
		var target:IDEUITreeItem = event.target._user_data;
		if (target.user_info.extends) return;
	
		var menu = new AUIPlugin.AUIRightMenu();
		menu.AddItem("上移", bind(target.TransferUp, target), target.user_info.root || target.user_info.child_type != "child", false);
		menu.AddItem("下移", bind(target.TransferDown, target), target.user_info.root || target.user_info.child_type != "child", false);
		menu.AddItem("添加", bind(this.ShowAddDialog, this, target), !target.is_tree);
		menu.AddItem("添加Image", bind(this.ShowAddImageDialog, this, target), !target.is_tree);
		menu.AddItem("添加Text", bind(this.ShowAddTextDialog, this, target), !target.is_tree);
		menu.AddItem("复制", bind(target.CopyToClipboard, target));
		menu.AddItem("粘贴", bind(target.PasteFromClipboard, target));
		menu.AddItem("剪切", bind(target.CutToClipboard, target), target.user_info.root);
		menu.AddItem("删除", bind(target.TreeDelete, target, null), target.user_info.root);
		menu.AddItem("跳转", bind(this.ControlTreeJump, this, target), !target.user_info.extends_root);
		menu.AddItem("替换", bind(this.ShowReplaceDialog, this, target), target.user_info.root);
		menu.AddItem("描述", bind(this.ControlTreeDesc, this, target));
		menu.Show();
	}
	
	// 处理添加
	public async fun ShowAddImageDialog(IDEUITreeLogic target)
	{
		// 直接显示图片选择框
		g_IDEImageSelectDialog.SetBasePath(g_IDEProject.project.texture_path);
		var path = g_IDEImageSelectDialog.ShowSelect();
		if (path == null) return;

		// 设置这个下拉菜单
		if (target.CanAddChild() == false)
		{
			g_AUITool.ShowNotice("提示", "当前控件不能添加子控件");
			return;
		}
		// 添加一个控件
		var tree_object = target.TreeAdd("", "Image", "child");
		if (tree_object == null)
		{
			g_AUITool.ShowNotice("提示", "添加失败");
			return;
		}
		// 对这个新的Image设置纹理
		tree_object.attr_panel.SetTextureName(path, null);
		tree_object.ShowFocus(false);
	}
	// 处理添加
	public fun ShowAddTextDialog(IDEUITreeLogic target)
	{
		// 设置这个下拉菜单
		if (target.CanAddChild() == false)
		{
			g_AUITool.ShowNotice("提示", "当前控件不能添加子控件");
			return;
		}
		// 添加一个控件
		var tree_object = target.TreeAdd("", "Text", "child");
		if (tree_object == null)
		{
			g_AUITool.ShowNotice("提示", "添加失败");
			return;
		}
		tree_object.ShowFocus(false);
	}
	// 处理添加
	public fun ShowAddDialog(IDEUITreeLogic target)
	{
		// 打开添加对话框
		if (this._control_add_dialog == null)
		{
			this._control_add_dialog = g_Control.CreateControl{ALittle.DisplayObject}("ide_add_control_dialog", this);
			this._control_add_new_type.data_list = g_IDEEnum.child_type_list;
			A_LayerManager.AddToModal(this._control_add_dialog);
			this._control_add_dialog.visible = false;
		}
		// 设置这个下拉菜单
		var data_list = target.GetDataListForAdd();
		if (ALittle.List_MaxN(data_list) == 0)
		{
			g_AUITool.ShowNotice("提示", "当前控件不能添加子控件");
			return;
		}
		// 这个是IDEUITree或者IDEUITreeItem
		this._control_add_dialog._user_data = target;
		// 设置下拉菜单的data_list
		this._control_add_type.data_list = data_list;
		this._control_add_dialog.visible = true;
		this._control_add_extends_name.text = "";
	}
	// 添加取消
	public fun HandleAddControlCancel(ALittle.UIEvent event)
	{
		this._control_add_dialog.visible = false;
		this._control_add_dialog._user_data = null;
	}
	// 添加确认
	public fun HandleAddControlConfirm(ALittle.UIEvent event)
	{
		var target:IDEUITreeLogic = this._control_add_dialog._user_data;
		this._control_add_dialog._user_data = null;
		// 检查继承
		var extends_name = this._control_add_extends_name.text;
		if (extends_name != "" && g_IDEProject.project.ui.control_map[extends_name] == null)
		{
			g_AUITool.ShowNotice("错误", "继承控件不存在:"..extends_name);
			return;
		}
		this._control_add_dialog.visible = false;
		// 获取添加类型
		var child_type = this._control_add_type.text;
		var class_name = this._control_add_new_type.text;
	
		var tree_object = target.TreeAdd(extends_name, class_name, child_type);
		if (tree_object != null) tree_object.ShowFocus(false);
	}
	// 处理替换
	public fun ShowReplaceDialog(IDEUITreeLogic target)
	{
		// 如果当前节点是分支节点，那么就要检查是否有子控件
		if (target.is_tree && target.child_count > 0)
		{
			g_AUITool.ShowNotice("提示", "当前控件有子控件，不能替换");
			return;
		}
		// 获取目标的父节点
		var target_parent = cast<IDEUITreeLogic>(target.logic_parent);
		if (target_parent == null) return;
	
		// 当前的节点类型
		var child_type = target.user_info.child_type;
		// 打开添加对话框
		if (this._control_replace_dialog == null)
		{
			this._control_replace_dialog = g_Control.CreateControl{ALittle.DisplayObject}("ide_replace_control_dialog", this);
			this._control_replace_new_type.data_list = g_IDEEnum.child_type_list;
			A_LayerManager.AddToModal(this._control_replace_dialog);
			this._control_replace_dialog.visible = false;
		}
		// 设置这个下拉菜单
		var data_list = target_parent.GetDataListForAdd();
		// 遍历，如果data_list里面已经有child_type那么就不添加
		var child_type_exist = false;
		for (var k, v in data_list)
		{
			if (v == child_type)
			{
				child_type_exist = true;
				break;
			}
		}
		if (child_type_exist == false)
			ALittle.List_Push(data_list, child_type);

		// 这个是IDEUITree或者IDEUITreeItem
		this._control_replace_dialog._user_data = target;
		// 设置下拉菜单的data_list
		this._control_replace_type.data_list = data_list;
		this._control_replace_dialog.visible = true;
		this._control_replace_extends_name.text = "";
	}
	
	public fun HandleReplaceControlCancel(ALittle.UIEvent event)
	{
		this._control_replace_dialog.visible = false;
		this._control_replace_dialog._user_data = null;
	}
	
	public fun HandleReplaceControlConfirm(ALittle.UIEvent event)
	{
		var target:IDEUITreeLogic = this._control_replace_dialog._user_data;
		this._control_replace_dialog._user_data = null;
		// 检查继承
		var extends_name = this._control_replace_extends_name.text;
		if (extends_name != "" && g_IDEProject.project.ui.control_map[extends_name] == null)
		{
			g_AUITool.ShowNotice("错误", "继承控件不存在:"..extends_name);
			return;
		}
		this._control_replace_dialog.visible = false;
		// 获取添加类型
		var child_type = this._control_replace_type.text;
		var class_name = this._control_replace_new_type.text;
	
		target.TreeReplace(extends_name, class_name, child_type);
	}
	// 处理粘贴
	public fun ShowPasteDialog(IDEUITreeLogic target, ALittle.DisplayInfo info, int child_index, IDERevokeBind revoke_bind, Functor<(bool, List<IDEUITreeLogic>)> callback)
	{
		var data_list = target.GetDataListForAdd();
		if (ALittle.List_MaxN(data_list) == 0)
		{
			g_AUITool.ShowNotice("提示", "当前控件不能添加子控件");
			if (callback != null) callback(false, null);
			return;
		}
	
		if (this._paste_control_dialog == null)
		{
			this._paste_control_dialog = g_Control.CreateControl{ALittle.DisplayObject}("ide_paste_control_dialog", this);
			A_LayerManager.AddToModal(this._paste_control_dialog);
		}
		this._paste_control_dialog.visible = true;
		this._control_paste_type.data_list = data_list;
		var user_data = new IDEPasteControlUserData();
		this._paste_control_dialog._user_data = user_data;
		user_data.target = target;
		user_data.info = info;
		user_data.child_index = child_index;
		user_data.revoke_bind = revoke_bind;
		user_data.callback = callback;
	}
	
	public fun HandlePasteControlCancel(ALittle.UIEvent event)
	{
		this._paste_control_dialog.visible = false;
		var user_data:IDEPasteControlUserData = this._paste_control_dialog._user_data;
		var callback = user_data.callback;
		if (callback != null) callback(false, null);
		this._paste_control_dialog._user_data = null;
	}
	
	public fun HandlePasteControlConfirm(ALittle.UIEvent event)
	{
		this._paste_control_dialog.visible = false;
		var user_data:IDEPasteControlUserData = this._paste_control_dialog._user_data;
		this._paste_control_dialog._user_data = null;
	
		var add_list = new List<IDEUITreeLogic>();
		var tree_object = user_data.target.TreePaste(user_data.info, this._control_paste_type.text, user_data.child_index, false, user_data.revoke_bind);
		add_list[1] = tree_object;
		if (user_data.callback != null) user_data.callback(true, add_list);
	}
	// 处理跳转
	public fun ControlTreeJump(IDEUITreeLogic target)
	{
		var extends_name = target.user_info.base.__extends;
		var control_info = g_IDEProject.project.ui.control_map[extends_name];
		if (control_info == null)
		{
			g_AUITool.ShowNotice("错误", "控件不存在:"..extends_name);
			return;
		}
	
		g_IDECenter.center.content_edit.StartEditControlBySelect(control_info.name, control_info.info);
	}
	// 处理描述
	public async fun ControlTreeDesc(IDEUITreeLogic target)
	{
		var x, y = target.LocalToGlobal();
		var desc = target.GetDesc();
		var name = g_AUITool.ShowRename(desc, x, y, target.width);
		if (name == null) return;
		target.SetDesc(name);
	}
	// 处理搜索
	public fun HandleTreeSearchClick(ALittle.UIEvent event)
	{
		var tab = g_IDECenter.center.content_edit.cur_tab;
		if (tab == null) return;
		var tab_child:IDEUITabChild = tab._user_data;
		var search_key = this._tree_search_key.text;
		var search_type = this._tree_search_type.text;
		if (search_type == "描述")
			tab_child.SearchDescription(search_key);
		elseif (search_type == "绑定设置")
			tab_child.SearchLink(search_key);
		elseif (search_type == "事件设置")
			tab_child.SearchEvent(search_key);
		elseif (search_type == "插件名")
			tab_child.SearchTargetClass(search_key);
		elseif (search_type == "图片路径")
			tab_child.SearchTextureName(search_key);
	}
}