
namespace ALittleIDE;

public class DialogS : DisplayLayoutS
{
	private ALittle.DisplayObject _show_background;
	private ALittle.DisplayObject _show_background_grid9;
	private ALittle.DisplayObject _show_head_drag;
	private ALittle.DisplayObject _show_head_drag_grid9;
	private ALittle.DisplayObject _show_close_button;
    
	public ctor(IDETreeUserInfo user_info, IDETabChild tab_child, IDETreeLogic tree_logic)
	{
		this._layer_name = "ide_setting_dialog";
	}

	public fun LoadNatureBase()
	{
		DisplayLayoutS.LoadNatureBase(this);
        
		this.LoadValueData("head_size");
		this.LoadDefaultNilString("title");
		this.LoadShowTypeDataForImage("show_background");
		this.LoadShowTypeDataForImage("show_head_drag");
		this.LoadShowTypeDataForExtends("show_close_button");
		this.LoadShowTypeNoNilData("show_title");
	}
	
	public fun HandleHeadSizeFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("head_size", false);
	}
	
	public fun HandleTitleFOCUSOUT(ALittle.UIEvent event)
	{
		this.DefaultNoStringInputChange("title", false);
	}
	
	public fun HandleShowBackgroundFOCUSOUT(ALittle.UIEvent event)
	{
		if (event.target._user_data != null)
		{
			if (event.target._user_data == event.target.text) return;
			event.target._user_data = event.target.text;
		}
		this.RemoverToNilShowSetForImage("show_background", this._show_background.text, this._show_background_grid9.selected, false);
	}
	public async fun HandleShowBackgroundSelect(ALittle.UIEvent event)
	{
		g_IDEImageSelectDialog.SetBasePath(g_IDEProject.project.texture_path);
		var path = g_IDEImageSelectDialog.ShowSelect();
		if (path == null) return;
		this.ImagePathSelectCallback("show_background", this.HandleShowBackgroundFOCUSOUT, null, path);
	}
	public fun HandleShowHeadDragFOCUSOUT(ALittle.UIEvent event)
	{
		if (event.target._user_data != null)
		{
			if (event.target._user_data == event.target.text) return;
			event.target._user_data = event.target.text;
		}
		this.RemoverToNilShowSetForImage("show_head_drag", this._show_head_drag.text, this._show_head_drag_grid9.selected, false);
	}
	public async fun HandleShowHeadDragSelect(ALittle.UIEvent event)
	{
		g_IDEImageSelectDialog.SetBasePath(g_IDEProject.project.texture_path);
		var path = g_IDEImageSelectDialog.ShowSelect();
		if (path == null) return;
		this.ImagePathSelectCallback("show_head_drag", this.HandleShowHeadDragFOCUSOUT, null, path);
	}
	
	public fun HandleShowCloseButtonFOCUSOUT(ALittle.UIEvent event)
	{
		if (event.target._user_data != null)
		{
			if (event.target._user_data == event.target.text) return;
			event.target._user_data = event.target.text;
		}
		this.RemoverToNilShowSetForExtends("show_close_button", this._show_close_button.text, false);
	}
	
	public fun HandleShowTitleFOCUSOUT(ALittle.UIEvent event)
	{
		g_IDEAttrTextDialog.ShowDialog(this, "show_title", false);
	}
	public fun HandleShowTitleClear(ALittle.UIEvent event)
	{
		this.RemoverToNilShowSet("show_title", "", true);
	}
}