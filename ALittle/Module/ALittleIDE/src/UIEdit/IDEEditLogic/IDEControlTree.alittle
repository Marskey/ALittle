
namespace ALittleIDE;

struct IDEPasteControlUserData
{
	IDETreeLogic target;
	ALittle.DisplayInfo info;
	int child_index;
	IDERevokeBind revoke_bind;
	Functor<(bool, List<IDETreeLogic>)> callback;
}

public class IDEControlTree
{
	private ALittle.DisplayObject _tip_dialog;
	private ALittle.DisplayObject _tip_text;
	
	private ALittle.DisplayObject _control_tree_menu;
	private ALittle.DisplayObject _right_control_tree_up;
	private ALittle.DisplayObject _right_control_tree_down;
	private ALittle.DisplayObject _right_control_tree_add;
	private ALittle.DisplayObject _right_control_tree_add_image;
	private ALittle.DisplayObject _right_control_tree_add_text;
	private ALittle.DisplayObject _right_control_tree_cut;
	private ALittle.DisplayObject _right_control_tree_jump;
	private ALittle.DisplayObject _right_control_tree_delete;
	private ALittle.DisplayObject _right_control_tree_replace;

	private ALittle.DisplayObject _control_add_dialog;
	private ALittle.DropDown _control_add_new_type;
	private ALittle.DropDown _control_add_type;
	private ALittle.DisplayObject _control_add_extends_name;
	
	private ALittle.DisplayObject _control_replace_dialog;
	private ALittle.DropDown _control_replace_new_type;
	private ALittle.DropDown _control_replace_type;
	private ALittle.DisplayObject _control_replace_extends_name;

	private ALittle.DisplayObject _paste_control_dialog;
	private ALittle.DropDown _control_paste_type;

	private ALittle.DisplayObject _tree_search_key;
	private ALittle.DisplayObject _tree_search_type;

	////////////////////////////////////////////////////////////////////////////////////////
	// 显示TIP
	public fun ShowTip(string content)
	{
		// 创建模态提示对话框，并添加到模态层
		if (this._tip_dialog == null)
		{
			this._tip_dialog = g_Control.CreateControl{ALittle.DisplayObject}("ide_tool_tip", this);
			A_LayerManager.AddToTip(this._tip_dialog);
		}
		
		this._tip_dialog.visible = true;
		this._tip_text.text = content;
		this._tip_dialog.width = this._tip_text.width + 10;
		this._tip_dialog.height = this._tip_text.height + 10;
	}
	
	// 移动TIP
	public fun MoveTip(double x, double y)
	{
		if (this._tip_dialog == null) return;
	
		this._tip_dialog.x = x;
		this._tip_dialog.y = y;
	}
	
	// 隐藏TIP
	public fun HideTip()
	{
		if (this._tip_dialog == null) return;
		this._tip_dialog.visible = false;
	}
	
	// 处理控件树，右键菜单
	public fun HandleControlTreeItemRightClick(ALittle.UIRButtonDownEvent event)
	{
		var target:IDETreeItem = event.target._user_data;
		if (target.user_info.extends) return;
	
		if (this._control_tree_menu == null)
			this._control_tree_menu = g_Control.CreateControl{ALittle.DisplayObject}("ide_control_tree_menu", this);
	
		this._right_control_tree_up.disabled = target.user_info.root || target.user_info.child_type != "child";
		this._right_control_tree_down.disabled = target.user_info.root || target.user_info.child_type != "child";
		this._right_control_tree_add.disabled = !target.IsTree();
		this._right_control_tree_add_image.disabled = !target.IsTree();
		this._right_control_tree_add_text.disabled = !target.IsTree();
		this._right_control_tree_cut.disabled = target.user_info.root;
		this._right_control_tree_jump.disabled = !target.user_info.extends_root;
		this._right_control_tree_delete.disabled = target.user_info.root;
		this._right_control_tree_replace.disabled = target.user_info.root;
	
		this._control_tree_menu._user_data = target;
		this._control_tree_menu.x = A_UISystem.mouse_x;
		this._control_tree_menu.y = A_UISystem.mouse_y;
	
		if (this._control_tree_menu.x + this._control_tree_menu.width > A_UISystem.view_width)
			this._control_tree_menu.x = A_UISystem.view_width - this._control_tree_menu.width;
		
		if (this._control_tree_menu.y + this._control_tree_menu.height > A_UISystem.view_height)
			this._control_tree_menu.y = A_UISystem.view_height - this._control_tree_menu.height;
		
		A_LayerManager.ShowFromRight(this._control_tree_menu);
	}
	
	// 处理上移
	public fun HandleRightControlTreeUp(ALittle.UIEvent event)
	{
		// 隐藏右键菜单
		// A_LayerManager.HideFromRight(this._control_tree_menu)
		// 获取tree对象
		var target:IDETreeLogic = this._control_tree_menu._user_data;
		// this._control_tree_menu._user_data = null
		// 处理上移
		target.TransferUp();
	}
	// 处理下移
	public fun HandleRightControlTreeDown(ALittle.UIEvent event)
	{
		// 隐藏右键菜单
		// A_LayerManager.HideFromRight(this._control_tree_menu)
		// 获取tree对象
		var target:IDETreeLogic = this._control_tree_menu._user_data;
		// this._control_tree_menu._user_data = null
		// 处理下移
		target.TransferDown();
	}
	// 处理添加
	public fun HandleRightControlTreeAdd(ALittle.UIEvent event)
	{
		// 隐藏右键菜单
		A_LayerManager.HideFromRight(this._control_tree_menu);
		// 获取tree对象
		var target:IDETreeLogic = this._control_tree_menu._user_data;
		this._control_tree_menu._user_data = null;
	
		this.ShowAddDialog(target);
	}
	// 处理添加
	public fun HandleRightControlTreeAddImage(ALittle.UIEvent event)
	{
		// 隐藏右键菜单
		A_LayerManager.HideFromRight(this._control_tree_menu);
		// 获取tree对象
		var target:IDETreeLogic = this._control_tree_menu._user_data;
		this._control_tree_menu._user_data = null;
	
		var func = bind(this.ImagePathSelectCallback, this, target);
		// 直接显示图片选择框
		g_IDEAttrImageDialog.ShowDialog(null, func);
	}
	// 处理选中图片
	public fun ImagePathSelectCallback(IDETreeLogic target, string path)
	{
		// 设置这个下拉菜单
		if (target.CanAddChild() == false)
		{
			g_IDETool.ShowNotice("提示", "当前控件不能添加子控件");
			return;
		}
		// 添加一个控件
		var tree_object = target.TreeAdd("", "Image", "child");
		if (tree_object == null)
		{
			g_IDETool.ShowNotice("提示", "添加失败");
			return;
		}
		// 对这个新的Image设置纹理
		tree_object.attr_panel.SetTextureName(path, null);
		tree_object.ShowFocus(false);
	}
	// 处理添加
	public fun HandleRightControlTreeAddText(ALittle.UIEvent event)
	{
		// 隐藏右键菜单
		A_LayerManager.HideFromRight(this._control_tree_menu);
		// 获取tree对象
		var target:IDETreeLogic = this._control_tree_menu._user_data;
		this._control_tree_menu._user_data = null;
	
		// 设置这个下拉菜单
		if (target.CanAddChild() == false)
		{
			g_IDETool.ShowNotice("提示", "当前控件不能添加子控件");
			return;
		}
		// 添加一个控件
		var tree_object = target.TreeAdd("", "Text", "child");
		if (tree_object == null)
		{
			g_IDETool.ShowNotice("提示", "添加失败");
			return;
		}
		tree_object.ShowFocus(false);
	}
	// 处理替换
	public fun HandleRightControlTreeReplace(ALittle.UIEvent event)
	{
		// 隐藏右键菜单
		A_LayerManager.HideFromRight(this._control_tree_menu);
		// 获取tree对象
		var target:IDETreeLogic = this._control_tree_menu._user_data;
		this._control_tree_menu._user_data = null;
	
		this.ShowReplaceDialog(target);
	}
	
	public fun ShowAddDialog(IDETreeLogic target)
	{
		// 打开添加对话框
		if (this._control_add_dialog == null)
		{
			this._control_add_dialog = g_Control.CreateControl{ALittle.DisplayObject}("ide_add_control_dialog", this);
			this._control_add_new_type.data_list = g_IDEEnum.child_type_list;
			A_LayerManager.AddToModal(this._control_add_dialog);
			this._control_add_dialog.visible = false;
		}
		// 设置这个下拉菜单
		var data_list = target.GetDataListForAdd();
		if (lua.table.maxn(data_list) == 0)
		{
			g_IDETool.ShowNotice("提示", "当前控件不能添加子控件");
			return;
		}
		// 这个是IDETree或者IDETreeItem
		this._control_add_dialog._user_data = target;
		// 设置下拉菜单的data_list
		this._control_add_type.data_list = data_list;
		this._control_add_dialog.visible = true;
		this._control_add_extends_name.text = "";
	}
	
	public fun HandleAddControlCancel(ALittle.UIEvent event)
	{
		this._control_add_dialog.visible = false;
		this._control_add_dialog._user_data = null;
	}
	
	public fun HandleAddControlConfirm(ALittle.UIEvent event)
	{
		var target:IDETreeLogic = this._control_add_dialog._user_data;
		this._control_add_dialog._user_data = null;
		// 检查继承
		var extends_name = this._control_add_extends_name.text;
		if (extends_name != "" && g_IDEProject.project.control_map[extends_name] == null)
		{
			g_IDETool.ShowNotice("错误", "继承控件不存在:"..extends_name);
			return;
		}
		this._control_add_dialog.visible = false;
		// 获取添加类型
		var child_type = this._control_add_type.text;
		var class_name = this._control_add_new_type.text;
	
		var tree_object = target.TreeAdd(extends_name, class_name, child_type);
		if (tree_object != null) tree_object.ShowFocus(false);
	}
	
	public fun ShowReplaceDialog(IDETreeLogic target)
	{
		// 如果当前节点是分支节点，那么就要检查是否有子控件
		if (target.IsTree() && target.child_count > 0)
		{
			g_IDETool.ShowNotice("提示", "当前控件有子控件，不能替换");
			return;
		}
		// 获取目标的父节点
		var target_parent = cast<IDETreeLogic>(target.logic_parent);
		if (target_parent == null) return;
	
		// 当前的节点类型
		var child_type = target.user_info.child_type;
		// 打开添加对话框
		if (this._control_replace_dialog == null)
		{
			this._control_replace_dialog = g_Control.CreateControl{ALittle.DisplayObject}("ide_replace_control_dialog", this);
			this._control_replace_new_type.data_list = g_IDEEnum.child_type_list;
			A_LayerManager.AddToModal(this._control_replace_dialog);
			this._control_replace_dialog.visible = false;
		}
		// 设置这个下拉菜单
		var data_list = target_parent.GetDataListForAdd();
		// 遍历，如果data_list里面已经有child_type那么就不添加
		var child_type_exist = false;
		for (var k, v in data_list)
		{
			if (v == child_type)
			{
				child_type_exist = true;
				break;
			}
		}
		if (child_type_exist == false)
			ALittle.Push(data_list, child_type);

		// 这个是IDETree或者IDETreeItem
		this._control_replace_dialog._user_data = target;
		// 设置下拉菜单的data_list
		this._control_replace_type.data_list = data_list;
		this._control_replace_dialog.visible = true;
		this._control_replace_extends_name.text = "";
	}
	
	public fun HandleReplaceControlCancel(ALittle.UIEvent event)
	{
		this._control_replace_dialog.visible = false;
		this._control_replace_dialog._user_data = null;
	}
	
	public fun HandleReplaceControlConfirm(ALittle.UIEvent event)
	{
		var target:IDETreeLogic = this._control_replace_dialog._user_data;
		this._control_replace_dialog._user_data = null;
		// 检查继承
		var extends_name = this._control_replace_extends_name.text;
		if (extends_name != "" && g_IDEProject.project.control_map[extends_name] == null)
		{
			g_IDETool.ShowNotice("错误", "继承控件不存在:"..extends_name);
			return;
		}
		this._control_replace_dialog.visible = false;
		// 获取添加类型
		var child_type = this._control_replace_type.text;
		var class_name = this._control_replace_new_type.text;
	
		target.TreeReplace(extends_name, class_name, child_type);
	}
	
	public fun HandleRightControlTreeCopy(ALittle.UIEvent event)
	{
		// 隐藏右键菜单
		A_LayerManager.HideFromRight(this._control_tree_menu);
		// 获取tree对象
		var target:IDETreeLogic = this._control_tree_menu._user_data;
		this._control_tree_menu._user_data = null;
		// 计算信息
		var info = new IDEControlCopyInfo();
		info.index = 1;
		info.info = target.CalcInfo();
		var copy_list = new List<IDEControlCopyInfo>();
		copy_list[1] = info;
		ALittle.System_SetClipboardText(lua.json.encode(copy_list));
	}
	
	public fun ShowPasteDialog(IDETreeLogic target, ALittle.DisplayInfo info, int child_index, IDERevokeBind revoke_bind, Functor<(bool, List<IDETreeLogic>)> callback)
	{
		var data_list = target.GetDataListForAdd();
		if (lua.table.maxn(data_list) == 0)
		{
			g_IDETool.ShowNotice("提示", "当前控件不能添加子控件");
			if (callback != null) callback(false, null);
			return;
		}
	
		if (this._paste_control_dialog == null)
		{
			this._paste_control_dialog = g_Control.CreateControl{ALittle.DisplayObject}("ide_paste_control_dialog", this);
			A_LayerManager.AddToModal(this._paste_control_dialog);
		}
		this._paste_control_dialog.visible = true;
		this._control_paste_type.data_list = data_list;
		var user_data = new IDEPasteControlUserData();
		this._paste_control_dialog._user_data = user_data;
		user_data.target = target;
		user_data.info = info;
		user_data.child_index = child_index;
		user_data.revoke_bind = revoke_bind;
		user_data.callback = callback;
	}
	
	public fun HandlePasteControlCancel(ALittle.UIEvent event)
	{
		this._paste_control_dialog.visible = false;
		var user_data:IDEPasteControlUserData = this._paste_control_dialog._user_data;
		var callback = user_data.callback;
		if (callback != null) callback(false, null);
		this._paste_control_dialog._user_data = null;
	}
	
	public fun HandlePasteControlConfirm(ALittle.UIEvent event)
	{
		this._paste_control_dialog.visible = false;
		var user_data:IDEPasteControlUserData = this._paste_control_dialog._user_data;
		this._paste_control_dialog._user_data = null;
	
		var add_list = new List<IDETreeLogic>();
		var tree_object = user_data.target.TreePaste(user_data.info, this._control_paste_type.text, user_data.child_index, false, user_data.revoke_bind);
		add_list[1] = tree_object;
		if (user_data.callback != null) user_data.callback(true, add_list);
	}
	
	public fun HandleRightControlTreePaste(ALittle.UIEvent event)
	{
		// 隐藏右键菜单
		A_LayerManager.HideFromRight(this._control_tree_menu);
		// 获取tree对象
		var target:IDETreeLogic = this._control_tree_menu._user_data;
		this._control_tree_menu._user_data = null;
	
		if (target.IsTree())
			target.tab_child.RightControlTreePasteImpl(target, null, null);
		else
		{
			var common_parent = cast<IDETreeLogic>(target.logic_parent);
			var child_index = 1;
			if (common_parent == null)
				common_parent = target;
			else
				child_index = common_parent.GetChildIndex(target) + 1;

			target.tab_child.RightControlTreePasteImpl(common_parent, null, child_index);
		}
	}
	
	public fun HandleRightControlTreeDelete(ALittle.UIEvent event)
	{
		// 隐藏右键菜单
		A_LayerManager.HideFromRight(this._control_tree_menu);
		// 获取tree对象
		var target:IDETreeLogic = this._control_tree_menu._user_data;
		this._control_tree_menu._user_data = null;
		// 隐藏红色框
		target.tab_child.HideHandleQuad(target, true);
		// 执行删除
		target.TreeDelete();
	}
	
	public fun HandleRightControlTreeCut(ALittle.UIEvent event)
	{
		// 隐藏右键菜单
		A_LayerManager.HideFromRight(this._control_tree_menu);
		// 获取tree对象
		var target:IDETreeLogic = this._control_tree_menu._user_data;
		this._control_tree_menu._user_data = null;
	
		var info = new IDEControlCopyInfo();
		info.index = 1;
		info.info = target.CalcInfo();
		var copy_list = new List<IDEControlCopyInfo>();
		copy_list[1] = info;
		ALittle.System_SetClipboardText(lua.json.encode(copy_list));
		target.TreeCut();
	}
	
	public fun HandleRightControlTreeJump(ALittle.UIEvent event)
	{
		// 隐藏右键菜单
		A_LayerManager.HideFromRight(this._control_tree_menu);
		// 获取tree对象
		var target:IDETreeLogic = this._control_tree_menu._user_data;
		this._control_tree_menu._user_data = null;
	
		var extends_name = target.user_info.base.__extends;
		var control_info = g_IDEProject.project.control_map[extends_name];
		if (control_info == null)
		{
			g_IDETool.ShowNotice("错误", "控件不存在:"..extends_name);
			return;
		}
	
		g_IDETabManager.StartEditControlBySelect(control_info.name, control_info.info);
	}
	
	public fun HandleRightControlTreeDesc(ALittle.UIEvent event)
	{
		// 隐藏右键菜单
		A_LayerManager.HideFromRight(this._control_tree_menu);
		// 获取tree对象
		var target:IDETreeLogic = this._control_tree_menu._user_data;
		this._control_tree_menu._user_data = null;
	
		var x, y = target.LocalToGlobal();
		var callback = bind(target.SetDesc, target);
		var desc = target.GetDesc();
		g_IDETool.ShowRename(callback, desc, x, y, target.width);
	}
	
	public fun HandleTreeSearchClick(ALittle.UIEvent event)
	{
		var tab = g_IDETabManager.cur_tab;
		if (tab == null) return;
		var tab_child:IDETabChild = tab._user_data;
		var search_key = this._tree_search_key.text;
		var search_type = this._tree_search_type.text;
		if (search_type == "描述")
			tab_child.SearchDescription(search_key);
		elseif (search_type == "绑定设置")
			tab_child.SearchLink(search_key);
		elseif (search_type == "事件设置")
			tab_child.SearchEvent(search_key);
		elseif (search_type == "插件名")
			tab_child.SearchTargetClass(search_key);
		elseif (search_type == "图片路径")
			tab_child.SearchTextureName(search_key);
	}
}

protected var g_IDEControlTree = new IDEControlTree();