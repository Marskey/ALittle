
namespace ALittleIDE;

public class IDEImageManager
{
	private ALittle.ScrollScreen _image_scroll_screen;
	private ALittle.DisplayObject _image_search_key;
	private ALittle.DisplayObject _image_tip_dialog;
	private ALittle.DisplayObject _image_right_menu;

	// 处理图片搜索
	public fun HandleImageSearchClick(ALittle.UIEvent event)
	{
		// 移除所有子控件
		this._image_scroll_screen.RemoveAllChild();
		// 获取当前项目
		var project = g_IDEProject.project;
		if (project == null)
		{
			g_IDETool.ShowNotice("提示", "当前没有打开的项目");
			return;
		}
		// 获取搜索的内容
		var key = this._image_search_key.text;
		var image_info_list = new List<string>();
		var image_info_count = 0;

		// 获取当前的项目图片资源路径
		var path  = project.base_path.."Texture";
		var file_map = ALittle.File_GetFileAttrByDir(path);
		for (var file_path, attr in file_map)
		{
			var file_name = ALittle.File_GetFileNameByPath(file_path);
			if (key == "" || ALittle.Find(file_name, key) != null)
			{
				++ image_info_count;
				image_info_list[image_info_count] = file_path;
			}
		}
		// 排序
		lua.table.sort(image_info_list);
		for (var index, file_path in image_info_list)
		{
			var file_name = ALittle.File_GetFileNameByPath(file_path);
			var item = g_Control.CreateControl{ALittle.DisplayObject}("ide_common_item_button");
			item.text = file_name;
			item._user_data = lua.String.sub(file_path, lua.String.len(path) + 2);
			item.AddEventListener(this, this.HandleImageItemRightClick);
			item.AddEventListener(this, this.HandleImageItemMoveIn);
			item.AddEventListener(this, this.HandleImageItemMouseMove);
			item.AddEventListener(this, this.HandleImageItemMoveOut);
			item.drag_trans_target = this._image_scroll_screen;
			this._image_scroll_screen.AddChild(item);
		}
	}

	public fun ClearImageItem()
	{
		this._image_scroll_screen.RemoveAllChild();
	}

	// 移入
	public fun HandleImageItemMoveIn(ALittle.UIMoveInEvent event)
	{
		if (this._image_tip_dialog == null)
		{
			this._image_tip_dialog = new ALittle.Image(g_IDEProject.project.control);
			this._image_tip_dialog.width = 100;
			this._image_tip_dialog.height = 100;
			A_LayerManager.AddToTip(this._image_tip_dialog);
		}
		this._image_tip_dialog.texture_name = event.target._user_data;
		this._image_tip_dialog.visible = true;
	}
	// 移动
	public fun HandleImageItemMouseMove(ALittle.UIMouseMoveEvent event)
	{
		if (this._image_tip_dialog == null) return;
		var x = A_UISystem.mouse_x + 10;
		var y  = A_UISystem.mouse_y + 10;
		if (y + this._image_tip_dialog.height > A_UISystem.view_height)
			y = A_UISystem.view_height - this._image_tip_dialog.height;

		this._image_tip_dialog.x = x;
		this._image_tip_dialog.y = y;
	}
	// 移出
	public fun HandleImageItemMoveOut(ALittle.UIMoveOutEvent event)
	{
		if (this._image_tip_dialog == null) return;
		this._image_tip_dialog.visible = false;
	}

	// 处理控件搜索右键点击
	public fun HandleImageItemRightClick(ALittle.UIRButtonDownEvent event)
	{
		if (this._image_right_menu == null)
			this._image_right_menu = g_Control.CreateControl{ALittle.DisplayObject}("ide_image_right_menu", this);

		A_LayerManager.ShowFromRight(this._image_right_menu);

		this._image_right_menu.x = A_UISystem.mouse_x;
		this._image_right_menu.y = A_UISystem.mouse_y;
		if (this._image_right_menu.x + this._image_right_menu.width > A_UISystem.view_width)
			this._image_right_menu.x = A_UISystem.view_width - this._image_right_menu.width;

		if (this._image_right_menu.y + this._image_right_menu.height > A_UISystem.view_height)
			this._image_right_menu.y = A_UISystem.view_height - this._image_right_menu.height;

		this._image_right_menu._user_data = event.target;
	}

	// 处理删除
	public fun DeleteControlImpl(ALittle.DisplayObject target)
	{
		g_IDEUICenter.image_scroll_screen.RemoveChild(target);

		// 删除图片
		lua.os.remove(target._user_data);
	}
	// 处理删除信息
	public fun HandleImageRightMenuDelete(ALittle.UIEvent event)
	{
		A_LayerManager.HideFromRight(this._image_right_menu);
		var target:ALittle.DisplayObject = this._image_right_menu._user_data;
		this._image_right_menu._user_data = null;
        
		var callback = bind(this.DeleteControlImpl, this, target);
		g_IDETool.DeleteNotice("提示", "确定要删除"..target.text.."吗?", callback);
	}
	// 复制路径
	public fun HandleImageRightMenuCopyPath(ALittle.UIEvent event)
	{
		A_LayerManager.HideFromRight(this._image_right_menu);
		var target:ALittle.DisplayObject = this._image_right_menu._user_data;
		this._image_right_menu._user_data = null;

		ALittle.System_SetClipboardText(target._user_data);
	}
	// 复制代码
	public fun HandleImageRightMenuCopyCode(ALittle.UIEvent event)
	{
		A_LayerManager.HideFromRight(this._image_right_menu);
		var target:ALittle.DisplayObject = this._image_right_menu._user_data;
		this._image_right_menu._user_data = null;
		this.CopyImageCodeImpl(target._user_data);
	}
	public fun CopyImageCodeImpl(string file_path)
	{
		var width = 100;
		var height = 100;
		var surface = ALittle.System_LoadSurface(g_IDEProject.project.base_path.."Texture/"..file_path);
		if (surface != null)
		{
			width = ALittle.System_GetSurfaceWidth(surface);
			height = ALittle.System_GetSurfaceHeight(surface);
			ALittle.System_FreeSurface(surface);
		}

		var display_info = new ALittle.DisplayInfo();
		display_info.__class = "Image";
		display_info.texture_name = file_path;
		display_info.width_type = ALittle.UIEnumTypes.POS_ABS;
		display_info.width_value = width;
		display_info.height_type = ALittle.UIEnumTypes.POS_ABS;
		display_info.height_value = height;

		var info = new IDEControlCopyInfo();
		info.index = 1;
		info.info = display_info;
		var copy_list = new List<IDEControlCopyInfo>();
		copy_list[1] = info;
		ALittle.System_SetClipboardText(lua.json.encode(copy_list));
	}

	// 九宫格
	public fun HandleImageRightMenuGrid9(ALittle.UIEvent event)
	{
		A_LayerManager.HideFromRight(this._image_right_menu);
		var target:ALittle.DisplayObject = this._image_right_menu._user_data;
		this._image_right_menu._user_data = null;

		var display_info = IDEUtility_GenerateGrid9ImageInfo(g_IDEProject.project.base_path.."Texture/", target._user_data);
		if (display_info == null)
		{
			g_IDETool.ShowNotice("错误", "图片加载失败:"..cast<string>(target._user_data));
			return;
		}
		var copy_list = new List<IDEControlCopyInfo>();
		var info  = new IDEControlCopyInfo();
		info.index = 1;
		info.info = display_info;
		copy_list[1] = info;
		ALittle.System_SetClipboardText(lua.json.encode(copy_list));
	}
	// 修正图片
	public fun HandleImageRightMenuRepair(ALittle.UIEvent event)
	{
		A_LayerManager.HideFromRight(this._image_right_menu);
		var target:ALittle.DisplayObject = this._image_right_menu._user_data;
		this._image_right_menu._user_data = null;

		var full_path = g_IDEProject.project.base_path.."Texture/"..cast<string>(target._user_data);
		var surface = ALittle.System_LoadSurface(full_path);
		if (surface != null)
		{
			ALittle.System_SaveSurface(surface, full_path);
			ALittle.System_FreeSurface(surface);
		}
	}

	// 删除边缘多余的空白
	public fun HandleImageRightMenuCutEmpty(ALittle.UIEvent event)
	{
		A_LayerManager.HideFromRight(this._image_right_menu);
		var target:ALittle.DisplayObject = this._image_right_menu._user_data;
		this._image_right_menu._user_data = null;

		var full_path = g_IDEProject.project.base_path.."Texture/"..cast<string>(target._user_data);
		var surface = ALittle.System_LoadSurface(full_path);
		if (surface != null)
		{
			var width = ALittle.System_GetSurfaceWidth(surface);
			var height = ALittle.System_GetSurfaceHeight(surface);

			// 左边向前走几步
			var left = 0;
			for (var i = 1, width, 1)
			{
				left = i - 1;
				var flag = false;
				for (var j = 1, height, 1)
				{
					var color = ALittle.System_GetSurfacePixel(surface, i-1, j-1);
					if (color != 0)
					{
						flag = true;
						break;
					}
				}
				if (flag == true)
					break;
			}

			var right = 0;
			for (var i = width, 1, -1)
			{
				right = i - 1;
				var flag = false;
				for (var j = 1, height, 1)
				{
					var color = ALittle.System_GetSurfacePixel(surface, i-1, j-1);
					if (color != 0)
					{
						flag = true;
						break;
					}
				}
				if (flag == true)
					break;
			}

			var top = 0;
			for (var j = 1, height, 1)
			{
				top = j - 1;
				var flag = false;
				for (var i = 1, width, 1)
				{
					var color = ALittle.System_GetSurfacePixel(surface, i-1, j-1);
					if (color != 0)
					{
						flag = true;
						break;
					}
				}
				if (flag == true)
					break;
			}

			var bottom = 0;
			for (var j = height, 1, -1)
			{
				bottom = j - 1;
				var flag = false;
				for (var i = 1, width, 1)
				{
					var color = ALittle.System_GetSurfacePixel(surface, i-1, j-1);
					if (color != 0)
					{
						flag = true;
						break;
					}
				}
				if (flag == true)
					break;
			}

			if (left <= right && top <= bottom)
			{
				var new_width = right - left + 1;
				var new_height = bottom - top + 1;
				var new_surface = ALittle.System_CreateSurface(new_width, new_height);
				ALittle.System_CutBlitSurface(new_surface, surface, "0,0,"..new_width..","..new_height, left..","..top..","..new_width..","..new_height);
				ALittle.System_SaveSurface(new_surface, full_path);
			}
			ALittle.System_FreeSurface(surface);
		}
	}
}

protected var g_IDEImageManager = new IDEImageManager();