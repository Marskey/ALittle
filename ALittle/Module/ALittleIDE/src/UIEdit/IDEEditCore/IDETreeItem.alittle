
namespace ALittleIDE;

public class IDETreeItem : IDETreeLogic
{

	public ctor(ALittle.ControlSystem ctrl_sys, IDETreeUserInfo user_info, IDETabChild tab_child)
	{
		if (this._user_info.extends)
			this._item = ctrl_sys.CreateControl{ALittle.DisplayObject}("ide_common_tree_item_disabled", this);
		else
			this._item = ctrl_sys.CreateControl{ALittle.DisplayObject}("ide_common_tree_item", this);
		this.AddChild(this._item);
		this.width = this._item.width;
		this.height = this._item.height;
	
		// this._item_button.drag_trans_target = this._tab_child.tree_screen
		this._item_button.selected = false;
		this._item_button.group_name = this._tab_child.group_name;
		this._item_button.AddEventListener(this, this.HandleClick);
		this._item_button.AddEventListener(this, this.HandleMoveIn);
		this._item_button.AddEventListener(this, this.HandleMouseMove);
		this._item_button.AddEventListener(this, this.HandleMoveOut);
		this._item_button.AddEventListener(this, this.HandleDragBegin);
		this._item_button.AddEventListener(this, this.HandleDrag);
		this._item_button.AddEventListener(this, this.HandleDragEnd);
		this._item_button.AddEventListener(g_IDEControlTree, g_IDEControlTree.HandleControlTreeItemRightClick);
		this._item_button._user_data = this;
	}
	
	public fun IsTree() : bool { return false; }
	public get fold() : bool { return false; }
	public set fold(bool value) { }
	public fun GetDataListForAdd() : List<string> { return new List<string>(); }

	public fun CalcInfo() : ALittle.DisplayInfo
	{
		// 复制基本信息
		return ALittle.String_CopyTable(this._user_info.base);
	}
	
	// 搜索link
	public fun SearchLink(string name, @Nullable List<IDETreeLogic> list) : List<IDETreeLogic>
	{
		if (list == null) list = new List<IDETreeLogic>();
	
		var link = this._user_info.base.__link;
		if (link == null) link = this._user_info.default.__link;
		if (link != null)
		{
			if (ALittle.Find(link, name) != null)
			{
				ALittle.Push(list, this);
				return list;
			}
		}
		return list;
	}
	
	// 搜索event
	public fun SearchEvent(string name, @Nullable List<IDETreeLogic> list) : List<IDETreeLogic>
	{
		if (list == null) list = new List<IDETreeLogic>();
	
		var event = this._user_info.base.__event;
		if (event == null) event = this._user_info.default.__event;
		if (event != null)
		{
			for (var k, v in event)
			{
				if (ALittle.Find(v.func, name) != null)
				{
					ALittle.Push(list, this);
					return list;
				}
			}
		}
		return list;
	}
	
	// 搜索description
	public fun SearchDescription(string name, @Nullable List<IDETreeLogic> list) : List<IDETreeLogic>
	{
		if (list == null) list = new List<IDETreeLogic>();
	
		var description = this._user_info.base.description;
		if (description == null) description = this._user_info.default.description;
		if (description != null)
		{
			if (ALittle.Find(description, name) != null)
			{
				ALittle.Push(list, this);
				return list;
			}
		}
		return list;
	}
	
	// 搜索target_class
	public fun SearchTargetClass(string name, @Nullable List<IDETreeLogic> list) : List<IDETreeLogic>
	{
		if (list == null) list = new List<IDETreeLogic>();
	
		var target_class = this._user_info.base.__target_class;
		if (target_class == null) target_class = this._user_info.default.__target_class;
		if (target_class != null)
		{
			var target_class_str = ALittle.String_Join(target_class, ".");
			if (ALittle.Find(target_class_str, name) != null)
			{
				ALittle.Push(list, this);
				return list;
			}
		}
		return list;
	}
	
	// 搜索texture_name
	public fun SearchTextureName(string name, @Nullable List<IDETreeLogic> list) : List<IDETreeLogic>
	{
		if (list == null) list = new List<IDETreeLogic>();
	
		var texture_name = this._user_info.base.texture_name;
		if (texture_name == null) texture_name = this._user_info.default.texture_name;
		if (texture_name != null)
		{
			if (ALittle.Find(texture_name, name) != null)
			{
				ALittle.Push(list, this);
				return list;
			}
		}
		return list;
	}
	
	// 编辑区拾取
	public fun EditPickUp(double x, double y) : IDETreeLogic
	{
		// 如果是继承的是不可以选中的
		if (this._user_info.extends) return null;
		
		// 检查自己是否被选中
		var object = this._user_info.object;
		var pick_this, rel_x, rel_y = object.PickUpSelf(x, y);
	
		if (pick_this != null) return this;
		return null;
	}
	
	// 编辑区拾取列表，深度拾取，会产生一个列表，只拾取容器
	public fun QuickPickUp(double x, double y, List<IDETreeLogic> list)
	{
	}
	
	// 控件树区拾取
	public fun SelectPickUp(double x, double y) : IDETreeLogic, IDETreeLogic
	{
		if (this._user_info.extends) return null, null;
	
		var pick_this, rel_x, rel_y = this._item_button.PickUpSelf(x, y);
	
		if (pick_this != null) return null, this;
		return null, null;
	}
}