
namespace ALittleIDE;

public class Grid9ImageS : Grid9S
{
    private ALittle.DisplayObject _texture_name;

    public ctor(IDETreeUserInfo user_info, IDETabChild tab_child, IDETreeLogic tree_logic)
    {
        // 设置面板的UI
        this._layer_name = "ide_setting_grid9image";
    }
    
    public fun LoadNatureBase()
    {
        Grid9S.LoadNatureBase(this);
        this.LoadDefaultNilString("texture_name");
        this.LoadEnumData("flip", cast<Map<string, any>>(g_IDEEnum.flip_type));
    }
    
    public fun HandleImageTextureNameFOCUSOUT(ALittle.UIEvent event)
    {
        this.DefaultNilStringInputChange("texture_name", false);
        this.HandleAutoCut(event);
    }
    public async fun HandleImageTextureNameSelect(ALittle.UIEvent event)
    {
		g_IDEImageSelectDialog.SetBasePath(g_IDEProject.project.texture_path);
		var path = g_IDEImageSelectDialog.ShowSelect();
		if (path == null) return;
		this.ImagePathSelectCallback("texture_name", this.HandleImageTextureNameFOCUSOUT, null, path);
    }
    public fun HandleFlipSELECT_CHANGE(ALittle.UIEvent event)
    {
        var list = g_IDEEnum.flip_rtype;
        this.TypeSelectChange("flip", cast<Map<string, any>>(list), false);
    }
    public fun HandleAutoCut(ALittle.UIEvent event)
    {
        var image_path = this._texture_name.text;
        var display_info = IDEUIUtility_GenerateGrid9ImageInfo(g_IDEProject.project.texture_path.."/", image_path);
        if (display_info == null) return;
        var revoke_bind = new IDERevokeBind();
        this._left_size.text = display_info.left_size;
        this.ValueNumInputChange("left_size", false, revoke_bind);
        this._right_size.text = display_info.right_size;
        this.ValueNumInputChange("right_size", false, revoke_bind);
        this._top_size.text = display_info.top_size;
        this.ValueNumInputChange("top_size", false, revoke_bind);
        this._bottom_size.text = display_info.bottom_size;
        this.ValueNumInputChange("bottom_size", false, revoke_bind);
        this._tab_child.revoke_list.PushRevoke(revoke_bind);
    }
}