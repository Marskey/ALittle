
namespace ALittleIDE;

// 项目事件
struct IDEProjectEvent : ALittle.Event
{
	string name;	// 项目名称
}
public struct IDEProjectOpenEvent : IDEProjectEvent {}
public struct IDEProjectCloseEvent : IDEProjectEvent {}
public struct IDEProjectCreateControlEvent : IDEProjectEvent {}
public struct IDEProjectDeleteControlEvent : IDEProjectEvent {}
public struct IDEProjectChangeControlEvent : IDEProjectEvent {}

// 控件细腻些
public struct IDEControlInfo
{
	ALittle.DisplayInfo info;					// 控件内容
	string name;								// 控件名称
	Map<string, bool> extends_this;				// 继承自己的控件集合
	Map<string, bool> extends_other;			// 继承别人的控件集合
}

// 控件拷贝信息
public struct IDEControlCopyInfo
{
	int index;					// 控件位置
	ALittle.DisplayInfo info;	// 控件信息
}

// 项目信息
public struct IDEProjectInfo
{
	string name;								// 项目名称
	string base_path;							// 项目基本路径
	bool save;									// 所有信息是否已保存
	ALittle.ControlSystem control;				// 项目的控件系统
	ALittle.IJsonConfig config;			// 项目的配置文件系统
	Map<string, IDEControlInfo> control_map;	// 项目内所有的控件
}

public class IDEProject : ALittle.EventDispatcher
{
	// 当前项目的项目信息
	private IDEProjectInfo _project;

	public ctor()
	{
	}

	private fun AddProjectConfig(string name)
	{
		var project_map = g_IDEConfig.GetConfig("project_map", new Map<string, string>());
		if (project_map[name] == null)
		{
			project_map[name] = name;
			g_IDEConfig.SetConfig("project_map", project_map);
		}
	}

	private fun RemoveProjectConfig(string name)
	{
		var project_map = g_IDEConfig.GetConfig("project_map", new Map<string, string>());
		if (project_map[name] == null) return;
		project_map[name] = null;
		g_IDEConfig.SetConfig("project_map", project_map);
	}

	// 新建项目
	// name 项目名
	public fun NewProject(string name
						 , int window_width, int window_height
						 , string font_path, int font_size) : bool
	{
		// 创建项目
		ALittle.File_MakeDeepDir(ALittle.File_BaseFilePath().."Module/"..name);

		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/Texture");
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/Texture/"..name);
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/Font");
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/Sound");
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/Other");
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/Protocol");
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/Script");
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/UI");
		ALittle.File_MakeDir(ALittle.File_BaseFilePath().."Module/"..name.."/Icon");

		// 创建一个未加密文件
		ALittle.File_WriteTextToFile("", ALittle.File_BaseFilePath().."Module/"..name.."/NoCrypt.ali");

		var base_path = ALittle.File_BaseFilePath().."Module/ALittleIDE/Other/GameTemplate";
		var target_path = ALittle.File_BaseFilePath().."Module/"..name.."/";
		// 读取模板的所有文件路径
		var file_map = ALittle.File_GetFileAttrByDir(base_path);
		// 遍历游戏模板所有文件，整合后进行复制处理
		for (var file_path, attr in file_map)
		{
			// 计算相对路径
			var rel_path = lua.String.sub(file_path, lua.String.len(base_path) + 1);
			// 计算目标全路径
			var full_path = target_path..rel_path;
			// 对路径进行处理
			full_path = ALittle.String_Replace(full_path, "abcd@module_name@abcd", name);
			full_path = ALittle.String_Replace(full_path, "abcd@upper_module_name@abcd", lua.String.upper(name));
			full_path = ALittle.String_Replace(full_path, "abcd@lower_module_name@abcd", lua.String.lower(name));
			// 创建目录
			ALittle.File_MakeDeepDir(ALittle.File_GetFilePathByPath(full_path));

			// 对一下后缀进行文件内容处理
			var ext = lua.String.upper(ALittle.File_GetFileExtByPath(file_path));
			if (ext == "JSON" || ext == "LUA" || ext == "CFG" || ext == "TXT" || ext == "ALITTLE" || ext == "XML" || ext == "NAME")
			{
				// 读出文件
				var content = ALittle.File_ReadTextFromFile(file_path);
				if (content != null)
				{
					content = ALittle.String_Replace(content, "abcd@module_name@abcd", name);
					content = ALittle.String_Replace(content, "abcd@upper_module_name@abcd", lua.String.upper(name));
					content = ALittle.String_Replace(content, "abcd@lower_module_name@abcd", lua.String.lower(name));
					content = ALittle.String_Replace(content, "abcd@view_width@abcd", lua.tostring(window_width));
					content = ALittle.String_Replace(content, "abcd@view_height@abcd", lua.tostring(window_height));
					content = ALittle.String_Replace(content, "abcd@font_path@abcd", font_path);

					ALittle.File_WriteTextToFile(content, full_path);
				}
			}
			// 如果是其他类型的文件，那么就直接复制即可
			else
				ALittle.File_CopyFile(file_path, full_path);
		}

		// 复制默认Windows ICON
		ALittle.File_CopyFile("Export/Icon/install.ico", ALittle.File_BaseFilePath().."Module/"..name.."/Icon/install.ico");
		// 复制默认的Android iOS Icon
		ALittle.File_CopyFile("Export/Icon/install.png", ALittle.File_BaseFilePath().."Module/"..name.."/Icon/install.png");

		// 创建配置文件
		var config = ALittle.CreateConfigSystem("Module/"..name.."/ALittleIDE.cfg");
		config.SetConfig("default_show_width", window_width, true);
		config.SetConfig("default_show_height", window_height, true);
		config.SetConfig("default_font_path", font_path, true);
		config.SetConfig("default_font_size", font_size, true);
		config.SaveConfig();

		// 添加到项目列表
		this.AddProjectConfig(name);
		return true;
	}

	// 打开项目
	public fun OpenProject(string name) : bool
	{
		// 添加到项目列表
		this.AddProjectConfig(name);

		// 加载项目信息
		this._project = new IDEProjectInfo();
		this._project.name = name;
		this._project.base_path = ALittle.File_BaseFilePath().."Module/"..name.."/";
		this._project.save = true;
		this._project.control = new ALittle.ControlSystem(name);
		this._project.control.cache_texture = false;
		this._project.config = ALittle.CreateConfigSystem("Module/"..name.."/ALittleIDE.cfg");

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 加载所有控件
		var control_map = new Map<string, IDEControlInfo>();
		this._project.control_map = control_map;
		// 遍历文件夹，加载所有控件
		var path = ALittle.File_BaseFilePath().."Module/"..name.."/UI";
		// 加载UI文件夹内的所有json文件
		var file_map = ALittle.File_GetFileAttrByDir(path);
		for (var file_path, attr in file_map)
		{
			var ext = lua.String.upper(ALittle.File_GetFileExtByPath(file_path));
			if (ext == "JSON")
			{
				// 读取文件内容
				var content = ALittle.File_ReadTextFromFile(file_path);
				if (content != null)
				{
					var error, content_info_map:Map<string, ALittle.DisplayInfo> = tcall(lua.json.decode, content);
					if (error == null)
					{
						for (var control_name, control_info in content_info_map)
						{
							// 获取信息
							var all_info = new IDEControlInfo();
							all_info.info = control_info;
							all_info.name = control_name;
							all_info.extends_this = new Map<string, bool>();
							all_info.extends_other = new Map<string, bool>();
							// 检查控件信息是否重复
							if (control_map[control_name] != null) ALittle.Log("IDEProject:OpenProject control_name:"..control_name.." repeat in "..file_path);
							// 保存信息
							control_map[control_name] = all_info;
						}
					}
					else
						ALittle.Log("IDEProject:OpenProject json decode failed:", file_path, content_info_map);
				}
				else
					ALittle.Log("IDEProject:OpenProject failed:", file_path);
			}
		}

		// 处理继承关系
		for (var control_name, all_info in control_map)
		{
			// 计算继承了哪些控件
			var map = IDEUtility_GetExtends(all_info.info);
			for (var other_name, v in map)
			{
				// 取出继承的那个控件，然后互相标记一下
				var other = control_map[other_name];
				if (other != null)
				{
					other.extends_this[control_name] = true;
					all_info.extends_other[other_name] = true;
				}
				else
					ALittle.Log("IDEProject:OpenProject calc extends failed:", other_name);
			}
		}
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// 标记上次打开的项目名
		g_IDEConfig.SetConfig("last_project", name);

		var e = new IDEProjectOpenEvent();
		e.name = name;
		this.DispatchEvent(e);

		return true;
	}

	// 获取控件是否存在
	public fun IsControlExist(string name) : bool
	{
		if (this._project == null) return false;
		return this._project.control_map[name] != null;
	}

	// 计算出某个控件，继承了哪些控件，以及这些控件继承了哪些控件
	// 这个主要用于在新建控件时，避开循环继承
	public fun CalcDeepExtends(string name, Map<string, bool> map, Map<string, bool> lock_map) : Map<string, bool>
	{
		if (map == null) map = new Map<string, bool>();
		if (lock_map == null) lock_map = new Map<string, bool>();
		var info = this._project.control_map[name];
		if (info == null) return map;

		map[name] = true;
		// 遍历改控件，继承了其他哪些控件
		for (var other_name, v in info.extends_other)
		{
			if (lock_map[other_name] == null)
			{
				lock_map[other_name] = true;
				this.CalcDeepExtends(other_name, map, lock_map);
			}
			map[other_name] = true;
		}
		return map;
	}

	// 保存控件
	public fun SaveControl(string name, ALittle.DisplayInfo info) : bool, string
	{
		// 将信息保存到文件中
		var file_path = this._project.base_path.."UI/"..name..".json";
		// 创建一个保存映射表
		var save_info = new Map<string, ALittle.DisplayInfo>();
		save_info[name] = info;
		// 保存文件
		if (ALittle.File_SaveFile(file_path, lua.json.encode(save_info), -1) == false)
			return false, "文件保存失败:"..file_path;

		// 取出改控件原有信息
		var all_info = this._project.control_map[name];
		if (all_info != null)
		{
			// 注销原来的继承自己的关系
			for (var other_name, v in all_info.extends_other)
			{
				var other = this._project.control_map[other_name];
				if (other != null)
					other.extends_this[name] = null;
				else
					ALittle.Log("IDEProject:SaveControl calc extends failed:", other_name);
			}
			// 清理对其他控件的继承关系
			all_info.extends_other = new Map<string, bool>();
			// 处理那些继承自己的控件，重新注册一下
			for (var other_name, v in all_info.extends_this)
			{
				var other = this._project.control_map[other_name];
				if (other != null)
					this._project.control.RegisterInfo(other.name, ALittle.String_CopyTable(other.info));
				else
					ALittle.Log("IDEProject:SaveControl calc extends failed:", other_name);
			}
		}
		else
		{
			all_info = new IDEControlInfo();
			all_info.info = info;
			all_info.name = name;
			all_info.extends_this = new Map<string, bool>();
			all_info.extends_other = new Map<string, bool>();
		}

		// 重新注册继承的那些控件
		var map = IDEUtility_GetExtends(info);
		for (var other_name, v in map)
		{
			var other = this._project.control_map[other_name];
			if (other != null)
			{
				other.extends_this[name] = true;
				all_info.extends_other[other_name] = true;
			}
			else
				ALittle.Log("IDEProject:SaveControl calc extends failed:", other_name);
		}
		all_info.info = info;
		// 设置到项目中
		this._project.control_map[name] = all_info;
		// 注册到UI系统
		this._project.control.RegisterInfo(name, ALittle.String_CopyTable(info));

		var e = new IDEProjectChangeControlEvent();
		e.name = name;
		this.DispatchEvent(e);
		return true, null;
	}

	// 删除控件
	public fun CanDelete(string name) : bool, string
	{
		// 检查控件是否存在
		var all_info = this._project.control_map[name];
		if (all_info == null) return false, "控件不存在:"..name;

		// 检查是否有被其他控件引用
		var extends_name:string = null;
		for (var k, v in all_info.extends_this)
		{
			extends_name = k;
			break;
		}
		if (extends_name != null) return false, "被其他控件引用:"..extends_name;
		return true, null;
	}
	// 删除
	public fun DeleteControl(string name) : bool, string
	{
		// 检查是否能够删除
		var result, content = this.CanDelete(name);
		if (result == false) return result, content;
        
		// 删除文件
		var file_path = this._project.base_path.."UI/"..name..".json";
		lua.os.remove(file_path);

		// 取消引用别人的标记
		// 如果可以删除，说明并没有其他控件引用自己，所以不需要处理这块
		var all_info = this._project.control_map[name];
		for (var other_name, v in all_info.extends_other)
		{
			var other = this._project.control_map[other_name];
			if (other != null)
				other.extends_this[name] = null;
		}
        
		var e = new IDEProjectDeleteControlEvent();
		e.name = name;
		this.DispatchEvent(e);
		// 从控件表中删除
		this._project.control_map[name] = null;

		// 从UI系统中删除
		this._project.control.UnRegisterInfo(name);

		// 调用
		return true, null;
	}

	// 重命名名控件（控件未保存是，不允许修改名称）
	public fun RenameControl(string old_name, string new_name) : bool, string
	{
		// 检查控件是否存在
		var all_info = this._project.control_map[old_name];
		if (all_info == null) return false, "控件不存在:"..old_name;

		// 检查是否能够重命名
		var result, content = this.CanDelete(old_name);
		if (result == false) return result, "控件被其他控件引用，不能重命名";

		// 检查新名称是否已存在
		if (this._project.control_map[new_name] != null) return false, "控件已存在:"..new_name;

		// 注销控件
		var e = new IDEProjectDeleteControlEvent();
		e.name = old_name;
		this.DispatchEvent(e);
		// 清理控件信息
		this._project.control_map[old_name] = null;
		// 注销控件
		this._project.control.UnRegisterInfo(old_name);
		// 删除文件
		var file_path = this._project.base_path.."UI/"..old_name..".json";
		lua.os.remove(file_path);

		// 设置新的控件名并注册
		all_info.name = new_name;
		this._project.control_map[new_name] = all_info;
		this._project.control.RegisterInfo(new_name, ALittle.String_CopyTable(all_info.info));
		// 保存文件
		file_path = this._project.base_path.."UI/"..new_name..".json";
		var save_info = new Map<string, any>();
		save_info[new_name] = all_info.info;
		ALittle.File_SaveFile(file_path, lua.json.encode(save_info), -1);

		// 创建控件
        var ce = new IDEProjectCreateControlEvent();
		ce.name = new_name;
		this.DispatchEvent(ce);

		// 因为控件只是改名，并没有修改依赖关系，所以不用处理依赖关系
        
		return true, null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 关闭项目
	public fun CloseProject() : bool, string
	{
		if (this._project == null) return false, "当前没有项目";

		var e = new IDEProjectCloseEvent();
		e.name = this._project.name;
		this.DispatchEvent(e);
		this._project = null;
		return true, null;
	}

	// 移除项目
	public fun RemoveProject(string name) : bool, string
	{
		if (this._project != null && this._project.name == name)
			return false, "请先关闭项目，再移除";

		this.RemoveProjectConfig(name);

		// 清楚上次打开的项目
		var project_name:string = g_IDEConfig.GetConfig("last_project", "");
		if (project_name == name)
			g_IDEConfig.SetConfig("last_project", "");

		return true, null;
	}

	// 获取当前项目
	public get project() : IDEProjectInfo
	{
		return this._project;
	}
}

protected var g_IDEProject = new IDEProject();