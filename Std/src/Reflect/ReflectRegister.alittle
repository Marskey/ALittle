
namespace ALittle;

private var __all_name_struct = new Map<string, StructInfo>();
private var __all_id_struct = new Map<int, StructInfo>();
public static RegStruct(int hash, string name, StructInfo info)
{
    if (__all_name_struct[name] != null)
        return;
    var old_info = __all_id_struct[hash];
    if (old_info != null)
    {
        Error("RegReflect 名字为"..name.."和名字为"..old_info.name.."哈希值冲突, 请为"..name.."修改名字来避开冲突！");
        return;
    }
    __all_name_struct[name] = info;
    __all_id_struct[hash] = info;
}

protected static FindStructByName(string name) : StructInfo
{
    return __all_name_struct[name];
}

public static FindStructById(int id) : StructInfo
{
    return __all_id_struct[id];
}

protected static GetAllStruct() : Map<int, StructInfo>
{
    return __all_id_struct;
}

private static CollectStructInfo(ProtocolInvokeInfo invoke, Map<int, StructInfo> map)
{
    if (invoke == null) return;
    
    if (invoke.rflt != null)
    {
        if (map[invoke.rflt.hash_code] != null) return;
        map[invoke.rflt.hash_code] = invoke.rflt;
    }    
    
    if (invoke.key_info != null) CollectStructInfo(invoke.key_info, map);
    if (invoke.value_info != null) CollectStructInfo(invoke.value_info, map);
    if (invoke.sub_info != null) CollectStructInfo(invoke.sub_info, map);
    if (invoke.handle != null)
    {
        for (var index, info in invoke.handle)
            CollectStructInfo(info, map);
    }
}

public static CollectStructReflect(StructInfo info, Map<int, StructInfo> map) : string
{
    if (info == null) return "参数info是null";
    var error, invoke = tcall(CreateMessageInfoImpl, info);
    if (error != null) return error;
    
    CollectStructInfo(invoke, map);
    return null;
}  
