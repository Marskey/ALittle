
namespace ALittle;

// 连接对象
public class IHttpFileSenderNative
{
    public fun GetID() : int { return 0; }             // 获取全局ID
    // 设置url
    // file_path是本地文件路径
    // download 为true表示下载，false表示上传
    // start_size 文件的起始位置
    public fun SetURL(string url, string file_path, bool download, int start_size) {}
    public fun Start() {}                   // 开始请求
    public fun Stop() {}                    // 结束请求
    public fun GetPath() : string { return ""; }        // 获取文件路径
    public fun GetCurrentSize() : int { return 0; }    // 获取已上传的文件大小
    public fun GetTotalSize() : int { return 0; }      // 获取文件总大小
    public fun GetContent() : string { return null; }
}

// 短连接文件所有的对象集合，提供客户端使用
private var __HttpFileSenderMap = new Map<int, IHttpFileSender>();
public static FindHttpFileSender(int id) : IHttpFileSender { return __HttpFileSenderMap[id]; }

public class HttpFileSenderTemplate<NATIVE : IHttpFileSenderNative> : IHttpFileSender
{
    private NATIVE _interface;
    private Thread _thread;
    private string _ip;
    private int _port;
    private string _file_path;
    private int _start_size;
    private Functor<(IHttpFileSenderNative)> _callback;        // 下载或者上传的进度回调

    public ctor(string ip, int port, string file_path, int start_size, [Nullable] Functor<(IHttpFileSenderNative)> callback)
    {
        this._interface = new NATIVE();
        this._ip = ip;
        this._port = port;
        if (this._port == null) this._port = 80;
        this._file_path = file_path;
        this._start_size = start_size;
        this._callback = callback;
    }

    protected fun SendDownloadRPC(Thread thread, string method, any content)
    {
        this._thread = thread;
        __HttpFileSenderMap[this._interface.GetID()] = this;

        if (this._start_size == null)
            this._start_size = 0;

        // 设置URL
        var url = "http://"..this._ip..":"..this._port.."/"..method;
        this._interface.SetURL(this.HttpUrlAppendParamMap(url, content), this._file_path, true, this._start_size);
        this._interface.Start();
    }

    protected fun SendUploadRPC(Thread thread, string method, any content)
    {
        this._thread = thread;
        __HttpFileSenderMap[this._interface.GetID()] = this;

        if (this._start_size == null)
            this._start_size = 0;
        
        // 设置URL
        var url = "http://"..this._ip..":"..this._port.."/"..method;
        this._interface.SetURL(this.HttpUrlAppendParamMap(url, content), this._file_path, false, this._start_size);
        this._interface.Start();
    }

    public fun Stop()
    {
        this._interface.Stop();
    }

    public fun GetTotalSize() : int
    {
        return this._interface.GetTotalSize();
    }
    
    public fun GetContent() : string
    {
        return this._interface.GetContent();
    }

    protected fun HandleSucceed()
    {
        __HttpFileSenderMap[this._interface.GetID()] = null;
        var result, reason = Coroutine.Resume(this._thread, null, this);
        if (result != true) Error(reason);
    }
    
    protected fun HandleFailed(string reason)
    {
        __HttpFileSenderMap[this._interface.GetID()] = null;
        var result, error = Coroutine.Resume(this._thread, reason, this);
        if (result != true) Error(error);
    }
    
    protected fun HandleProcess()
    {
        if (this._callback != null)
            this._callback(this._interface);
    }
    
    // 拼接url
    private fun HttpUrlAppendParamMap(string url, Map<string, any> param) : string
    {
        var list = new List<string>();
        var count = 0;
        for (var key, value in param)
        {
            ++ count;
            list[count] = key.."="..String_ToString(value);
        }
    
        if (String_Find(url, "?") == null)
            url = url .. "?";
        else
            url = url .. "&";
    
        return url .. String_Join(list, "&");
    }
}
