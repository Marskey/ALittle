
[Language(JavaScript)]
namespace JavaScript;


protected var __classex_map = new Map<string, ALittle.ClassInfo>();


// 这个类是在ALittle.Class的基础上加强的
// 因为js文件一般都是异步加载，并且无法知道js文件之间类的继承关联
// ALittle.ClassEx有延迟加载的效果，可以一起不分先后加载js文件，及时这些js文件有类的继承依赖
// 这个函数可以保证在所有js全部加载完毕之后，类的继承都可以正确的执行。
// param class_name 类名，字符串，格式为 包名1.包名2.类名 比如 CDPWeb.CDPPlugin.Login
// param super_class_name 类名，字符串，格式为 包名1.包名2.类名 比如 CDPWeb.CDPPlugin.CommonDialog
// param child_class_prop 属性对象
// param callback 回调函数，当类成功定义之后会调用
// return 没有返回值

protected static Class(ALittle.ClassInfo super, Map<string, any> clazz_prop, string clazz_name) : ALittle.ClassInfo
{
    // 创建对象
    var clazz = new ALittle.ClassInfo();
    
    var setter_map = new Map<string, Functor<(any, any)>>();    // setter
    var getter_map = new Map<string, Functor<(any):any>>();    // getter
    
    // 处理父类
    if (super != null)
    {        
        // 保存父类对象
        clazz.__super = super;
        clazz.__name = clazz_name;
        
        // 遍历所有父类的属性和函数
        for (var name, value in cast<Map<string, any>>(super))
        {
			// 除了构造函数和super_class的父类对象不需要复制，其他都要复制
            if (name != "Ctor" && name != "__super" && name != "__getter" && name != "__setter")
            {
				// 复制对应的setter，getter函数
                var info = cast<Map<string, any>>(javascript.Object.getOwnPropertyDescriptor(super, name));
                if (info["set"] != null || info["get"] != null) javascript.Object.defineProperty(clazz, name, info);
                
                if (info["set"] != null) setter_map[name] = info["set"];
                if (info["get"] != null) getter_map[name] = info["get"];
                
                // 如果两个都没有，那么这个基本上就是函数了，那么就直接复制
                if (info["set"] == null && info["get"] == null)
                    cast<Map<string, any>>(clazz)[name] = cast<Map<string, any>>(super)[name];
            }            
        }
    }
    
    // 同理复制当前的属性和函数
    for (var name, value in clazz_prop)
    {
		// 复制对应的setter，getter函数
        var info = cast<Map<string, any>>(javascript.Object.getOwnPropertyDescriptor(clazz_prop, name));
        if (info["get"] == null && info["set"] == null)
        {
            cast<Map<string, any>>(clazz)[name] = value;
        }
        else if (info["get"] != null && info["set"] == null)
        {
            getter_map[name] = info["get"];
            if (setter_map[name] != null)
                info["set"] = setter_map[name];
            javascript.Object.defineProperty(clazz, name, info);
        }
        else if (info["get"] == null && info["set"] != null)
        {
            setter_map[name] = info["set"];
            if (getter_map[name] != null)
                info["get"] = getter_map[name];
            javascript.Object.defineProperty(clazz, name, info);
        }
        else
        {
            getter_map[name] = info["get"];
            setter_map[name] = info["set"];
            javascript.Object.defineProperty(clazz, name, info);
        }
    }
    clazz.__getter = getter_map;
    clazz.__setter = setter_map;
    
    return clazz;
}

// 定义模板
protected static Template(ALittle.ClassInfo clazz, string name, ...) : ALittle.ClassInfo
{
    var child = clazz.__child;
    if (child == null)
    {
        child = new Map<string, ALittle.ClassInfo>();
        clazz.__child = child;
    }
    var template = child[name];
    if (template != null) return template;

    // 定义模板
    template = new ALittle.ClassInfo();
    child[name] = template;
    // 复制
    for (var key, value in cast<Map<string,any>>(clazz))
    {
        if (type(value) == "function" || IsCoWrap(value))
            cast<Map<string,any>>(template)[key] = value;
    }
    template.__super = clazz.__super;
    template.__name = name;
    template.__setter = clazz.__setter;
    template.__getter = clazz.__getter;
    // 模板元素
    var list = new List<ALittle.ClassInfo>();
    // 复制模板
    arguments.shift();
    arguments.shift();
    template.__element = cast<List<ALittle.ClassInfo>>(arguments);
    
    // 返回模板
    return template;
}
